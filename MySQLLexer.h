/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2015-01-19 20:42:40
 *     -                 for the lexer : MySQLLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer MySQLLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLLexer, which is returned from a call to MySQLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pMySQLLexer are  as follows:
 *
 *  -  void      pMySQLLexer->A_(pMySQLLexer)
 *  -  void      pMySQLLexer->B_(pMySQLLexer)
 *  -  void      pMySQLLexer->C_(pMySQLLexer)
 *  -  void      pMySQLLexer->D_(pMySQLLexer)
 *  -  void      pMySQLLexer->E_(pMySQLLexer)
 *  -  void      pMySQLLexer->F_(pMySQLLexer)
 *  -  void      pMySQLLexer->G_(pMySQLLexer)
 *  -  void      pMySQLLexer->H_(pMySQLLexer)
 *  -  void      pMySQLLexer->I_(pMySQLLexer)
 *  -  void      pMySQLLexer->J_(pMySQLLexer)
 *  -  void      pMySQLLexer->K_(pMySQLLexer)
 *  -  void      pMySQLLexer->L_(pMySQLLexer)
 *  -  void      pMySQLLexer->M_(pMySQLLexer)
 *  -  void      pMySQLLexer->N_(pMySQLLexer)
 *  -  void      pMySQLLexer->O_(pMySQLLexer)
 *  -  void      pMySQLLexer->P_(pMySQLLexer)
 *  -  void      pMySQLLexer->Q_(pMySQLLexer)
 *  -  void      pMySQLLexer->R_(pMySQLLexer)
 *  -  void      pMySQLLexer->S_(pMySQLLexer)
 *  -  void      pMySQLLexer->T_(pMySQLLexer)
 *  -  void      pMySQLLexer->U_(pMySQLLexer)
 *  -  void      pMySQLLexer->V_(pMySQLLexer)
 *  -  void      pMySQLLexer->W_(pMySQLLexer)
 *  -  void      pMySQLLexer->X_(pMySQLLexer)
 *  -  void      pMySQLLexer->Y_(pMySQLLexer)
 *  -  void      pMySQLLexer->Z_(pMySQLLexer)
 *  -  void      pMySQLLexer->ABS(pMySQLLexer)
 *  -  void      pMySQLLexer->ACCESSIBLE(pMySQLLexer)
 *  -  void      pMySQLLexer->ACOS(pMySQLLexer)
 *  -  void      pMySQLLexer->ACTION(pMySQLLexer)
 *  -  void      pMySQLLexer->ADD_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->ADDDATE(pMySQLLexer)
 *  -  void      pMySQLLexer->ADDTIME(pMySQLLexer)
 *  -  void      pMySQLLexer->AES_DECRYPT(pMySQLLexer)
 *  -  void      pMySQLLexer->AES_ENCRYPT(pMySQLLexer)
 *  -  void      pMySQLLexer->AFTER(pMySQLLexer)
 *  -  void      pMySQLLexer->AGAINST(pMySQLLexer)
 *  -  void      pMySQLLexer->AGGREGATE(pMySQLLexer)
 *  -  void      pMySQLLexer->ALGORITHM(pMySQLLexer)
 *  -  void      pMySQLLexer->ALL(pMySQLLexer)
 *  -  void      pMySQLLexer->ALTER(pMySQLLexer)
 *  -  void      pMySQLLexer->ANALYZE(pMySQLLexer)
 *  -  void      pMySQLLexer->AND_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->ANY(pMySQLLexer)
 *  -  void      pMySQLLexer->ARMSCII8(pMySQLLexer)
 *  -  void      pMySQLLexer->AS(pMySQLLexer)
 *  -  void      pMySQLLexer->ASC(pMySQLLexer)
 *  -  void      pMySQLLexer->ASCII(pMySQLLexer)
 *  -  void      pMySQLLexer->ASENSITIVE(pMySQLLexer)
 *  -  void      pMySQLLexer->ASIN(pMySQLLexer)
 *  -  void      pMySQLLexer->AT(pMySQLLexer)
 *  -  void      pMySQLLexer->ATAN(pMySQLLexer)
 *  -  void      pMySQLLexer->ATAN2(pMySQLLexer)
 *  -  void      pMySQLLexer->AUTHORS(pMySQLLexer)
 *  -  void      pMySQLLexer->AUTO_INCREMENT(pMySQLLexer)
 *  -  void      pMySQLLexer->AUTOCOMMIT(pMySQLLexer)
 *  -  void      pMySQLLexer->AUTOEXTEND_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->AVG(pMySQLLexer)
 *  -  void      pMySQLLexer->AVG_ROW_LENGTH(pMySQLLexer)
 *  -  void      pMySQLLexer->BACKUP(pMySQLLexer)
 *  -  void      pMySQLLexer->BEFORE(pMySQLLexer)
 *  -  void      pMySQLLexer->BEGIN(pMySQLLexer)
 *  -  void      pMySQLLexer->BENCHMARK(pMySQLLexer)
 *  -  void      pMySQLLexer->BETWEEN(pMySQLLexer)
 *  -  void      pMySQLLexer->BIG5(pMySQLLexer)
 *  -  void      pMySQLLexer->BIGINT(pMySQLLexer)
 *  -  void      pMySQLLexer->BIN(pMySQLLexer)
 *  -  void      pMySQLLexer->BINARY(pMySQLLexer)
 *  -  void      pMySQLLexer->BINLOG(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT_AND(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT_LENGTH(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT_OR(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT_XOR(pMySQLLexer)
 *  -  void      pMySQLLexer->BLOB(pMySQLLexer)
 *  -  void      pMySQLLexer->BLOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->BOOL(pMySQLLexer)
 *  -  void      pMySQLLexer->BOOLEAN(pMySQLLexer)
 *  -  void      pMySQLLexer->BOTH(pMySQLLexer)
 *  -  void      pMySQLLexer->BTREE(pMySQLLexer)
 *  -  void      pMySQLLexer->BY(pMySQLLexer)
 *  -  void      pMySQLLexer->BYTE(pMySQLLexer)
 *  -  void      pMySQLLexer->CACHE(pMySQLLexer)
 *  -  void      pMySQLLexer->CALL(pMySQLLexer)
 *  -  void      pMySQLLexer->CASCADE(pMySQLLexer)
 *  -  void      pMySQLLexer->CASCADED(pMySQLLexer)
 *  -  void      pMySQLLexer->CASE(pMySQLLexer)
 *  -  void      pMySQLLexer->CAST(pMySQLLexer)
 *  -  void      pMySQLLexer->CEIL(pMySQLLexer)
 *  -  void      pMySQLLexer->CEILING(pMySQLLexer)
 *  -  void      pMySQLLexer->CHAIN(pMySQLLexer)
 *  -  void      pMySQLLexer->CHANGE(pMySQLLexer)
 *  -  void      pMySQLLexer->CHANGED(pMySQLLexer)
 *  -  void      pMySQLLexer->CHAR(pMySQLLexer)
 *  -  void      pMySQLLexer->CHAR_LENGTH(pMySQLLexer)
 *  -  void      pMySQLLexer->CHARACTER(pMySQLLexer)
 *  -  void      pMySQLLexer->CHARSET(pMySQLLexer)
 *  -  void      pMySQLLexer->CHECK(pMySQLLexer)
 *  -  void      pMySQLLexer->CHECKSUM(pMySQLLexer)
 *  -  void      pMySQLLexer->CIPHER(pMySQLLexer)
 *  -  void      pMySQLLexer->CLIENT(pMySQLLexer)
 *  -  void      pMySQLLexer->CLOSE(pMySQLLexer)
 *  -  void      pMySQLLexer->COALESCE(pMySQLLexer)
 *  -  void      pMySQLLexer->CODE(pMySQLLexer)
 *  -  void      pMySQLLexer->COERCIBILITY(pMySQLLexer)
 *  -  void      pMySQLLexer->COLLATE(pMySQLLexer)
 *  -  void      pMySQLLexer->COLLATION(pMySQLLexer)
 *  -  void      pMySQLLexer->COLUMN_FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->COLUMN(pMySQLLexer)
 *  -  void      pMySQLLexer->COLUMNS(pMySQLLexer)
 *  -  void      pMySQLLexer->COMMENT(pMySQLLexer)
 *  -  void      pMySQLLexer->COMMIT(pMySQLLexer)
 *  -  void      pMySQLLexer->COMMITTED(pMySQLLexer)
 *  -  void      pMySQLLexer->COMPACT(pMySQLLexer)
 *  -  void      pMySQLLexer->COMPLETION(pMySQLLexer)
 *  -  void      pMySQLLexer->COMPRESS(pMySQLLexer)
 *  -  void      pMySQLLexer->COMPRESSED(pMySQLLexer)
 *  -  void      pMySQLLexer->CONCAT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONCAT_WS(pMySQLLexer)
 *  -  void      pMySQLLexer->CONCURRENT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONDITION(pMySQLLexer)
 *  -  void      pMySQLLexer->CONNECTION_ID(pMySQLLexer)
 *  -  void      pMySQLLexer->CONNECTION(pMySQLLexer)
 *  -  void      pMySQLLexer->CONSISTENT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONSTRAINT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONTAINS(pMySQLLexer)
 *  -  void      pMySQLLexer->CONTEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONTINUE(pMySQLLexer)
 *  -  void      pMySQLLexer->CONTRIBUTORS(pMySQLLexer)
 *  -  void      pMySQLLexer->CONV(pMySQLLexer)
 *  -  void      pMySQLLexer->CONVERT(pMySQLLexer)
 *  -  void      pMySQLLexer->CONVERT_TZ(pMySQLLexer)
 *  -  void      pMySQLLexer->COPY(pMySQLLexer)
 *  -  void      pMySQLLexer->COS(pMySQLLexer)
 *  -  void      pMySQLLexer->COT(pMySQLLexer)
 *  -  void      pMySQLLexer->COUNT(pMySQLLexer)
 *  -  void      pMySQLLexer->CP1250(pMySQLLexer)
 *  -  void      pMySQLLexer->CP1251(pMySQLLexer)
 *  -  void      pMySQLLexer->CP1256(pMySQLLexer)
 *  -  void      pMySQLLexer->CP1257(pMySQLLexer)
 *  -  void      pMySQLLexer->CP850(pMySQLLexer)
 *  -  void      pMySQLLexer->CP852(pMySQLLexer)
 *  -  void      pMySQLLexer->CP866(pMySQLLexer)
 *  -  void      pMySQLLexer->CP932(pMySQLLexer)
 *  -  void      pMySQLLexer->CPU(pMySQLLexer)
 *  -  void      pMySQLLexer->CRC32(pMySQLLexer)
 *  -  void      pMySQLLexer->CREATE(pMySQLLexer)
 *  -  void      pMySQLLexer->CROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->CROSS(pMySQLLexer)
 *  -  void      pMySQLLexer->CUBE(pMySQLLexer)
 *  -  void      pMySQLLexer->CURDATE(pMySQLLexer)
 *  -  void      pMySQLLexer->CURRENT_TIMESTAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->CURRENT_USER(pMySQLLexer)
 *  -  void      pMySQLLexer->CURSOR(pMySQLLexer)
 *  -  void      pMySQLLexer->CURTIME(pMySQLLexer)
 *  -  void      pMySQLLexer->DATABASE(pMySQLLexer)
 *  -  void      pMySQLLexer->DATABASES(pMySQLLexer)
 *  -  void      pMySQLLexer->DATAFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->DATA(pMySQLLexer)
 *  -  void      pMySQLLexer->DATE_ADD(pMySQLLexer)
 *  -  void      pMySQLLexer->DATE_FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->DATE_SUB(pMySQLLexer)
 *  -  void      pMySQLLexer->DATE(pMySQLLexer)
 *  -  void      pMySQLLexer->DATEDIFF(pMySQLLexer)
 *  -  void      pMySQLLexer->DATETIME(pMySQLLexer)
 *  -  void      pMySQLLexer->DAY(pMySQLLexer)
 *  -  void      pMySQLLexer->DAY_HOUR(pMySQLLexer)
 *  -  void      pMySQLLexer->DAY_MICROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->DAY_MINUTE(pMySQLLexer)
 *  -  void      pMySQLLexer->DAY_SECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->DAYNAME(pMySQLLexer)
 *  -  void      pMySQLLexer->DAYOFMONTH(pMySQLLexer)
 *  -  void      pMySQLLexer->DAYOFWEEK(pMySQLLexer)
 *  -  void      pMySQLLexer->DAYOFYEAR(pMySQLLexer)
 *  -  void      pMySQLLexer->DEALLOCATE(pMySQLLexer)
 *  -  void      pMySQLLexer->DEC8(pMySQLLexer)
 *  -  void      pMySQLLexer->DECIMAL(pMySQLLexer)
 *  -  void      pMySQLLexer->DECLARE(pMySQLLexer)
 *  -  void      pMySQLLexer->DECODE(pMySQLLexer)
 *  -  void      pMySQLLexer->DEFAULT(pMySQLLexer)
 *  -  void      pMySQLLexer->DEFINER(pMySQLLexer)
 *  -  void      pMySQLLexer->DEGREES(pMySQLLexer)
 *  -  void      pMySQLLexer->DELAY_KEY_WRITE(pMySQLLexer)
 *  -  void      pMySQLLexer->DELAYED(pMySQLLexer)
 *  -  void      pMySQLLexer->DELETE_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->DES_DECRYPT(pMySQLLexer)
 *  -  void      pMySQLLexer->DES_ENCRYPT(pMySQLLexer)
 *  -  void      pMySQLLexer->DES_KEY_FILE(pMySQLLexer)
 *  -  void      pMySQLLexer->DESC(pMySQLLexer)
 *  -  void      pMySQLLexer->DESCRIBE(pMySQLLexer)
 *  -  void      pMySQLLexer->DETERMINISTIC(pMySQLLexer)
 *  -  void      pMySQLLexer->DIRECTORY(pMySQLLexer)
 *  -  void      pMySQLLexer->DISABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->DISCARD(pMySQLLexer)
 *  -  void      pMySQLLexer->DISK(pMySQLLexer)
 *  -  void      pMySQLLexer->DISTINCT(pMySQLLexer)
 *  -  void      pMySQLLexer->DISTINCTROW(pMySQLLexer)
 *  -  void      pMySQLLexer->DO(pMySQLLexer)
 *  -  void      pMySQLLexer->DOUBLE(pMySQLLexer)
 *  -  void      pMySQLLexer->DROP(pMySQLLexer)
 *  -  void      pMySQLLexer->DUAL(pMySQLLexer)
 *  -  void      pMySQLLexer->DUMPFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->DUPLICATE(pMySQLLexer)
 *  -  void      pMySQLLexer->DYNAMIC(pMySQLLexer)
 *  -  void      pMySQLLexer->EACH(pMySQLLexer)
 *  -  void      pMySQLLexer->ELSE(pMySQLLexer)
 *  -  void      pMySQLLexer->ELSIF(pMySQLLexer)
 *  -  void      pMySQLLexer->ELT(pMySQLLexer)
 *  -  void      pMySQLLexer->ENABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->ENCLOSED(pMySQLLexer)
 *  -  void      pMySQLLexer->ENCODE(pMySQLLexer)
 *  -  void      pMySQLLexer->ENCRYPT(pMySQLLexer)
 *  -  void      pMySQLLexer->END(pMySQLLexer)
 *  -  void      pMySQLLexer->ENDS(pMySQLLexer)
 *  -  void      pMySQLLexer->ENGINE(pMySQLLexer)
 *  -  void      pMySQLLexer->ENGINES(pMySQLLexer)
 *  -  void      pMySQLLexer->ENUM(pMySQLLexer)
 *  -  void      pMySQLLexer->ERRORS(pMySQLLexer)
 *  -  void      pMySQLLexer->ESCAPE(pMySQLLexer)
 *  -  void      pMySQLLexer->ESCAPED(pMySQLLexer)
 *  -  void      pMySQLLexer->EUCJPMS(pMySQLLexer)
 *  -  void      pMySQLLexer->EUCKR(pMySQLLexer)
 *  -  void      pMySQLLexer->EVENT(pMySQLLexer)
 *  -  void      pMySQLLexer->EVENTS(pMySQLLexer)
 *  -  void      pMySQLLexer->EVERY(pMySQLLexer)
 *  -  void      pMySQLLexer->EXCHANGE(pMySQLLexer)
 *  -  void      pMySQLLexer->EXECUTE(pMySQLLexer)
 *  -  void      pMySQLLexer->EXCLUSIVE(pMySQLLexer)
 *  -  void      pMySQLLexer->EXISTS(pMySQLLexer)
 *  -  void      pMySQLLexer->EXIT(pMySQLLexer)
 *  -  void      pMySQLLexer->EXP(pMySQLLexer)
 *  -  void      pMySQLLexer->EXPANSION(pMySQLLexer)
 *  -  void      pMySQLLexer->EXPLAIN(pMySQLLexer)
 *  -  void      pMySQLLexer->EXPORT_SET(pMySQLLexer)
 *  -  void      pMySQLLexer->EXTENDED(pMySQLLexer)
 *  -  void      pMySQLLexer->EXTENT_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->EXTRACT(pMySQLLexer)
 *  -  void      pMySQLLexer->FALSE(pMySQLLexer)
 *  -  void      pMySQLLexer->FAST(pMySQLLexer)
 *  -  void      pMySQLLexer->FAULTS(pMySQLLexer)
 *  -  void      pMySQLLexer->FIELDS(pMySQLLexer)
 *  -  void      pMySQLLexer->FETCH(pMySQLLexer)
 *  -  void      pMySQLLexer->FIELD(pMySQLLexer)
 *  -  void      pMySQLLexer->FILE(pMySQLLexer)
 *  -  void      pMySQLLexer->FIND_IN_SET(pMySQLLexer)
 *  -  void      pMySQLLexer->FIRST(pMySQLLexer)
 *  -  void      pMySQLLexer->FIXED(pMySQLLexer)
 *  -  void      pMySQLLexer->FLOAT(pMySQLLexer)
 *  -  void      pMySQLLexer->FLOOR(pMySQLLexer)
 *  -  void      pMySQLLexer->FLUSH(pMySQLLexer)
 *  -  void      pMySQLLexer->FOR(pMySQLLexer)
 *  -  void      pMySQLLexer->FORCE(pMySQLLexer)
 *  -  void      pMySQLLexer->FOREIGN(pMySQLLexer)
 *  -  void      pMySQLLexer->FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->FOUND_ROWS(pMySQLLexer)
 *  -  void      pMySQLLexer->FOUND(pMySQLLexer)
 *  -  void      pMySQLLexer->FROM(pMySQLLexer)
 *  -  void      pMySQLLexer->FROM_BASE64(pMySQLLexer)
 *  -  void      pMySQLLexer->FROM_DAYS(pMySQLLexer)
 *  -  void      pMySQLLexer->FROM_UNIXTIME(pMySQLLexer)
 *  -  void      pMySQLLexer->FULL(pMySQLLexer)
 *  -  void      pMySQLLexer->FULLTEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->FUNCTION(pMySQLLexer)
 *  -  void      pMySQLLexer->GB2312(pMySQLLexer)
 *  -  void      pMySQLLexer->GBK(pMySQLLexer)
 *  -  void      pMySQLLexer->GEOMETRY(pMySQLLexer)
 *  -  void      pMySQLLexer->GEOMETRYCOLLECTION(pMySQLLexer)
 *  -  void      pMySQLLexer->GEOSTD8(pMySQLLexer)
 *  -  void      pMySQLLexer->GET_FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->GET_LOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->GLOBAL(pMySQLLexer)
 *  -  void      pMySQLLexer->GRANT(pMySQLLexer)
 *  -  void      pMySQLLexer->GRANTS(pMySQLLexer)
 *  -  void      pMySQLLexer->GREEK(pMySQLLexer)
 *  -  void      pMySQLLexer->GROUP_CONCAT(pMySQLLexer)
 *  -  void      pMySQLLexer->GROUP(pMySQLLexer)
 *  -  void      pMySQLLexer->HANDLER(pMySQLLexer)
 *  -  void      pMySQLLexer->HASH(pMySQLLexer)
 *  -  void      pMySQLLexer->HAVING(pMySQLLexer)
 *  -  void      pMySQLLexer->HEBREW(pMySQLLexer)
 *  -  void      pMySQLLexer->HELP(pMySQLLexer)
 *  -  void      pMySQLLexer->HEX(pMySQLLexer)
 *  -  void      pMySQLLexer->HIGH_PRIORITY(pMySQLLexer)
 *  -  void      pMySQLLexer->HOST(pMySQLLexer)
 *  -  void      pMySQLLexer->HOSTS(pMySQLLexer)
 *  -  void      pMySQLLexer->HOUR(pMySQLLexer)
 *  -  void      pMySQLLexer->HOUR_MICROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->HOUR_MINUTE(pMySQLLexer)
 *  -  void      pMySQLLexer->HOUR_SECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->HP8(pMySQLLexer)
 *  -  void      pMySQLLexer->IDENTIFIED(pMySQLLexer)
 *  -  void      pMySQLLexer->IF(pMySQLLexer)
 *  -  void      pMySQLLexer->IFNULL(pMySQLLexer)
 *  -  void      pMySQLLexer->IGNORE(pMySQLLexer)
 *  -  void      pMySQLLexer->IMPORT(pMySQLLexer)
 *  -  void      pMySQLLexer->IN(pMySQLLexer)
 *  -  void      pMySQLLexer->INDEX_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->INDEXES(pMySQLLexer)
 *  -  void      pMySQLLexer->INET_ATON(pMySQLLexer)
 *  -  void      pMySQLLexer->INET_NTOA(pMySQLLexer)
 *  -  void      pMySQLLexer->INFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->INITIAL_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->INNER(pMySQLLexer)
 *  -  void      pMySQLLexer->INOUT(pMySQLLexer)
 *  -  void      pMySQLLexer->INPLACE(pMySQLLexer)
 *  -  void      pMySQLLexer->INSENSITIVE(pMySQLLexer)
 *  -  void      pMySQLLexer->INSERT(pMySQLLexer)
 *  -  void      pMySQLLexer->INSERT_METHOD(pMySQLLexer)
 *  -  void      pMySQLLexer->INSTALL(pMySQLLexer)
 *  -  void      pMySQLLexer->INSTR(pMySQLLexer)
 *  -  void      pMySQLLexer->INT(pMySQLLexer)
 *  -  void      pMySQLLexer->INTEGER(pMySQLLexer)
 *  -  void      pMySQLLexer->INTERVAL(pMySQLLexer)
 *  -  void      pMySQLLexer->INTO(pMySQLLexer)
 *  -  void      pMySQLLexer->INVOKER(pMySQLLexer)
 *  -  void      pMySQLLexer->IO(pMySQLLexer)
 *  -  void      pMySQLLexer->IPC(pMySQLLexer)
 *  -  void      pMySQLLexer->IS_FREE_LOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->IS(pMySQLLexer)
 *  -  void      pMySQLLexer->IS_USED_LOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->ISOLATION(pMySQLLexer)
 *  -  void      pMySQLLexer->ISSUER(pMySQLLexer)
 *  -  void      pMySQLLexer->ITERATE(pMySQLLexer)
 *  -  void      pMySQLLexer->JOIN(pMySQLLexer)
 *  -  void      pMySQLLexer->KEY_BLOCK_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->KEY(pMySQLLexer)
 *  -  void      pMySQLLexer->KEYBCS2(pMySQLLexer)
 *  -  void      pMySQLLexer->KEYS(pMySQLLexer)
 *  -  void      pMySQLLexer->KILL(pMySQLLexer)
 *  -  void      pMySQLLexer->KOI8R(pMySQLLexer)
 *  -  void      pMySQLLexer->KOI8U(pMySQLLexer)
 *  -  void      pMySQLLexer->LANGUAGE(pMySQLLexer)
 *  -  void      pMySQLLexer->LAST_DAY(pMySQLLexer)
 *  -  void      pMySQLLexer->LAST_INSERT_ID(pMySQLLexer)
 *  -  void      pMySQLLexer->LAST(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN1_BIN(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN1_GENERAL_CS(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN1(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN2(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN5(pMySQLLexer)
 *  -  void      pMySQLLexer->LATIN7(pMySQLLexer)
 *  -  void      pMySQLLexer->LEADING(pMySQLLexer)
 *  -  void      pMySQLLexer->LEAVE(pMySQLLexer)
 *  -  void      pMySQLLexer->LEAVES(pMySQLLexer)
 *  -  void      pMySQLLexer->LEFT(pMySQLLexer)
 *  -  void      pMySQLLexer->LENGTH(pMySQLLexer)
 *  -  void      pMySQLLexer->LESS(pMySQLLexer)
 *  -  void      pMySQLLexer->LEVEL(pMySQLLexer)
 *  -  void      pMySQLLexer->LIKE(pMySQLLexer)
 *  -  void      pMySQLLexer->LIMIT(pMySQLLexer)
 *  -  void      pMySQLLexer->LINEAR(pMySQLLexer)
 *  -  void      pMySQLLexer->LINES(pMySQLLexer)
 *  -  void      pMySQLLexer->LINESTRING(pMySQLLexer)
 *  -  void      pMySQLLexer->LIST(pMySQLLexer)
 *  -  void      pMySQLLexer->LN(pMySQLLexer)
 *  -  void      pMySQLLexer->LOAD(pMySQLLexer)
 *  -  void      pMySQLLexer->LOAD_FILE(pMySQLLexer)
 *  -  void      pMySQLLexer->LOCAL(pMySQLLexer)
 *  -  void      pMySQLLexer->LOCATE(pMySQLLexer)
 *  -  void      pMySQLLexer->LOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->LOCKS(pMySQLLexer)
 *  -  void      pMySQLLexer->LOG(pMySQLLexer)
 *  -  void      pMySQLLexer->LOG10(pMySQLLexer)
 *  -  void      pMySQLLexer->LOG2(pMySQLLexer)
 *  -  void      pMySQLLexer->LOGFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->LOGS(pMySQLLexer)
 *  -  void      pMySQLLexer->LONG(pMySQLLexer)
 *  -  void      pMySQLLexer->LONGBLOB(pMySQLLexer)
 *  -  void      pMySQLLexer->LONGTEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->LOOP(pMySQLLexer)
 *  -  void      pMySQLLexer->LOW_PRIORITY(pMySQLLexer)
 *  -  void      pMySQLLexer->LOWER(pMySQLLexer)
 *  -  void      pMySQLLexer->LPAD(pMySQLLexer)
 *  -  void      pMySQLLexer->LTRIM(pMySQLLexer)
 *  -  void      pMySQLLexer->MACCE(pMySQLLexer)
 *  -  void      pMySQLLexer->MACROMAN(pMySQLLexer)
 *  -  void      pMySQLLexer->MAKE_SET(pMySQLLexer)
 *  -  void      pMySQLLexer->MAKEDATE(pMySQLLexer)
 *  -  void      pMySQLLexer->MAKETIME(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_CONNECT_RETRY(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_HOST(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_LOG_FILE(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_LOG_POS(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_PASSWORD(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_PORT(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_POS_WAIT(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SERVER_ID(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_CA(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_CAPATH(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_CERT(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_CIPHER(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_KEY(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_SSL_VERIFY_SERVER_CERT(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER(pMySQLLexer)
 *  -  void      pMySQLLexer->MASTER_USER(pMySQLLexer)
 *  -  void      pMySQLLexer->MATCH(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_CONNECTIONS_PER_HOUR(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_QUERIES_PER_HOUR(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_ROWS(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_UPDATES_PER_HOUR(pMySQLLexer)
 *  -  void      pMySQLLexer->MAX_USER_CONNECTIONS(pMySQLLexer)
 *  -  void      pMySQLLexer->MAXVALUE(pMySQLLexer)
 *  -  void      pMySQLLexer->MD5(pMySQLLexer)
 *  -  void      pMySQLLexer->MEDIUM(pMySQLLexer)
 *  -  void      pMySQLLexer->MEDIUMBLOB(pMySQLLexer)
 *  -  void      pMySQLLexer->MEDIUMINT(pMySQLLexer)
 *  -  void      pMySQLLexer->MEDIUMTEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->MEMORY(pMySQLLexer)
 *  -  void      pMySQLLexer->MERGE(pMySQLLexer)
 *  -  void      pMySQLLexer->MICROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->MID(pMySQLLexer)
 *  -  void      pMySQLLexer->MIGRATE(pMySQLLexer)
 *  -  void      pMySQLLexer->MIN_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->MIN_ROWS(pMySQLLexer)
 *  -  void      pMySQLLexer->MINUTE(pMySQLLexer)
 *  -  void      pMySQLLexer->MINUTE_MICROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->MINUTE_SECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->MOD(pMySQLLexer)
 *  -  void      pMySQLLexer->MODE(pMySQLLexer)
 *  -  void      pMySQLLexer->MODIFIES(pMySQLLexer)
 *  -  void      pMySQLLexer->MODIFY(pMySQLLexer)
 *  -  void      pMySQLLexer->MONTH(pMySQLLexer)
 *  -  void      pMySQLLexer->MONTHNAME(pMySQLLexer)
 *  -  void      pMySQLLexer->MULTILINESTRING(pMySQLLexer)
 *  -  void      pMySQLLexer->MULTIPOINT(pMySQLLexer)
 *  -  void      pMySQLLexer->MULTIPOLYGON(pMySQLLexer)
 *  -  void      pMySQLLexer->MUTEX(pMySQLLexer)
 *  -  void      pMySQLLexer->NAME_CONST(pMySQLLexer)
 *  -  void      pMySQLLexer->NAME(pMySQLLexer)
 *  -  void      pMySQLLexer->NAMES(pMySQLLexer)
 *  -  void      pMySQLLexer->NATIONAL(pMySQLLexer)
 *  -  void      pMySQLLexer->NATURAL(pMySQLLexer)
 *  -  void      pMySQLLexer->NCHAR(pMySQLLexer)
 *  -  void      pMySQLLexer->NEW(pMySQLLexer)
 *  -  void      pMySQLLexer->NEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->NO(pMySQLLexer)
 *  -  void      pMySQLLexer->NO_WAIT(pMySQLLexer)
 *  -  void      pMySQLLexer->NO_WRITE_TO_BINLOG(pMySQLLexer)
 *  -  void      pMySQLLexer->NODEGROUP(pMySQLLexer)
 *  -  void      pMySQLLexer->NONE(pMySQLLexer)
 *  -  void      pMySQLLexer->NOT(pMySQLLexer)
 *  -  void      pMySQLLexer->NOW(pMySQLLexer)
 *  -  void      pMySQLLexer->NULL_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->NUMERIC(pMySQLLexer)
 *  -  void      pMySQLLexer->NVARCHAR(pMySQLLexer)
 *  -  void      pMySQLLexer->OCT(pMySQLLexer)
 *  -  void      pMySQLLexer->OFFSET(pMySQLLexer)
 *  -  void      pMySQLLexer->OJ(pMySQLLexer)
 *  -  void      pMySQLLexer->OLD_PASSWORD(pMySQLLexer)
 *  -  void      pMySQLLexer->ON(pMySQLLexer)
 *  -  void      pMySQLLexer->ONE_SHOT(pMySQLLexer)
 *  -  void      pMySQLLexer->ONE(pMySQLLexer)
 *  -  void      pMySQLLexer->ONLY(pMySQLLexer)
 *  -  void      pMySQLLexer->OPEN(pMySQLLexer)
 *  -  void      pMySQLLexer->OPTIMIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->OPTION(pMySQLLexer)
 *  -  void      pMySQLLexer->OPTIONALLY(pMySQLLexer)
 *  -  void      pMySQLLexer->OPTIONS(pMySQLLexer)
 *  -  void      pMySQLLexer->OR_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->ORD(pMySQLLexer)
 *  -  void      pMySQLLexer->ORDER(pMySQLLexer)
 *  -  void      pMySQLLexer->OUT(pMySQLLexer)
 *  -  void      pMySQLLexer->OUTER(pMySQLLexer)
 *  -  void      pMySQLLexer->OUTFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->OWNER(pMySQLLexer)
 *  -  void      pMySQLLexer->PACK_KEYS(pMySQLLexer)
 *  -  void      pMySQLLexer->PAGE_CHECKSUM(pMySQLLexer)
 *  -  void      pMySQLLexer->PAGE(pMySQLLexer)
 *  -  void      pMySQLLexer->PARSER(pMySQLLexer)
 *  -  void      pMySQLLexer->PARTIAL(pMySQLLexer)
 *  -  void      pMySQLLexer->PARTITION(pMySQLLexer)
 *  -  void      pMySQLLexer->PARTITIONING(pMySQLLexer)
 *  -  void      pMySQLLexer->PARTITIONS(pMySQLLexer)
 *  -  void      pMySQLLexer->PASSWORD(pMySQLLexer)
 *  -  void      pMySQLLexer->PERIOD_ADD(pMySQLLexer)
 *  -  void      pMySQLLexer->PERIOD_DIFF(pMySQLLexer)
 *  -  void      pMySQLLexer->PHASE(pMySQLLexer)
 *  -  void      pMySQLLexer->PI(pMySQLLexer)
 *  -  void      pMySQLLexer->PLUGIN(pMySQLLexer)
 *  -  void      pMySQLLexer->PLUGINS(pMySQLLexer)
 *  -  void      pMySQLLexer->POINT(pMySQLLexer)
 *  -  void      pMySQLLexer->POLYGON(pMySQLLexer)
 *  -  void      pMySQLLexer->PORT(pMySQLLexer)
 *  -  void      pMySQLLexer->POW(pMySQLLexer)
 *  -  void      pMySQLLexer->POWER(pMySQLLexer)
 *  -  void      pMySQLLexer->PRECISION(pMySQLLexer)
 *  -  void      pMySQLLexer->PREPARE(pMySQLLexer)
 *  -  void      pMySQLLexer->PRESERVE(pMySQLLexer)
 *  -  void      pMySQLLexer->PREV(pMySQLLexer)
 *  -  void      pMySQLLexer->PRIMARY(pMySQLLexer)
 *  -  void      pMySQLLexer->PRIVILEGES(pMySQLLexer)
 *  -  void      pMySQLLexer->PROCEDURE(pMySQLLexer)
 *  -  void      pMySQLLexer->PROCESS(pMySQLLexer)
 *  -  void      pMySQLLexer->PROCESSLIST(pMySQLLexer)
 *  -  void      pMySQLLexer->PROFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->PROFILES(pMySQLLexer)
 *  -  void      pMySQLLexer->PURGE(pMySQLLexer)
 *  -  void      pMySQLLexer->QUARTER(pMySQLLexer)
 *  -  void      pMySQLLexer->QUERY_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->QUICK(pMySQLLexer)
 *  -  void      pMySQLLexer->QUOTE(pMySQLLexer)
 *  -  void      pMySQLLexer->RADIANS(pMySQLLexer)
 *  -  void      pMySQLLexer->RAND(pMySQLLexer)
 *  -  void      pMySQLLexer->RANGE(pMySQLLexer)
 *  -  void      pMySQLLexer->READ_ONLY(pMySQLLexer)
 *  -  void      pMySQLLexer->READ(pMySQLLexer)
 *  -  void      pMySQLLexer->READ_WRITE(pMySQLLexer)
 *  -  void      pMySQLLexer->READS(pMySQLLexer)
 *  -  void      pMySQLLexer->REAL(pMySQLLexer)
 *  -  void      pMySQLLexer->REBUILD(pMySQLLexer)
 *  -  void      pMySQLLexer->RECOVER(pMySQLLexer)
 *  -  void      pMySQLLexer->REDO_BUFFER_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->REDOFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->REDUNDANT(pMySQLLexer)
 *  -  void      pMySQLLexer->REFERENCES(pMySQLLexer)
 *  -  void      pMySQLLexer->REGEXP(pMySQLLexer)
 *  -  void      pMySQLLexer->RELAYLOG(pMySQLLexer)
 *  -  void      pMySQLLexer->RELAY_LOG_FILE(pMySQLLexer)
 *  -  void      pMySQLLexer->RELAY_LOG_POS(pMySQLLexer)
 *  -  void      pMySQLLexer->RELEASE_LOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->RELEASE(pMySQLLexer)
 *  -  void      pMySQLLexer->RELOAD(pMySQLLexer)
 *  -  void      pMySQLLexer->REMOVE(pMySQLLexer)
 *  -  void      pMySQLLexer->RENAME(pMySQLLexer)
 *  -  void      pMySQLLexer->REORGANIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->REPAIR(pMySQLLexer)
 *  -  void      pMySQLLexer->REPEAT(pMySQLLexer)
 *  -  void      pMySQLLexer->REPEATABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->REPLACE(pMySQLLexer)
 *  -  void      pMySQLLexer->REPLICATION(pMySQLLexer)
 *  -  void      pMySQLLexer->REQUIRE(pMySQLLexer)
 *  -  void      pMySQLLexer->RESET(pMySQLLexer)
 *  -  void      pMySQLLexer->RESOURCES(pMySQLLexer)
 *  -  void      pMySQLLexer->RESTORE(pMySQLLexer)
 *  -  void      pMySQLLexer->RESTRICT(pMySQLLexer)
 *  -  void      pMySQLLexer->RESUME(pMySQLLexer)
 *  -  void      pMySQLLexer->RETURN(pMySQLLexer)
 *  -  void      pMySQLLexer->RETURNS(pMySQLLexer)
 *  -  void      pMySQLLexer->REVERSE(pMySQLLexer)
 *  -  void      pMySQLLexer->REVOKE(pMySQLLexer)
 *  -  void      pMySQLLexer->RIGHT(pMySQLLexer)
 *  -  void      pMySQLLexer->ROLLBACK(pMySQLLexer)
 *  -  void      pMySQLLexer->ROLLUP(pMySQLLexer)
 *  -  void      pMySQLLexer->ROUND(pMySQLLexer)
 *  -  void      pMySQLLexer->ROUTINE(pMySQLLexer)
 *  -  void      pMySQLLexer->ROW_FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->ROW(pMySQLLexer)
 *  -  void      pMySQLLexer->ROWS(pMySQLLexer)
 *  -  void      pMySQLLexer->RPAD(pMySQLLexer)
 *  -  void      pMySQLLexer->RTREE(pMySQLLexer)
 *  -  void      pMySQLLexer->RTRIM(pMySQLLexer)
 *  -  void      pMySQLLexer->SAVEPOINT(pMySQLLexer)
 *  -  void      pMySQLLexer->SCHEDULE(pMySQLLexer)
 *  -  void      pMySQLLexer->SCHEMA(pMySQLLexer)
 *  -  void      pMySQLLexer->SCHEMAS(pMySQLLexer)
 *  -  void      pMySQLLexer->SEC_TO_TIME(pMySQLLexer)
 *  -  void      pMySQLLexer->SECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->SECOND_MICROSECOND(pMySQLLexer)
 *  -  void      pMySQLLexer->SECURITY(pMySQLLexer)
 *  -  void      pMySQLLexer->SELECT(pMySQLLexer)
 *  -  void      pMySQLLexer->SENSITIVE(pMySQLLexer)
 *  -  void      pMySQLLexer->SEPARATOR(pMySQLLexer)
 *  -  void      pMySQLLexer->SERIAL(pMySQLLexer)
 *  -  void      pMySQLLexer->SERIALIZABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->SERVER(pMySQLLexer)
 *  -  void      pMySQLLexer->SESSION(pMySQLLexer)
 *  -  void      pMySQLLexer->SESSION_USER(pMySQLLexer)
 *  -  void      pMySQLLexer->SET(pMySQLLexer)
 *  -  void      pMySQLLexer->SHARED(pMySQLLexer)
 *  -  void      pMySQLLexer->SHARE(pMySQLLexer)
 *  -  void      pMySQLLexer->SHOW(pMySQLLexer)
 *  -  void      pMySQLLexer->SHUTDOWN(pMySQLLexer)
 *  -  void      pMySQLLexer->SIGN(pMySQLLexer)
 *  -  void      pMySQLLexer->SIGNED(pMySQLLexer)
 *  -  void      pMySQLLexer->SIMPLE(pMySQLLexer)
 *  -  void      pMySQLLexer->SIN(pMySQLLexer)
 *  -  void      pMySQLLexer->SJIS(pMySQLLexer)
 *  -  void      pMySQLLexer->SLAVE(pMySQLLexer)
 *  -  void      pMySQLLexer->SLEEP(pMySQLLexer)
 *  -  void      pMySQLLexer->SMALLINT(pMySQLLexer)
 *  -  void      pMySQLLexer->SNAPSHOT(pMySQLLexer)
 *  -  void      pMySQLLexer->SOCKET(pMySQLLexer)
 *  -  void      pMySQLLexer->SONAME(pMySQLLexer)
 *  -  void      pMySQLLexer->SOUNDEX(pMySQLLexer)
 *  -  void      pMySQLLexer->SOUNDS(pMySQLLexer)
 *  -  void      pMySQLLexer->SOURCE(pMySQLLexer)
 *  -  void      pMySQLLexer->SPACE(pMySQLLexer)
 *  -  void      pMySQLLexer->SPATIAL(pMySQLLexer)
 *  -  void      pMySQLLexer->SPECIFIC(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_BIG_RESULT(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_BUFFER_RESULT(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_CACHE(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_CALC_FOUND_ROWS(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_NO_CACHE(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_SMALL_RESULT(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL(pMySQLLexer)
 *  -  void      pMySQLLexer->SQL_THREAD(pMySQLLexer)
 *  -  void      pMySQLLexer->SQLEXCEPTION(pMySQLLexer)
 *  -  void      pMySQLLexer->SQLSTATE(pMySQLLexer)
 *  -  void      pMySQLLexer->SQLWARNING(pMySQLLexer)
 *  -  void      pMySQLLexer->SQRT(pMySQLLexer)
 *  -  void      pMySQLLexer->SSL(pMySQLLexer)
 *  -  void      pMySQLLexer->START(pMySQLLexer)
 *  -  void      pMySQLLexer->STARTING(pMySQLLexer)
 *  -  void      pMySQLLexer->STATS_AUTO_RECALC(pMySQLLexer)
 *  -  void      pMySQLLexer->STATS_PERSISTENT(pMySQLLexer)
 *  -  void      pMySQLLexer->STARTS(pMySQLLexer)
 *  -  void      pMySQLLexer->STATUS_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->STD(pMySQLLexer)
 *  -  void      pMySQLLexer->STDDEV(pMySQLLexer)
 *  -  void      pMySQLLexer->STDDEV_POP(pMySQLLexer)
 *  -  void      pMySQLLexer->STDDEV_SAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->STOP(pMySQLLexer)
 *  -  void      pMySQLLexer->STORAGE(pMySQLLexer)
 *  -  void      pMySQLLexer->STR_TO_DATE(pMySQLLexer)
 *  -  void      pMySQLLexer->STRAIGHT_JOIN(pMySQLLexer)
 *  -  void      pMySQLLexer->STRCMP(pMySQLLexer)
 *  -  void      pMySQLLexer->STRING(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBJECT(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBPARTITION(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBPARTITIONS(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBSTRING(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBSTRING_INDEX(pMySQLLexer)
 *  -  void      pMySQLLexer->SUBTIME(pMySQLLexer)
 *  -  void      pMySQLLexer->SUM(pMySQLLexer)
 *  -  void      pMySQLLexer->SUPER(pMySQLLexer)
 *  -  void      pMySQLLexer->SUSPEND(pMySQLLexer)
 *  -  void      pMySQLLexer->SWAPS(pMySQLLexer)
 *  -  void      pMySQLLexer->SWE7(pMySQLLexer)
 *  -  void      pMySQLLexer->SWITCHES(pMySQLLexer)
 *  -  void      pMySQLLexer->SYSDATE(pMySQLLexer)
 *  -  void      pMySQLLexer->SYSTEM_USER(pMySQLLexer)
 *  -  void      pMySQLLexer->TABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->TABLE_CHECKSUM(pMySQLLexer)
 *  -  void      pMySQLLexer->TABLES(pMySQLLexer)
 *  -  void      pMySQLLexer->TABLESPACE(pMySQLLexer)
 *  -  void      pMySQLLexer->TAN(pMySQLLexer)
 *  -  void      pMySQLLexer->TEMPORARY(pMySQLLexer)
 *  -  void      pMySQLLexer->TEMPTABLE(pMySQLLexer)
 *  -  void      pMySQLLexer->TERMINATED(pMySQLLexer)
 *  -  void      pMySQLLexer->TEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->THAN(pMySQLLexer)
 *  -  void      pMySQLLexer->THEN(pMySQLLexer)
 *  -  void      pMySQLLexer->TIME_FORMAT(pMySQLLexer)
 *  -  void      pMySQLLexer->TIME(pMySQLLexer)
 *  -  void      pMySQLLexer->TIME_TO_SEC(pMySQLLexer)
 *  -  void      pMySQLLexer->TIMEDIFF(pMySQLLexer)
 *  -  void      pMySQLLexer->TIMESTAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->TIMESTAMPADD(pMySQLLexer)
 *  -  void      pMySQLLexer->TIMESTAMPDIFF(pMySQLLexer)
 *  -  void      pMySQLLexer->TINYBLOB(pMySQLLexer)
 *  -  void      pMySQLLexer->TINYINT(pMySQLLexer)
 *  -  void      pMySQLLexer->TINYTEXT(pMySQLLexer)
 *  -  void      pMySQLLexer->TIS620(pMySQLLexer)
 *  -  void      pMySQLLexer->TO_BASE64(pMySQLLexer)
 *  -  void      pMySQLLexer->TO_DAYS(pMySQLLexer)
 *  -  void      pMySQLLexer->TO_SECONDS(pMySQLLexer)
 *  -  void      pMySQLLexer->TO(pMySQLLexer)
 *  -  void      pMySQLLexer->TRAILING(pMySQLLexer)
 *  -  void      pMySQLLexer->TRANSACTION(pMySQLLexer)
 *  -  void      pMySQLLexer->TRANSACTIONAL(pMySQLLexer)
 *  -  void      pMySQLLexer->TRIGGER(pMySQLLexer)
 *  -  void      pMySQLLexer->TRIGGERS(pMySQLLexer)
 *  -  void      pMySQLLexer->TRIM(pMySQLLexer)
 *  -  void      pMySQLLexer->TRUE(pMySQLLexer)
 *  -  void      pMySQLLexer->TRUNCATE(pMySQLLexer)
 *  -  void      pMySQLLexer->TYPE(pMySQLLexer)
 *  -  void      pMySQLLexer->TYPES(pMySQLLexer)
 *  -  void      pMySQLLexer->UCS2(pMySQLLexer)
 *  -  void      pMySQLLexer->UJIS(pMySQLLexer)
 *  -  void      pMySQLLexer->UNCOMMITTED(pMySQLLexer)
 *  -  void      pMySQLLexer->UNCOMPRESS(pMySQLLexer)
 *  -  void      pMySQLLexer->UNCOMPRESSED_LENGTH(pMySQLLexer)
 *  -  void      pMySQLLexer->UNDEFINED(pMySQLLexer)
 *  -  void      pMySQLLexer->UNDO_BUFFER_SIZE(pMySQLLexer)
 *  -  void      pMySQLLexer->UNDO(pMySQLLexer)
 *  -  void      pMySQLLexer->UNDOFILE(pMySQLLexer)
 *  -  void      pMySQLLexer->UNHEX(pMySQLLexer)
 *  -  void      pMySQLLexer->UNICODE(pMySQLLexer)
 *  -  void      pMySQLLexer->UNINSTALL(pMySQLLexer)
 *  -  void      pMySQLLexer->UNION(pMySQLLexer)
 *  -  void      pMySQLLexer->UNIQUE(pMySQLLexer)
 *  -  void      pMySQLLexer->UNIX_TIMESTAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->UNKNOWN(pMySQLLexer)
 *  -  void      pMySQLLexer->UNLOCK(pMySQLLexer)
 *  -  void      pMySQLLexer->UNSIGNED(pMySQLLexer)
 *  -  void      pMySQLLexer->UNTIL(pMySQLLexer)
 *  -  void      pMySQLLexer->UPDATE(pMySQLLexer)
 *  -  void      pMySQLLexer->UPGRADE(pMySQLLexer)
 *  -  void      pMySQLLexer->UPPER(pMySQLLexer)
 *  -  void      pMySQLLexer->USAGE(pMySQLLexer)
 *  -  void      pMySQLLexer->USE_FRM(pMySQLLexer)
 *  -  void      pMySQLLexer->USE(pMySQLLexer)
 *  -  void      pMySQLLexer->USER(pMySQLLexer)
 *  -  void      pMySQLLexer->USING(pMySQLLexer)
 *  -  void      pMySQLLexer->UTC_DATE(pMySQLLexer)
 *  -  void      pMySQLLexer->UTC_TIME(pMySQLLexer)
 *  -  void      pMySQLLexer->UTC_TIMESTAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->UTF16LE(pMySQLLexer)
 *  -  void      pMySQLLexer->UTF16(pMySQLLexer)
 *  -  void      pMySQLLexer->UTF32(pMySQLLexer)
 *  -  void      pMySQLLexer->UTF8(pMySQLLexer)
 *  -  void      pMySQLLexer->UUID(pMySQLLexer)
 *  -  void      pMySQLLexer->VALUE(pMySQLLexer)
 *  -  void      pMySQLLexer->VALUES(pMySQLLexer)
 *  -  void      pMySQLLexer->VAR_POP(pMySQLLexer)
 *  -  void      pMySQLLexer->VAR_SAMP(pMySQLLexer)
 *  -  void      pMySQLLexer->VARBINARY(pMySQLLexer)
 *  -  void      pMySQLLexer->VARCHAR(pMySQLLexer)
 *  -  void      pMySQLLexer->VARIABLES(pMySQLLexer)
 *  -  void      pMySQLLexer->VARIANCE(pMySQLLexer)
 *  -  void      pMySQLLexer->VARYING(pMySQLLexer)
 *  -  void      pMySQLLexer->VERSION_SYM(pMySQLLexer)
 *  -  void      pMySQLLexer->VIEW(pMySQLLexer)
 *  -  void      pMySQLLexer->WAIT(pMySQLLexer)
 *  -  void      pMySQLLexer->WARNINGS(pMySQLLexer)
 *  -  void      pMySQLLexer->WEEK(pMySQLLexer)
 *  -  void      pMySQLLexer->WEEKDAY(pMySQLLexer)
 *  -  void      pMySQLLexer->WEEKOFYEAR(pMySQLLexer)
 *  -  void      pMySQLLexer->WEIGHT_STRING(pMySQLLexer)
 *  -  void      pMySQLLexer->WHEN(pMySQLLexer)
 *  -  void      pMySQLLexer->WHERE(pMySQLLexer)
 *  -  void      pMySQLLexer->WHILE(pMySQLLexer)
 *  -  void      pMySQLLexer->WITH(pMySQLLexer)
 *  -  void      pMySQLLexer->WORK(pMySQLLexer)
 *  -  void      pMySQLLexer->WRAPPER(pMySQLLexer)
 *  -  void      pMySQLLexer->WRITE(pMySQLLexer)
 *  -  void      pMySQLLexer->X509(pMySQLLexer)
 *  -  void      pMySQLLexer->XA(pMySQLLexer)
 *  -  void      pMySQLLexer->XML(pMySQLLexer)
 *  -  void      pMySQLLexer->XOR(pMySQLLexer)
 *  -  void      pMySQLLexer->YEAR(pMySQLLexer)
 *  -  void      pMySQLLexer->YEAR_MONTH(pMySQLLexer)
 *  -  void      pMySQLLexer->YEARWEEK(pMySQLLexer)
 *  -  void      pMySQLLexer->ZEROFILL(pMySQLLexer)
 *  -  void      pMySQLLexer->DIVIDE_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->MOD_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->OR_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->AND_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->ARROW(pMySQLLexer)
 *  -  void      pMySQLLexer->EQ(pMySQLLexer)
 *  -  void      pMySQLLexer->NOT_EQ(pMySQLLexer)
 *  -  void      pMySQLLexer->LET(pMySQLLexer)
 *  -  void      pMySQLLexer->GET(pMySQLLexer)
 *  -  void      pMySQLLexer->SET_VAR(pMySQLLexer)
 *  -  void      pMySQLLexer->SHIFT_LEFT(pMySQLLexer)
 *  -  void      pMySQLLexer->SHIFT_RIGHT(pMySQLLexer)
 *  -  void      pMySQLLexer->ALL_FIELDS(pMySQLLexer)
 *  -  void      pMySQLLexer->SEMI(pMySQLLexer)
 *  -  void      pMySQLLexer->COLON(pMySQLLexer)
 *  -  void      pMySQLLexer->DOT(pMySQLLexer)
 *  -  void      pMySQLLexer->COMMA(pMySQLLexer)
 *  -  void      pMySQLLexer->ASTERISK(pMySQLLexer)
 *  -  void      pMySQLLexer->RPAREN(pMySQLLexer)
 *  -  void      pMySQLLexer->LPAREN(pMySQLLexer)
 *  -  void      pMySQLLexer->RBRACK(pMySQLLexer)
 *  -  void      pMySQLLexer->LBRACK(pMySQLLexer)
 *  -  void      pMySQLLexer->PLUS_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->MINUS_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->NEGATION(pMySQLLexer)
 *  -  void      pMySQLLexer->VERTBAR(pMySQLLexer)
 *  -  void      pMySQLLexer->BITAND(pMySQLLexer)
 *  -  void      pMySQLLexer->POWER_OP(pMySQLLexer)
 *  -  void      pMySQLLexer->GTH(pMySQLLexer)
 *  -  void      pMySQLLexer->LTH(pMySQLLexer)
 *  -  void      pMySQLLexer->SINGLE_QUOTE(pMySQLLexer)
 *  -  void      pMySQLLexer->DOUBLE_QUOTE(pMySQLLexer)
 *  -  void      pMySQLLexer->BACKSLASH(pMySQLLexer)
 *  -  void      pMySQLLexer->INTEGER_NUM(pMySQLLexer)
 *  -  void      pMySQLLexer->HEX_DIGIT_FRAGMENT(pMySQLLexer)
 *  -  void      pMySQLLexer->HEX_DIGIT(pMySQLLexer)
 *  -  void      pMySQLLexer->BIT_NUM(pMySQLLexer)
 *  -  void      pMySQLLexer->REAL_NUMBER(pMySQLLexer)
 *  -  void      pMySQLLexer->TEXT_STRING(pMySQLLexer)
 *  -  void      pMySQLLexer->ID(pMySQLLexer)
 *  -  void      pMySQLLexer->USER_VAR(pMySQLLexer)
 *  -  void      pMySQLLexer->USER_VAR_SUBFIX1(pMySQLLexer)
 *  -  void      pMySQLLexer->USER_VAR_SUBFIX2(pMySQLLexer)
 *  -  void      pMySQLLexer->USER_VAR_SUBFIX3(pMySQLLexer)
 *  -  void      pMySQLLexer->USER_VAR_SUBFIX4(pMySQLLexer)
 *  -  void      pMySQLLexer->SYS_VAR_PREFIX(pMySQLLexer)
 *  -  void      pMySQLLexer->SYS_VAR_ID(pMySQLLexer)
 *  -  void      pMySQLLexer->WHITE_SPACE(pMySQLLexer)
 *  -  void      pMySQLLexer->SL_COMMENT(pMySQLLexer)
 *  -  void      pMySQLLexer->ML_COMMENT(pMySQLLexer)
 *  -  void      pMySQLLexer->Tokens(pMySQLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLLexer_H
#define _MySQLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLLexer_Ctx_struct MySQLLexer, * pMySQLLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for MySQLLexer
 */
struct MySQLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mA_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mB_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mC_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mD_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mE_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mF_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mG_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mH_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mI_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mJ_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mK_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mL_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mM_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mN_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mO_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mP_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mQ_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mR_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mS_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mT_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mU_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mV_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mW_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mX_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mY_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mZ_)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mABS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mACCESSIBLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mACOS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mACTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mADD_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mADDDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mADDTIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAES_DECRYPT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAES_ENCRYPT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAFTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAGAINST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAGGREGATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mALGORITHM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mALL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mALTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mANALYZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAND_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mANY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mARMSCII8)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mASC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mASCII)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mASENSITIVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mASIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mATAN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mATAN2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAUTHORS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAUTO_INCREMENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAUTOCOMMIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAUTOEXTEND_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAVG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAVG_ROW_LENGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBACKUP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBEFORE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBEGIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBENCHMARK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBETWEEN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIG5)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIGINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBINARY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBINLOG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT_AND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT_LENGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT_OR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT_XOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBLOB)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBLOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBOOL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBOOLEAN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBOTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBTREE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBYTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCACHE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCALL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCASCADE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCASCADED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCASE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCAST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCEIL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCEILING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHAIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHANGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHANGED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHAR_LENGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHARACTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHARSET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHECK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCHECKSUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCIPHER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCLIENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCLOSE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOALESCE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCODE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOERCIBILITY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLLATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLLATION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLUMN_FORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLUMN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLUMNS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMMIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMMITTED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMPACT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMPLETION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMPRESS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMPRESSED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONCAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONCAT_WS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONCURRENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONDITION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONNECTION_ID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONNECTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONSISTENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONSTRAINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONTAINS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONTINUE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONTRIBUTORS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONV)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONVERT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCONVERT_TZ)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOPY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOUNT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP1250)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP1251)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP1256)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP1257)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP850)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP852)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP866)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCP932)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCPU)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCRC32)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCREATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCROSS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCUBE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCURDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCURRENT_TIMESTAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCURRENT_USER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCURSOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCURTIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATABASE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATABASES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATAFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATE_ADD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATE_FORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATE_SUB)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATEDIFF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDATETIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAY_HOUR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAY_MICROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAY_MINUTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAY_SECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAYNAME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAYOFMONTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAYOFWEEK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDAYOFYEAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDEALLOCATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDEC8)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDECIMAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDECLARE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDECODE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDEFAULT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDEFINER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDEGREES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDELAY_KEY_WRITE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDELAYED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDELETE_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDES_DECRYPT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDES_ENCRYPT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDES_KEY_FILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDESC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDESCRIBE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDETERMINISTIC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDIRECTORY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDISABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDISCARD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDISK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDISTINCT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDISTINCTROW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDOUBLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDROP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDUAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDUMPFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDUPLICATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDYNAMIC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEACH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mELSE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mELSIF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mELT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENCLOSED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENCODE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENCRYPT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENDS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENGINE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENGINES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mENUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mERRORS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mESCAPE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mESCAPED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEUCJPMS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEUCKR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEVENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEVENTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEVERY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXCHANGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXECUTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXCLUSIVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXISTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXPANSION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXPLAIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXPORT_SET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXTENDED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXTENT_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEXTRACT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFALSE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFAST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFAULTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFIELDS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFETCH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFIELD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFIND_IN_SET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFIRST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFIXED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFLOAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFLOOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFLUSH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFORCE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFOREIGN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFOUND_ROWS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFOUND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFROM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFROM_BASE64)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFROM_DAYS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFROM_UNIXTIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFULL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFULLTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mFUNCTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGB2312)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGBK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGEOMETRY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGEOMETRYCOLLECTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGEOSTD8)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGET_FORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGET_LOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGLOBAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGRANT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGRANTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGREEK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGROUP_CONCAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGROUP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHANDLER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHASH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHAVING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHEBREW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHELP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHEX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHIGH_PRIORITY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOSTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOUR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOUR_MICROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOUR_MINUTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHOUR_SECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHP8)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIDENTIFIED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIFNULL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIGNORE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIMPORT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINDEX_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINDEXES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINET_ATON)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINET_NTOA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINITIAL_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINNER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINOUT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINPLACE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINSENSITIVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINSERT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINSERT_METHOD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINSTALL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINSTR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINTEGER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINTERVAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINTO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINVOKER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIPC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIS_FREE_LOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mIS_USED_LOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mISOLATION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mISSUER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mITERATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mJOIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKEY_BLOCK_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKEY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKEYBCS2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKEYS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKILL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKOI8R)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mKOI8U)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLANGUAGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLAST_DAY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLAST_INSERT_ID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLAST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN1_BIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN1_GENERAL_CS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN1)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN5)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLATIN7)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLEADING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLEAVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLEAVES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLEFT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLENGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLESS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLEVEL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLIKE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLIMIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLINEAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLINES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLINESTRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLIST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOAD_FILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOCAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOCATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOCKS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOG10)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOG2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOGFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOGS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLONG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLONGBLOB)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLONGTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOOP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOW_PRIORITY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLOWER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLPAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLTRIM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMACCE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMACROMAN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAKE_SET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAKEDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAKETIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_CONNECT_RETRY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_HOST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_LOG_FILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_LOG_POS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_PASSWORD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_PORT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_POS_WAIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SERVER_ID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_CA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_CAPATH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_CERT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_CIPHER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_KEY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_SSL_VERIFY_SERVER_CERT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMASTER_USER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMATCH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_CONNECTIONS_PER_HOUR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_QUERIES_PER_HOUR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_ROWS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_UPDATES_PER_HOUR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAX_USER_CONNECTIONS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMAXVALUE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMD5)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMEDIUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMEDIUMBLOB)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMEDIUMINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMEDIUMTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMEMORY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMERGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMICROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMIGRATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMIN_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMIN_ROWS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMINUTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMINUTE_MICROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMINUTE_SECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMOD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMODE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMODIFIES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMODIFY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMONTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMONTHNAME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMULTILINESTRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMULTIPOINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMULTIPOLYGON)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMUTEX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNAME_CONST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNAME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNAMES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNATIONAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNATURAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNCHAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNEW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNO_WAIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNO_WRITE_TO_BINLOG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNODEGROUP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNONE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNOT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNOW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNULL_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNUMERIC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNVARCHAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOCT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOFFSET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOJ)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOLD_PASSWORD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mON)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mONE_SHOT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mONE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mONLY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOPEN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOPTIMIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOPTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOPTIONALLY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOPTIONS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOR_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mORD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mORDER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOUT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOUTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOUTFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOWNER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPACK_KEYS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPAGE_CHECKSUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPAGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPARSER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPARTIAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPARTITION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPARTITIONING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPARTITIONS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPASSWORD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPERIOD_ADD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPERIOD_DIFF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPHASE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPI)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPLUGIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPLUGINS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPOINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPOLYGON)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPORT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPOW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPOWER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPRECISION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPREPARE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPRESERVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPREV)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPRIMARY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPRIVILEGES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPROCEDURE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPROCESS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPROCESSLIST)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPROFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPROFILES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPURGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mQUARTER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mQUERY_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mQUICK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mQUOTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRADIANS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRAND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRANGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREAD_ONLY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREAD_WRITE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREADS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREBUILD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRECOVER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREDO_BUFFER_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREDOFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREDUNDANT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREFERENCES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREGEXP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELAYLOG)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELAY_LOG_FILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELAY_LOG_POS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELEASE_LOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELEASE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRELOAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREMOVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRENAME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREORGANIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREPAIR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREPEAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREPEATABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREPLACE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREPLICATION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREQUIRE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRESET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRESOURCES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRESTORE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRESTRICT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRESUME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRETURN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRETURNS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREVERSE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREVOKE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRIGHT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROLLBACK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROLLUP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROUND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROUTINE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROW_FORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mROWS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRPAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRTREE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRTRIM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSAVEPOINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSCHEDULE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSCHEMA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSCHEMAS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSEC_TO_TIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSECOND_MICROSECOND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSECURITY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSELECT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSENSITIVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSEPARATOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSERIAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSERIALIZABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSERVER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSESSION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSESSION_USER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHARED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHARE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHOW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHUTDOWN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSIGN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSIGNED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSIMPLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSJIS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSLAVE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSLEEP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSMALLINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSNAPSHOT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSOCKET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSONAME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSOUNDEX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSOUNDS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSOURCE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSPACE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSPATIAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSPECIFIC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_BIG_RESULT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_BUFFER_RESULT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_CACHE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_CALC_FOUND_ROWS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_NO_CACHE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_SMALL_RESULT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQL_THREAD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQLEXCEPTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQLSTATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQLWARNING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSQRT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSSL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTART)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTARTING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTATS_AUTO_RECALC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTATS_PERSISTENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTARTS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTATUS_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTDDEV)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTDDEV_POP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTDDEV_SAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTOP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTORAGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTR_TO_DATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTRAIGHT_JOIN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTRCMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBJECT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBPARTITION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBPARTITIONS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBSTRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBSTRING_INDEX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUBTIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUPER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSUSPEND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSWAPS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSWE7)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSWITCHES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSYSDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSYSTEM_USER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTABLE_CHECKSUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTABLES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTABLESPACE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTAN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTEMPORARY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTEMPTABLE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTERMINATED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTHAN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTHEN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIME_FORMAT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIME_TO_SEC)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIMEDIFF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIMESTAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIMESTAMPADD)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIMESTAMPDIFF)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTINYBLOB)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTINYINT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTINYTEXT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTIS620)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTO_BASE64)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTO_DAYS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTO_SECONDS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRAILING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRANSACTION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRANSACTIONAL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRIGGER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRIGGERS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRIM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRUE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTRUNCATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTYPE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTYPES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUCS2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUJIS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNCOMMITTED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNCOMPRESS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNCOMPRESSED_LENGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNDEFINED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNDO_BUFFER_SIZE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNDO)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNDOFILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNHEX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNICODE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNINSTALL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNIQUE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNIX_TIMESTAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNKNOWN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNLOCK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNSIGNED)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUNTIL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUPDATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUPGRADE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUPPER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSAGE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSE_FRM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTC_DATE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTC_TIME)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTC_TIMESTAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTF16LE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTF16)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTF32)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUTF8)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUUID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVALUE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVALUES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVAR_POP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVAR_SAMP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVARBINARY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVARCHAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVARIABLES)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVARIANCE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVARYING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVERSION_SYM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVIEW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWAIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWARNINGS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWEEK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWEEKDAY)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWEEKOFYEAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWEIGHT_STRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWHEN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWHERE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWHILE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWITH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWORK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWRAPPER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWRITE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mX509)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mXA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mXML)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mXOR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mYEAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mYEAR_MONTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mYEARWEEK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mZEROFILL)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDIVIDE_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMOD_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mOR_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mAND_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mARROW)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mEQ)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNOT_EQ)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGET)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSET_VAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHIFT_LEFT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSHIFT_RIGHT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mALL_FIELDS)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSEMI)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDOT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mASTERISK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRPAREN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLPAREN)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mRBRACK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLBRACK)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPLUS_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mMINUS_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mNEGATION)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mVERTBAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBITAND)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mPOWER_OP)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mGTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mLTH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSINGLE_QUOTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mDOUBLE_QUOTE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBACKSLASH)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mINTEGER_NUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHEX_DIGIT_FRAGMENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mHEX_DIGIT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mBIT_NUM)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mREAL_NUMBER)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTEXT_STRING)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER_VAR)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER_VAR_SUBFIX1)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER_VAR_SUBFIX2)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER_VAR_SUBFIX3)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mUSER_VAR_SUBFIX4)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSYS_VAR_PREFIX)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSYS_VAR_ID)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mWHITE_SPACE)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct MySQLLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct MySQLLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct MySQLLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLLexer MySQLLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pMySQLLexer MySQLLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FUNCTION      266
#define GEOMETRYCOLLECTION      270
#define D_      7
#define NAME_CONST      434
#define MASTER_HOST      384
#define DEGREES      185
#define CASCADED      89
#define PRECISION      492
#define KOI8U      334
#define DO      201
#define ENABLE      212
#define CONCAT_WS      122
#define UNDO      682
#define SWAPS      634
#define E_      8
#define RPAREN      760
#define LINEAR      354
#define LOOP      373
#define RETURN      543
#define REGEXP      522
#define ANALYZE      45
#define MEDIUMINT      412
#define GET      750
#define EQ      747
#define SHOW      577
#define RBRACK      762
#define F_      9
#define ASC      50
#define TRANSACTION      666
#define DAY_MINUTE      172
#define INT      314
#define CURDATE      154
#define FILE      247
#define LEADING      345
#define SERVER      571
#define OCT      452
#define UNDEFINED      680
#define GROUP      279
#define IPC      320
#define G_      10
#define SL_COMMENT      790
#define USER      700
#define AUTHORS      57
#define SHUTDOWN      578
#define ONE_SHOT      457
#define KOI8R      333
#define LOWER      375
#define GET_FORMAT      272
#define LOCKS      364
#define AVG_ROW_LENGTH      62
#define MAX_ROWS      404
#define CONSTRAINT      128
#define SQL_SMALL_RESULT      601
#define LBRACK      763
#define FORCE      255
#define UUID      709
#define NCHAR      439
#define CURRENT_USER      156
#define SLEEP      585
#define SUSPEND      633
#define LINES      355
#define BIT_NUM      778
#define MULTIPOINT      431
#define FLOAT      251
#define COMPACT      117
#define SECOND_MICROSECOND      564
#define AT      54
#define ADDDATE      35
#define AS      49
#define CONNECTION_ID      125
#define SINGLE_QUOTE      772
#define BTREE      83
#define MASTER_USER      399
#define NULL_SYM      449
#define GEOMETRY      269
#define INTEGER_NUM      775
#define COMPRESS      119
#define AVG      61
#define TRUNCATE      672
#define A_      4
#define DATAFILE      161
#define GROUP_CONCAT      278
#define MINUTE_SECOND      423
#define MODE      425
#define RETURNS      544
#define LIKE      352
#define UPGRADE      695
#define BY      84
#define LONGTEXT      372
#define SERIALIZABLE      570
#define B_      5
#define INSTR      313
#define HEX_DIGIT      777
#define PORT      489
#define RIGHT      547
#define ATAN2      56
#define GB2312      267
#define SESSION      572
#define NODEGROUP      445
#define QUICK      506
#define COLON      756
#define COLUMNS      113
#define OPTIMIZE      461
#define DATABASE      159
#define ENCRYPT      215
#define C_      6
#define SQL_BIG_RESULT      596
#define TEXT_STRING      780
#define ROWS      554
#define DIRECTORY      195
#define ARROW      746
#define NATURAL      438
#define LONG      370
#define OPTIONS      464
#define SYS_VAR_ID      788
#define AUTOCOMMIT      59
#define LN      358
#define RESET      538
#define SQL_CALC_FOUND_ROWS      599
#define MODIFIES      426
#define FIND_IN_SET      248
#define BIT_LENGTH      74
#define COUNT      139
#define SUBSTRING_INDEX      629
#define L_      15
#define BENCHMARK      66
#define DATEDIFF      167
#define CODE      107
#define ESCAPE      222
#define BIT_OR      75
#define MEDIUMBLOB      411
#define LATIN1_BIN      339
#define LPAD      376
#define COMMENT      114
#define M_      16
#define DUAL      204
#define HOSTS      288
#define EXIT      233
#define COALESCE      106
#define MASTER_SSL_CERT      393
#define NO      442
#define EVERY      228
#define TINYTEXT      659
#define ON      456
#define MATCH      400
#define SENSITIVE      567
#define OJ      454
#define STRAIGHT_JOIN      622
#define FLOOR      252
#define BACKUP      63
#define AGAINST      40
#define ISSUER      325
#define N_      17
#define DELAYED      187
#define SHIFT_RIGHT      753
#define DISCARD      197
#define CUBE      153
#define ENDS      217
#define NATIONAL      437
#define TO_BASE64      661
#define STARTS      613
#define STDDEV      616
#define PLUGIN      485
#define ASCII      51
#define CONCURRENT      123
#define PI      484
#define CURSOR      157
#define PARSER      475
#define O_      18
#define TIMESTAMP      654
#define UPPER      696
#define LOAD_FILE      360
#define BIT_AND      73
#define YEAR      738
#define SNAPSHOT      587
#define ADD_SYM      34
#define H_      11
#define ID      781
#define CROSS      152
#define LENGTH      349
#define CONTEXT      130
#define IF      295
#define BOOLEAN      81
#define IN      299
#define QUERY_SYM      505
#define IO      319
#define MD5      409
#define REFERENCES      521
#define EXPORT_SET      237
#define PARTITION      477
#define EXTENT_SIZE      239
#define IS      322
#define NEXT      441
#define PLUS_OP      764
#define MASTER_SSL_VERIFY_SERVER_CERT      397
#define SQL_THREAD      603
#define I_      12
#define WITH      730
#define STATUS_SYM      614
#define UTF32      707
#define GBK      268
#define UNHEX      684
#define MASTER_SSL      396
#define DEFAULT      183
#define PROCESSLIST      500
#define J_      13
#define PURGE      503
#define STRCMP      623
#define EVENT      226
#define LAST_INSERT_ID      337
#define WRITE      733
#define PROCEDURE      498
#define LATIN1_GENERAL_CS      340
#define ERRORS      221
#define VARIANCE      717
#define K_      14
#define CHANGED      96
#define BINLOG      72
#define MINUTE      421
#define LEAVES      347
#define MASTER_SSL_CA      391
#define MEDIUM      410
#define GREEK      277
#define INSERT_METHOD      311
#define MOD      424
#define REMOVE      529
#define U_      24
#define TYPE      673
#define STDDEV_POP      617
#define BEGIN      65
#define ZEROFILL      741
#define T_      23
#define UTF16      706
#define ARMSCII8      48
#define HANDLER      280
#define STDDEV_SAMP      618
#define MONTHNAME      429
#define READ_ONLY      511
#define YEARWEEK      740
#define X509      734
#define TIS620      660
#define BLOB      78
#define IS_USED_LOCK      323
#define KEY      329
#define LOAD      359
#define TRAILING      665
#define COMMITTED      116
#define XA      735
#define TIMESTAMPADD      655
#define DELAY_KEY_WRITE      186
#define DEFINER      184
#define W_      26
#define WAIT      721
#define ROLLBACK      548
#define CIPHER      103
#define UNCOMPRESS      678
#define TABLESPACE      642
#define ABS      30
#define REAL      515
#define INET_ATON      302
#define RECOVER      517
#define RADIANS      508
#define OUT      468
#define READ      512
#define V_      25
#define MIN_ROWS      420
#define CALL      87
#define REVERSE      545
#define TO_DAYS      662
#define DYNAMIC      207
#define HEBREW      283
#define UNLOCK      691
#define HELP      284
#define SQL_BUFFER_RESULT      597
#define PERIOD_ADD      481
#define MICROSECOND      416
#define EXECUTE      230
#define OWNER      471
#define HOST      287
#define ALL_FIELDS      754
#define TEMPTABLE      645
#define MASTER      398
#define Q_      20
#define UNCOMPRESSED_LENGTH      679
#define ASENSITIVE      52
#define INOUT      307
#define TIME      651
#define SQLEXCEPTION      604
#define REPLACE      535
#define EUCKR      225
#define COLUMN      112
#define P_      19
#define INDEX_SYM      300
#define INTEGER      315
#define CP932      147
#define MACROMAN      379
#define DES_ENCRYPT      190
#define MAX_SIZE      405
#define TO      664
#define MID      417
#define TEXT      647
#define IGNORE      297
#define COMPLETION      118
#define HOUR      289
#define SYS_VAR_PREFIX      787
#define CHANGE      95
#define PREV      495
#define S_      22
#define COMMIT      115
#define NEGATION      766
#define DECIMAL      180
#define CLOSE      105
#define BIGINT      69
#define WHEN      727
#define BIT_XOR      77
#define HOUR_MINUTE      291
#define DECLARE      181
#define MASTER_SSL_CIPHER      394
#define BIT      76
#define IS_FREE_LOCK      321
#define BIN      70
#define AGGREGATE      41
#define BETWEEN      67
#define R_      21
#define MAX_QUERIES_PER_HOUR      403
#define FIRST      249
#define CAST      91
#define PREPARE      493
#define SIGNED      580
#define WHILE      729
#define DETERMINISTIC      194
#define DOUBLE_QUOTE      773
#define VARYING      718
#define TRIGGER      668
#define CASE      90
#define LOGS      369
#define DEALLOCATE      178
#define MAKETIME      382
#define ONE      458
#define DAYNAME      174
#define READ_WRITE      513
#define CASCADE      88
#define RELAY_LOG_FILE      524
#define SOUNDEX      590
#define FULL      264
#define INSERT      310
#define LOG2      367
#define SHARE      576
#define MASTER_POS_WAIT      389
#define TABLE_CHECKSUM      640
#define UNIQUE      688
#define RESTORE      540
#define VIEW      720
#define CONCAT      121
#define KEYBCS2      330
#define SPATIAL      594
#define OLD_PASSWORD      455
#define ROLLUP      549
#define PRIMARY      496
#define VERSION_SYM      719
#define POWER_OP      769
#define HOUR_SECOND      292
#define TRANSACTIONAL      667
#define PASSWORD      480
#define NAMES      436
#define AND_OP      745
#define UNTIL      693
#define EXPANSION      235
#define MIGRATE      418
#define MEMORY      414
#define STR_TO_DATE      621
#define GEOSTD8      271
#define INSTALL      312
#define NO_WAIT      443
#define ENCODE      214
#define BACKSLASH      774
#define UJIS      676
#define Y_      28
#define MAKE_SET      380
#define CEILING      93
#define COMPRESSED      120
#define ORDER      467
#define FROM_DAYS      262
#define FOR      254
#define SQLSTATE      605
#define HP8      293
#define WEEKOFYEAR      725
#define UNINSTALL      686
#define IDENTIFIED      294
#define ORD      466
#define REBUILD      516
#define LOCK      363
#define ML_COMMENT      791
#define X_      27
#define SJIS      583
#define LINESTRING      356
#define CONTINUE      131
#define SYSDATE      637
#define MAX_USER_CONNECTIONS      407
#define COPY      136
#define PARTITIONS      479
#define HIGH_PRIORITY      286
#define ALL      43
#define COERCIBILITY      108
#define OUTFILE      470
#define PACK_KEYS      472
#define DOT      757
#define CURRENT_TIMESTAMP      155
#define RELOAD      528
#define INITIAL_SIZE      305
#define PARTIAL      476
#define USER_VAR_SUBFIX4      785
#define ISOLATION      324
#define USER_VAR_SUBFIX3      784
#define USER_VAR_SUBFIX2      783
#define BYTE      85
#define USER_VAR_SUBFIX1      782
#define XOR      737
#define CRC32      149
#define VALUES      711
#define HASH      281
#define INDEXES      301
#define ENCLOSED      213
#define ANY      47
#define Z_      29
#define CONV      133
#define VARIABLES      716
#define KEYS      331
#define BINARY      71
#define MAX_SYM      401
#define MOD_OP      743
#define MASTER_CONNECT_RETRY      383
#define RPAD      555
#define SWITCHES      636
#define SMALLINT      586
#define ROW      553
#define FIXED      250
#define MASTER_LOG_FILE      385
#define LAST_DAY      336
#define TYPES      674
#define MULTILINESTRING      430
#define KILL      332
#define CREATE      150
#define MASTER_PORT      388
#define SOCKET      588
#define DUPLICATE      206
#define TIME_TO_SEC      652
#define SHARED      575
#define MASTER_SSL_KEY      395
#define PRESERVE      494
#define ACOS      32
#define LATIN2      342
#define LATIN1      341
#define LATIN7      344
#define HEX_DIGIT_FRAGMENT      776
#define DAYOFYEAR      177
#define POWER      491
#define LATIN5      343
#define DUMPFILE      205
#define STOP      619
#define VALUE      710
#define RESTRICT      541
#define DES_KEY_FILE      191
#define FETCH      245
#define LOW_PRIORITY      374
#define INPLACE      308
#define ACCESSIBLE      31
#define DESCRIBE      193
#define ASIN      53
#define DATE_SUB      165
#define SYSTEM_USER      638
#define ELSIF      210
#define SQL_CACHE      598
#define UTF8      708
#define MASTER_SSL_CAPATH      392
#define SERIAL      569
#define XML      736
#define SUBJECT      625
#define MODIFY      427
#define ALTER      44
#define POINT      487
#define TIME_FORMAT      650
#define LONGBLOB      371
#define TABLE      639
#define SOURCE      592
#define VARCHAR      715
#define SESSION_USER      573
#define UNDOFILE      683
#define SUM      631
#define MULTIPOLYGON      432
#define WHITE_SPACE      789
#define BITAND      768
#define CHAR_LENGTH      98
#define DATABASES      160
#define STORAGE      620
#define UNIX_TIMESTAMP      689
#define MAXVALUE      408
#define LEFT      348
#define UNDO_BUFFER_SIZE      681
#define STD      615
#define COLLATE      109
#define OUTER      469
#define CP866      146
#define MERGE      415
#define MINUTE_MICROSECOND      422
#define UNCOMMITTED      677
#define HAVING      282
#define SEMI      755
#define NOT_EQ      748
#define VERTBAR      767
#define ITERATE      326
#define CP852      145
#define CP850      144
#define BLOCK      79
#define FROM_BASE64      261
#define ROUTINE      551
#define MINUS_OP      765
#define FORMAT      257
#define TRIGGERS      669
#define SOUNDS      591
#define WEEK      723
#define POLYGON      488
#define CHAR      97
#define NEW      440
#define DAY      169
#define TERMINATED      646
#define RELEASE      527
#define CONTRIBUTORS      132
#define EXPLAIN      236
#define CURTIME      158
#define LEAVE      346
#define EXTENDED      238
#define QUOTE      507
#define QUARTER      504
#define THAN      648
#define SWE7      635
#define TAN      643
#define LESS      350
#define PERIOD_DIFF      482
#define HOUR_MICROSECOND      290
#define DOUBLE      202
#define AND_SYM      46
#define EACH      208
#define SUPER      632
#define BIG5      68
#define SELECT      566
#define INTO      317
#define CHECKSUM      102
#define MASTER_SERVER_ID      390
#define MAX_CONNECTIONS_PER_HOUR      402
#define LTRIM      377
#define DAY_MICROSECOND      171
#define SECOND      563
#define LOG10      366
#define NO_WRITE_TO_BINLOG      444
#define NUMERIC      450
#define MAX_UPDATES_PER_HOUR      406
#define TABLES      641
#define SHIFT_LEFT      752
#define DELETE_SYM      188
#define SPECIFIC      595
#define FOUND_ROWS      258
#define ADDTIME      36
#define ENGINE      218
#define ROUND      550
#define KEY_BLOCK_SIZE      328
#define FALSE      241
#define GET_LOCK      273
#define DISTINCTROW      200
#define WHERE      728
#define VAR_SAMP      713
#define UTC_TIMESTAMP      704
#define LIMIT      353
#define SPACE      593
#define USAGE      697
#define YEAR_MONTH      739
#define MACCE      378
#define HEX      285
#define COMMA      758
#define REDUNDANT      520
#define FULLTEXT      265
#define USE_FRM      698
#define EUCJPMS      224
#define GRANT      275
#define VARBINARY      714
#define CONVERT      134
#define AUTOEXTEND_SIZE      60
#define DATETIME      168
#define DEC8      179
#define SQRT      607
#define WRAPPER      732
#define MUTEX      433
#define SUBSTRING      628
#define REPEATABLE      534
#define FAULTS      243
#define DAY_SECOND      173
#define PAGE_CHECKSUM      473
#define LOCATE      362
#define RELAYLOG      523
#define FOUND      259
#define CROSECOND      151
#define GLOBAL      274
#define RESOURCES      539
#define INFILE      304
#define LET      749
#define DES_DECRYPT      189
#define UTF16LE      705
#define CONTAINS      129
#define CONDITION      124
#define NOW      448
#define SEPARATOR      568
#define FLUSH      253
#define NOT      447
#define EOF      -1
#define FOREIGN      256
#define CACHE      86
#define PRIVILEGES      497
#define REQUIRE      537
#define ACTION      33
#define CHARACTER      99
#define MONTH      428
#define UTC_DATE      702
#define USER_VAR      786
#define IMPORT      298
#define WEIGHT_STRING      726
#define DIVIDE_OP      742
#define SIN      582
#define USING      701
#define AUTO_INCREMENT      58
#define TINYBLOB      657
#define DAYOFWEEK      176
#define DISABLE      196
#define SLAVE      584
#define OR_OP      744
#define SUBPARTITION      626
#define ELT      211
#define ELSE      209
#define BOOL      80
#define AES_DECRYPT      37
#define MEDIUMTEXT      413
#define EVENTS      227
#define LANGUAGE      335
#define LEVEL      351
#define MAKEDATE      381
#define INSENSITIVE      309
#define REAL_NUMBER      779
#define NONE      446
#define GRANTS      276
#define TRIM      670
#define REPEAT      533
#define UTC_TIME      703
#define END      216
#define STATS_AUTO_RECALC      611
#define CONVERT_TZ      135
#define CHAIN      94
#define RENAME      530
#define REPLICATION      536
#define OPTION      462
#define ONLY      459
#define SCHEDULE      559
#define OPTIONALLY      463
#define SCHEMAS      561
#define CHARSET      100
#define DAYOFMONTH      175
#define PROFILES      502
#define ASTERISK      759
#define LPAREN      761
#define DAY_HOUR      170
#define THEN      649
#define COLLATION      110
#define PHASE      483
#define OFFSET      453
#define RAND      509
#define TIMEDIFF      653
#define FROM_UNIXTIME      263
#define RELAY_LOG_POS      525
#define EXISTS      232
#define INET_NTOA      303
#define NVARCHAR      451
#define SQL_NO_CACHE      600
#define UCS2      675
#define FAST      242
#define REDOFILE      519
#define SET      574
#define UNICODE      685
#define UNION      687
#define RESUME      542
#define RTREE      556
#define SCHEMA      560
#define ENUM      220
#define UNSIGNED      692
#define DROP      203
#define READS      514
#define START      609
#define REVOKE      546
#define PROCESS      499
#define STRING      624
#define SIGN      579
#define LOG      365
#define OR_SYM      465
#define MIN_SYM      419
#define PARTITIONING      478
#define TO_SECONDS      663
#define CONNECTION      126
#define SQL      602
#define NAME      435
#define INVOKER      318
#define REPAIR      532
#define WEEKDAY      724
#define COT      138
#define POW      490
#define SQLWARNING      606
#define EXP      234
#define DATE_FORMAT      164
#define COS      137
#define SAVEPOINT      558
#define BOTH      82
#define AES_ENCRYPT      38
#define TINYINT      658
#define ATAN      55
#define LAST      338
#define WORK      731
#define SUBPARTITIONS      627
#define CP1256      142
#define CLIENT      104
#define CP1251      141
#define WARNINGS      722
#define CP1250      140
#define LOGFILE      368
#define DATE_ADD      163
#define LOCAL      361
#define ENGINES      219
#define LIST      357
#define CP1257      143
#define COLUMN_FORMAT      111
#define SSL      608
#define MASTER_LOG_POS      386
#define ALGORITHM      42
#define VAR_POP      712
#define TIMESTAMPDIFF      656
#define FIELD      246
#define SUBTIME      630
#define CHECK      101
#define ESCAPED      223
#define USE      699
#define FROM      260
#define DISTINCT      199
#define TEMPORARY      644
#define RTRIM      557
#define SIMPLE      581
#define SEC_TO_TIME      562
#define INNER      306
#define GTH      770
#define MASTER_PASSWORD      387
#define UPDATE      694
#define PROFILE      501
#define EXCLUSIVE      231
#define INTERVAL      316
#define RELEASE_LOCK      526
#define UNKNOWN      690
#define EXCHANGE      229
#define EXTRACT      240
#define STATS_PERSISTENT      612
#define SECURITY      565
#define REORGANIZE      531
#define ROW_FORMAT      552
#define CPU      148
#define PLUGINS      486
#define SET_VAR      751
#define RANGE      510
#define CONSISTENT      127
#define IFNULL      296
#define BEFORE      64
#define FIELDS      244
#define SONAME      589
#define AFTER      39
#define TRUE      671
#define JOIN      327
#define OPEN      460
#define LTH      771
#define PAGE      474
#define DISK      198
#define DECODE      182
#define STARTING      610
#define REDO_BUFFER_SIZE      518
#define CEIL      92
#define DESC      192
#define DATE      166
#define DATA      162
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
