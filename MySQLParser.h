/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2015-01-14 14:13:36
 *     -                for the parser : MySQLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser MySQLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLParser, which is returned from a call to MySQLParserNew().
 *
 * The methods in pMySQLParser are  as follows:
 *
 *  - MySQLParser_relational_op_return      pMySQLParser->relational_op(pMySQLParser)
 *  - MySQLParser_charset_name_return      pMySQLParser->charset_name(pMySQLParser)
 *  - MySQLParser_cast_data_type_return      pMySQLParser->cast_data_type(pMySQLParser)
 *  - MySQLParser_search_modifier_return      pMySQLParser->search_modifier(pMySQLParser)
 *  - MySQLParser_transcoding_name_return      pMySQLParser->transcoding_name(pMySQLParser)
 *  - MySQLParser_interval_unit_return      pMySQLParser->interval_unit(pMySQLParser)
 *  - MySQLParser_collation_names_return      pMySQLParser->collation_names(pMySQLParser)
 *  - MySQLParser_string_literal_return      pMySQLParser->string_literal(pMySQLParser)
 *  - MySQLParser_number_literal_return      pMySQLParser->number_literal(pMySQLParser)
 *  - MySQLParser_hex_literal_return      pMySQLParser->hex_literal(pMySQLParser)
 *  - MySQLParser_boolean_literal_return      pMySQLParser->boolean_literal(pMySQLParser)
 *  - MySQLParser_bit_literal_return      pMySQLParser->bit_literal(pMySQLParser)
 *  - MySQLParser_literal_value_return      pMySQLParser->literal_value(pMySQLParser)
 *  - MySQLParser_functionList_return      pMySQLParser->functionList(pMySQLParser)
 *  - MySQLParser_number_functions_return      pMySQLParser->number_functions(pMySQLParser)
 *  - MySQLParser_char_functions_return      pMySQLParser->char_functions(pMySQLParser)
 *  - MySQLParser_time_functions_return      pMySQLParser->time_functions(pMySQLParser)
 *  - MySQLParser_other_functions_return      pMySQLParser->other_functions(pMySQLParser)
 *  - MySQLParser_group_functions_return      pMySQLParser->group_functions(pMySQLParser)
 *  - MySQLParser_schema_name_return      pMySQLParser->schema_name(pMySQLParser)
 *  - MySQLParser_table_name_return      pMySQLParser->table_name(pMySQLParser)
 *  - MySQLParser_engine_name_return      pMySQLParser->engine_name(pMySQLParser)
 *  - MySQLParser_column_name_return      pMySQLParser->column_name(pMySQLParser)
 *  - MySQLParser_view_name_return      pMySQLParser->view_name(pMySQLParser)
 *  - MySQLParser_parser_name_return      pMySQLParser->parser_name(pMySQLParser)
 *  - MySQLParser_index_name_return      pMySQLParser->index_name(pMySQLParser)
 *  - MySQLParser_partition_name_return      pMySQLParser->partition_name(pMySQLParser)
 *  - MySQLParser_partition_logical_name_return      pMySQLParser->partition_logical_name(pMySQLParser)
 *  - MySQLParser_constraint_symbol_name_return      pMySQLParser->constraint_symbol_name(pMySQLParser)
 *  - MySQLParser_foreign_key_symbol_name_return      pMySQLParser->foreign_key_symbol_name(pMySQLParser)
 *  - MySQLParser_collation_name_return      pMySQLParser->collation_name(pMySQLParser)
 *  - MySQLParser_event_name_return      pMySQLParser->event_name(pMySQLParser)
 *  - MySQLParser_user_name_return      pMySQLParser->user_name(pMySQLParser)
 *  - MySQLParser_function_name_return      pMySQLParser->function_name(pMySQLParser)
 *  - MySQLParser_procedure_name_return      pMySQLParser->procedure_name(pMySQLParser)
 *  - MySQLParser_server_name_return      pMySQLParser->server_name(pMySQLParser)
 *  - MySQLParser_wrapper_name_return      pMySQLParser->wrapper_name(pMySQLParser)
 *  - MySQLParser_alias_return      pMySQLParser->alias(pMySQLParser)
 *  - MySQLParser_expression_return      pMySQLParser->expression(pMySQLParser)
 *  - MySQLParser_exp_factor1_return      pMySQLParser->exp_factor1(pMySQLParser)
 *  - MySQLParser_exp_factor2_return      pMySQLParser->exp_factor2(pMySQLParser)
 *  - MySQLParser_exp_factor3_return      pMySQLParser->exp_factor3(pMySQLParser)
 *  - MySQLParser_exp_factor4_return      pMySQLParser->exp_factor4(pMySQLParser)
 *  - MySQLParser_bool_primary_return      pMySQLParser->bool_primary(pMySQLParser)
 *  - MySQLParser_predicate_return      pMySQLParser->predicate(pMySQLParser)
 *  - MySQLParser_bit_expr_return      pMySQLParser->bit_expr(pMySQLParser)
 *  - MySQLParser_factor1_return      pMySQLParser->factor1(pMySQLParser)
 *  - MySQLParser_factor2_return      pMySQLParser->factor2(pMySQLParser)
 *  - MySQLParser_factor3_return      pMySQLParser->factor3(pMySQLParser)
 *  - MySQLParser_factor4_return      pMySQLParser->factor4(pMySQLParser)
 *  - MySQLParser_factor5_return      pMySQLParser->factor5(pMySQLParser)
 *  - MySQLParser_factor6_return      pMySQLParser->factor6(pMySQLParser)
 *  - MySQLParser_factor7_return      pMySQLParser->factor7(pMySQLParser)
 *  - MySQLParser_simple_expr_return      pMySQLParser->simple_expr(pMySQLParser)
 *  - MySQLParser_function_call_return      pMySQLParser->function_call(pMySQLParser)
 *  - MySQLParser_case_when_statement_return      pMySQLParser->case_when_statement(pMySQLParser)
 *  - MySQLParser_case_when_statement1_return      pMySQLParser->case_when_statement1(pMySQLParser)
 *  - MySQLParser_case_when_statement2_return      pMySQLParser->case_when_statement2(pMySQLParser)
 *  - MySQLParser_match_against_statement_return      pMySQLParser->match_against_statement(pMySQLParser)
 *  - MySQLParser_column_spec_return      pMySQLParser->column_spec(pMySQLParser)
 *  - MySQLParser_expression_list_return      pMySQLParser->expression_list(pMySQLParser)
 *  - MySQLParser_interval_expr_return      pMySQLParser->interval_expr(pMySQLParser)
 *  - MySQLParser_table_references_return      pMySQLParser->table_references(pMySQLParser)
 *  - MySQLParser_table_reference_return      pMySQLParser->table_reference(pMySQLParser)
 *  - MySQLParser_table_factor1_return      pMySQLParser->table_factor1(pMySQLParser)
 *  - MySQLParser_table_factor2_return      pMySQLParser->table_factor2(pMySQLParser)
 *  - MySQLParser_table_factor3_return      pMySQLParser->table_factor3(pMySQLParser)
 *  - MySQLParser_table_factor4_return      pMySQLParser->table_factor4(pMySQLParser)
 *  - MySQLParser_table_atom_return      pMySQLParser->table_atom(pMySQLParser)
 *  - MySQLParser_join_condition_return      pMySQLParser->join_condition(pMySQLParser)
 *  - MySQLParser_index_hint_list_return      pMySQLParser->index_hint_list(pMySQLParser)
 *  - MySQLParser_index_options_return      pMySQLParser->index_options(pMySQLParser)
 *  - MySQLParser_index_hint_return      pMySQLParser->index_hint(pMySQLParser)
 *  - MySQLParser_index_list_return      pMySQLParser->index_list(pMySQLParser)
 *  - MySQLParser_partition_clause_return      pMySQLParser->partition_clause(pMySQLParser)
 *  - MySQLParser_partition_names_return      pMySQLParser->partition_names(pMySQLParser)
 *  - MySQLParser_root_statement_return      pMySQLParser->root_statement(pMySQLParser)
 *  - MySQLParser_data_manipulation_statements_return      pMySQLParser->data_manipulation_statements(pMySQLParser)
 *  - MySQLParser_data_definition_statements_return      pMySQLParser->data_definition_statements(pMySQLParser)
 *  - MySQLParser_transactional_locking_statements_return      pMySQLParser->transactional_locking_statements(pMySQLParser)
 *  - MySQLParser_database_admin_statements_return      pMySQLParser->database_admin_statements(pMySQLParser)
 *  - MySQLParser_select_statement_return      pMySQLParser->select_statement(pMySQLParser)
 *  - MySQLParser_select_expression_return      pMySQLParser->select_expression(pMySQLParser)
 *  - MySQLParser_where_clause_return      pMySQLParser->where_clause(pMySQLParser)
 *  - MySQLParser_groupby_clause_return      pMySQLParser->groupby_clause(pMySQLParser)
 *  - MySQLParser_groupby_item_return      pMySQLParser->groupby_item(pMySQLParser)
 *  - MySQLParser_having_clause_return      pMySQLParser->having_clause(pMySQLParser)
 *  - MySQLParser_orderby_clause_return      pMySQLParser->orderby_clause(pMySQLParser)
 *  - MySQLParser_orderby_item_return      pMySQLParser->orderby_item(pMySQLParser)
 *  - MySQLParser_limit_clause_return      pMySQLParser->limit_clause(pMySQLParser)
 *  - MySQLParser_offset_return      pMySQLParser->offset(pMySQLParser)
 *  - MySQLParser_row_count_return      pMySQLParser->row_count(pMySQLParser)
 *  - MySQLParser_select_list_return      pMySQLParser->select_list(pMySQLParser)
 *  - MySQLParser_column_list_return      pMySQLParser->column_list(pMySQLParser)
 *  - MySQLParser_subquery_return      pMySQLParser->subquery(pMySQLParser)
 *  - MySQLParser_table_spec_return      pMySQLParser->table_spec(pMySQLParser)
 *  - MySQLParser_table_spec_list_return      pMySQLParser->table_spec_list(pMySQLParser)
 *  - MySQLParser_displayed_column_return      pMySQLParser->displayed_column(pMySQLParser)
 *  - MySQLParser_delete_statements_return      pMySQLParser->delete_statements(pMySQLParser)
 *  - MySQLParser_delete_single_table_statement_return      pMySQLParser->delete_single_table_statement(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement1_return      pMySQLParser->delete_multiple_table_statement1(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement2_return      pMySQLParser->delete_multiple_table_statement2(pMySQLParser)
 *  - MySQLParser_insert_statements_return      pMySQLParser->insert_statements(pMySQLParser)
 *  - MySQLParser_insert_header_return      pMySQLParser->insert_header(pMySQLParser)
 *  - MySQLParser_insert_subfix_return      pMySQLParser->insert_subfix(pMySQLParser)
 *  - MySQLParser_insert_statement1_return      pMySQLParser->insert_statement1(pMySQLParser)
 *  - MySQLParser_value_list_clause_return      pMySQLParser->value_list_clause(pMySQLParser)
 *  - MySQLParser_column_value_list_return      pMySQLParser->column_value_list(pMySQLParser)
 *  - MySQLParser_insert_statement2_return      pMySQLParser->insert_statement2(pMySQLParser)
 *  - MySQLParser_set_columns_cluase_return      pMySQLParser->set_columns_cluase(pMySQLParser)
 *  - MySQLParser_set_column_cluase_return      pMySQLParser->set_column_cluase(pMySQLParser)
 *  - MySQLParser_insert_statement3_return      pMySQLParser->insert_statement3(pMySQLParser)
 *  - MySQLParser_update_statements_return      pMySQLParser->update_statements(pMySQLParser)
 *  - MySQLParser_single_table_update_statement_return      pMySQLParser->single_table_update_statement(pMySQLParser)
 *  - MySQLParser_multiple_table_update_statement_return      pMySQLParser->multiple_table_update_statement(pMySQLParser)
 *  - MySQLParser_call_statement_return      pMySQLParser->call_statement(pMySQLParser)
 *  - MySQLParser_do_statement_return      pMySQLParser->do_statement(pMySQLParser)
 *  - MySQLParser_handler_statements_return      pMySQLParser->handler_statements(pMySQLParser)
 *  - MySQLParser_open_handler_statement_return      pMySQLParser->open_handler_statement(pMySQLParser)
 *  - MySQLParser_handler_statement1_return      pMySQLParser->handler_statement1(pMySQLParser)
 *  - MySQLParser_handler_statement2_return      pMySQLParser->handler_statement2(pMySQLParser)
 *  - MySQLParser_handler_statement3_return      pMySQLParser->handler_statement3(pMySQLParser)
 *  - MySQLParser_close_handler_statement_return      pMySQLParser->close_handler_statement(pMySQLParser)
 *  - MySQLParser_load_data_statement_return      pMySQLParser->load_data_statement(pMySQLParser)
 *  - MySQLParser_load_xml_statement_return      pMySQLParser->load_xml_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_return      pMySQLParser->replace_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_header_return      pMySQLParser->replace_statement_header(pMySQLParser)
 *  - MySQLParser_replace_statement1_return      pMySQLParser->replace_statement1(pMySQLParser)
 *  - MySQLParser_replace_statement2_return      pMySQLParser->replace_statement2(pMySQLParser)
 *  - MySQLParser_replace_statement3_return      pMySQLParser->replace_statement3(pMySQLParser)
 *  - MySQLParser_create_database_statement_return      pMySQLParser->create_database_statement(pMySQLParser)
 *  - MySQLParser_create_specification_return      pMySQLParser->create_specification(pMySQLParser)
 *  - MySQLParser_alter_database_statements_return      pMySQLParser->alter_database_statements(pMySQLParser)
 *  - MySQLParser_alter_database_statement1_return      pMySQLParser->alter_database_statement1(pMySQLParser)
 *  - MySQLParser_alter_database_statement2_return      pMySQLParser->alter_database_statement2(pMySQLParser)
 *  - MySQLParser_alter_database_specification_return      pMySQLParser->alter_database_specification(pMySQLParser)
 *  - MySQLParser_drop_database_statement_return      pMySQLParser->drop_database_statement(pMySQLParser)
 *  - MySQLParser_create_event_statement_return      pMySQLParser->create_event_statement(pMySQLParser)
 *  - MySQLParser_schedule_definition_return      pMySQLParser->schedule_definition(pMySQLParser)
 *  - MySQLParser_interval_return      pMySQLParser->interval(pMySQLParser)
 *  - MySQLParser_timestamp_return      pMySQLParser->timestamp(pMySQLParser)
 *  - MySQLParser_alter_event_statement_return      pMySQLParser->alter_event_statement(pMySQLParser)
 *  - MySQLParser_drop_event_statement_return      pMySQLParser->drop_event_statement(pMySQLParser)
 *  - MySQLParser_create_index_statement_return      pMySQLParser->create_index_statement(pMySQLParser)
 *  - MySQLParser_algorithm_option_return      pMySQLParser->algorithm_option(pMySQLParser)
 *  - MySQLParser_lock_option_return      pMySQLParser->lock_option(pMySQLParser)
 *  - MySQLParser_drop_index_statement_return      pMySQLParser->drop_index_statement(pMySQLParser)
 *  - MySQLParser_create_server_statement_return      pMySQLParser->create_server_statement(pMySQLParser)
 *  - MySQLParser_create_server_option_return      pMySQLParser->create_server_option(pMySQLParser)
 *  - MySQLParser_alter_server_statement_return      pMySQLParser->alter_server_statement(pMySQLParser)
 *  - MySQLParser_alter_server_option_return      pMySQLParser->alter_server_option(pMySQLParser)
 *  - MySQLParser_drop_server_statement_return      pMySQLParser->drop_server_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement_return      pMySQLParser->create_table_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement1_return      pMySQLParser->create_table_statement1(pMySQLParser)
 *  - MySQLParser_create_table_statement2_return      pMySQLParser->create_table_statement2(pMySQLParser)
 *  - MySQLParser_create_table_statement3_return      pMySQLParser->create_table_statement3(pMySQLParser)
 *  - MySQLParser_create_definition_return      pMySQLParser->create_definition(pMySQLParser)
 *  - MySQLParser_column_definition_return      pMySQLParser->column_definition(pMySQLParser)
 *  - MySQLParser_null_or_notnull_return      pMySQLParser->null_or_notnull(pMySQLParser)
 *  - MySQLParser_column_data_type_header_return      pMySQLParser->column_data_type_header(pMySQLParser)
 *  - MySQLParser_index_column_name_return      pMySQLParser->index_column_name(pMySQLParser)
 *  - MySQLParser_reference_definition_return      pMySQLParser->reference_definition(pMySQLParser)
 *  - MySQLParser_reference_option_return      pMySQLParser->reference_option(pMySQLParser)
 *  - MySQLParser_table_options_return      pMySQLParser->table_options(pMySQLParser)
 *  - MySQLParser_table_option_return      pMySQLParser->table_option(pMySQLParser)
 *  - MySQLParser_partition_options_return      pMySQLParser->partition_options(pMySQLParser)
 *  - MySQLParser_partition_definition_return      pMySQLParser->partition_definition(pMySQLParser)
 *  - MySQLParser_subpartition_definition_return      pMySQLParser->subpartition_definition(pMySQLParser)
 *  - MySQLParser_length_return      pMySQLParser->length(pMySQLParser)
 *  - MySQLParser_alter_table_statement_return      pMySQLParser->alter_table_statement(pMySQLParser)
 *  - MySQLParser_alter_table_specification_return      pMySQLParser->alter_table_specification(pMySQLParser)
 *  - MySQLParser_index_column_names_return      pMySQLParser->index_column_names(pMySQLParser)
 *  - MySQLParser_index_type_return      pMySQLParser->index_type(pMySQLParser)
 *  - MySQLParser_index_option_return      pMySQLParser->index_option(pMySQLParser)
 *  - MySQLParser_column_definitions_return      pMySQLParser->column_definitions(pMySQLParser)
 *  - MySQLParser_rename_table_statement_return      pMySQLParser->rename_table_statement(pMySQLParser)
 *  - MySQLParser_drop_table_statement_return      pMySQLParser->drop_table_statement(pMySQLParser)
 *  - MySQLParser_truncate_table_statement_return      pMySQLParser->truncate_table_statement(pMySQLParser)
 *  - MySQLParser_create_view_statement_return      pMySQLParser->create_view_statement(pMySQLParser)
 *  - MySQLParser_create_view_body_return      pMySQLParser->create_view_body(pMySQLParser)
 *  - MySQLParser_alter_view_statement_return      pMySQLParser->alter_view_statement(pMySQLParser)
 *  - MySQLParser_drop_view_statement_return      pMySQLParser->drop_view_statement(pMySQLParser)
 *  - MySQLParser_start_transaction_statement_return      pMySQLParser->start_transaction_statement(pMySQLParser)
 *  - MySQLParser_transaction_characteristic_list_return      pMySQLParser->transaction_characteristic_list(pMySQLParser)
 *  - MySQLParser_transaction_characteristic_return      pMySQLParser->transaction_characteristic(pMySQLParser)
 *  - MySQLParser_begin_statement_return      pMySQLParser->begin_statement(pMySQLParser)
 *  - MySQLParser_commit_statement_return      pMySQLParser->commit_statement(pMySQLParser)
 *  - MySQLParser_rollback_statement_return      pMySQLParser->rollback_statement(pMySQLParser)
 *  - MySQLParser_savepoint_statement_return      pMySQLParser->savepoint_statement(pMySQLParser)
 *  - MySQLParser_rollback_to_savepoint_statement_return      pMySQLParser->rollback_to_savepoint_statement(pMySQLParser)
 *  - MySQLParser_set_autocommit_statement_return      pMySQLParser->set_autocommit_statement(pMySQLParser)
 *  - MySQLParser_release_savepoint_statement_return      pMySQLParser->release_savepoint_statement(pMySQLParser)
 *  - MySQLParser_lock_table_statement_return      pMySQLParser->lock_table_statement(pMySQLParser)
 *  - MySQLParser_lock_type_list_return      pMySQLParser->lock_type_list(pMySQLParser)
 *  - MySQLParser_lock_type_return      pMySQLParser->lock_type(pMySQLParser)
 *  - MySQLParser_unlock_table_statement_return      pMySQLParser->unlock_table_statement(pMySQLParser)
 *  - MySQLParser_set_transaction_statement_return      pMySQLParser->set_transaction_statement(pMySQLParser)
 *  - MySQLParser_set_transaction_characteristic_list_return      pMySQLParser->set_transaction_characteristic_list(pMySQLParser)
 *  - MySQLParser_set_transaction_characteristic_return      pMySQLParser->set_transaction_characteristic(pMySQLParser)
 *  - MySQLParser_analyze_table_statement_return      pMySQLParser->analyze_table_statement(pMySQLParser)
 *  - MySQLParser_check_table_statement_return      pMySQLParser->check_table_statement(pMySQLParser)
 *  - MySQLParser_checksum_table_statement_return      pMySQLParser->checksum_table_statement(pMySQLParser)
 *  - MySQLParser_optimize_table_statement_return      pMySQLParser->optimize_table_statement(pMySQLParser)
 *  - MySQLParser_repair_table_statement_return      pMySQLParser->repair_table_statement(pMySQLParser)
 *  - MySQLParser_set_statements_return      pMySQLParser->set_statements(pMySQLParser)
 *  - MySQLParser_set_uservar_statement_return      pMySQLParser->set_uservar_statement(pMySQLParser)
 *  - MySQLParser_set_sysvar_statement_return      pMySQLParser->set_sysvar_statement(pMySQLParser)
 *  - MySQLParser_set_charset_statement_return      pMySQLParser->set_charset_statement(pMySQLParser)
 *  - MySQLParser_set_names_statement_return      pMySQLParser->set_names_statement(pMySQLParser)
 *  - MySQLParser_charset_name_str_return      pMySQLParser->charset_name_str(pMySQLParser)
 *  - MySQLParser_collation_names_str_return      pMySQLParser->collation_names_str(pMySQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLParser_H
#define _MySQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLParser_Ctx_struct MySQLParser, * pMySQLParser;





#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct MySQLParser_relational_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_relational_op_return;

typedef struct MySQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_charset_name_return;

typedef struct MySQLParser_cast_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_cast_data_type_return;

typedef struct MySQLParser_search_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_search_modifier_return;

typedef struct MySQLParser_transcoding_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transcoding_name_return;

typedef struct MySQLParser_interval_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_unit_return;

typedef struct MySQLParser_collation_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_names_return;

typedef struct MySQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_string_literal_return;

typedef struct MySQLParser_number_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_literal_return;

typedef struct MySQLParser_hex_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_hex_literal_return;

typedef struct MySQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_boolean_literal_return;

typedef struct MySQLParser_bit_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_literal_return;

typedef struct MySQLParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_literal_value_return;

typedef struct MySQLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_functionList_return;

typedef struct MySQLParser_number_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_functions_return;

typedef struct MySQLParser_char_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_char_functions_return;

typedef struct MySQLParser_time_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_time_functions_return;

typedef struct MySQLParser_other_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_other_functions_return;

typedef struct MySQLParser_group_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_group_functions_return;

typedef struct MySQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schema_name_return;

typedef struct MySQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_name_return;

typedef struct MySQLParser_engine_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_engine_name_return;

typedef struct MySQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_name_return;

typedef struct MySQLParser_view_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_view_name_return;

typedef struct MySQLParser_parser_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_parser_name_return;

typedef struct MySQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_name_return;

typedef struct MySQLParser_partition_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_name_return;

typedef struct MySQLParser_partition_logical_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_logical_name_return;

typedef struct MySQLParser_constraint_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_constraint_symbol_name_return;

typedef struct MySQLParser_foreign_key_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_foreign_key_symbol_name_return;

typedef struct MySQLParser_collation_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_name_return;

typedef struct MySQLParser_event_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_event_name_return;

typedef struct MySQLParser_user_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_user_name_return;

typedef struct MySQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_name_return;

typedef struct MySQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_procedure_name_return;

typedef struct MySQLParser_server_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_server_name_return;

typedef struct MySQLParser_wrapper_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_wrapper_name_return;

typedef struct MySQLParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alias_return;

typedef struct MySQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_return;

typedef struct MySQLParser_exp_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor1_return;

typedef struct MySQLParser_exp_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor2_return;

typedef struct MySQLParser_exp_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor3_return;

typedef struct MySQLParser_exp_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor4_return;

typedef struct MySQLParser_bool_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bool_primary_return;

typedef struct MySQLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_predicate_return;

typedef struct MySQLParser_bit_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_expr_return;

typedef struct MySQLParser_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor1_return;

typedef struct MySQLParser_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor2_return;

typedef struct MySQLParser_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor3_return;

typedef struct MySQLParser_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor4_return;

typedef struct MySQLParser_factor5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor5_return;

typedef struct MySQLParser_factor6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor6_return;

typedef struct MySQLParser_factor7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor7_return;

typedef struct MySQLParser_simple_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_simple_expr_return;

typedef struct MySQLParser_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_call_return;

typedef struct MySQLParser_case_when_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement_return;

typedef struct MySQLParser_case_when_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement1_return;

typedef struct MySQLParser_case_when_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement2_return;

typedef struct MySQLParser_match_against_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_match_against_statement_return;

typedef struct MySQLParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_spec_return;

typedef struct MySQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_list_return;

typedef struct MySQLParser_interval_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_expr_return;

typedef struct MySQLParser_table_references_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_references_return;

typedef struct MySQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_reference_return;

typedef struct MySQLParser_table_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor1_return;

typedef struct MySQLParser_table_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor2_return;

typedef struct MySQLParser_table_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor3_return;

typedef struct MySQLParser_table_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor4_return;

typedef struct MySQLParser_table_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_atom_return;

typedef struct MySQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_join_condition_return;

typedef struct MySQLParser_index_hint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_list_return;

typedef struct MySQLParser_index_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_options_return;

typedef struct MySQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_return;

typedef struct MySQLParser_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_list_return;

typedef struct MySQLParser_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_clause_return;

typedef struct MySQLParser_partition_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_names_return;

typedef struct MySQLParser_root_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_root_statement_return;

typedef struct MySQLParser_data_manipulation_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_manipulation_statements_return;

typedef struct MySQLParser_data_definition_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_definition_statements_return;

typedef struct MySQLParser_transactional_locking_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transactional_locking_statements_return;

typedef struct MySQLParser_database_admin_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_database_admin_statements_return;

typedef struct MySQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_statement_return;

typedef struct MySQLParser_select_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_expression_return;

typedef struct MySQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_where_clause_return;

typedef struct MySQLParser_groupby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_clause_return;

typedef struct MySQLParser_groupby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_item_return;

typedef struct MySQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_having_clause_return;

typedef struct MySQLParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_clause_return;

typedef struct MySQLParser_orderby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_item_return;

typedef struct MySQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_limit_clause_return;

typedef struct MySQLParser_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_offset_return;

typedef struct MySQLParser_row_count_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_row_count_return;

typedef struct MySQLParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_list_return;

typedef struct MySQLParser_column_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_list_return;

typedef struct MySQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subquery_return;

typedef struct MySQLParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_spec_return;

typedef struct MySQLParser_table_spec_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_spec_list_return;

typedef struct MySQLParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_displayed_column_return;

typedef struct MySQLParser_delete_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_statements_return;

typedef struct MySQLParser_delete_single_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_single_table_statement_return;

typedef struct MySQLParser_delete_multiple_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement1_return;

typedef struct MySQLParser_delete_multiple_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement2_return;

typedef struct MySQLParser_insert_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statements_return;

typedef struct MySQLParser_insert_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_header_return;

typedef struct MySQLParser_insert_subfix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_subfix_return;

typedef struct MySQLParser_insert_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement1_return;

typedef struct MySQLParser_value_list_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_value_list_clause_return;

typedef struct MySQLParser_column_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_value_list_return;

typedef struct MySQLParser_insert_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement2_return;

typedef struct MySQLParser_set_columns_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_columns_cluase_return;

typedef struct MySQLParser_set_column_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_column_cluase_return;

typedef struct MySQLParser_insert_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement3_return;

typedef struct MySQLParser_update_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_update_statements_return;

typedef struct MySQLParser_single_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_single_table_update_statement_return;

typedef struct MySQLParser_multiple_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_multiple_table_update_statement_return;

typedef struct MySQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_call_statement_return;

typedef struct MySQLParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_do_statement_return;

typedef struct MySQLParser_handler_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statements_return;

typedef struct MySQLParser_open_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_open_handler_statement_return;

typedef struct MySQLParser_handler_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement1_return;

typedef struct MySQLParser_handler_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement2_return;

typedef struct MySQLParser_handler_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement3_return;

typedef struct MySQLParser_close_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_close_handler_statement_return;

typedef struct MySQLParser_load_data_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_data_statement_return;

typedef struct MySQLParser_load_xml_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_xml_statement_return;

typedef struct MySQLParser_replace_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_return;

typedef struct MySQLParser_replace_statement_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_header_return;

typedef struct MySQLParser_replace_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement1_return;

typedef struct MySQLParser_replace_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement2_return;

typedef struct MySQLParser_replace_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement3_return;

typedef struct MySQLParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_database_statement_return;

typedef struct MySQLParser_create_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_specification_return;

typedef struct MySQLParser_alter_database_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statements_return;

typedef struct MySQLParser_alter_database_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement1_return;

typedef struct MySQLParser_alter_database_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement2_return;

typedef struct MySQLParser_alter_database_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_specification_return;

typedef struct MySQLParser_drop_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_database_statement_return;

typedef struct MySQLParser_create_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_event_statement_return;

typedef struct MySQLParser_schedule_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schedule_definition_return;

typedef struct MySQLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_return;

typedef struct MySQLParser_timestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_timestamp_return;

typedef struct MySQLParser_alter_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_event_statement_return;

typedef struct MySQLParser_drop_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_event_statement_return;

typedef struct MySQLParser_create_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_index_statement_return;

typedef struct MySQLParser_algorithm_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_algorithm_option_return;

typedef struct MySQLParser_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_option_return;

typedef struct MySQLParser_drop_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_index_statement_return;

typedef struct MySQLParser_create_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_statement_return;

typedef struct MySQLParser_create_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_option_return;

typedef struct MySQLParser_alter_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_statement_return;

typedef struct MySQLParser_alter_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_option_return;

typedef struct MySQLParser_drop_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_server_statement_return;

typedef struct MySQLParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement_return;

typedef struct MySQLParser_create_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement1_return;

typedef struct MySQLParser_create_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement2_return;

typedef struct MySQLParser_create_table_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement3_return;

typedef struct MySQLParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_definition_return;

typedef struct MySQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definition_return;

typedef struct MySQLParser_null_or_notnull_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_null_or_notnull_return;

typedef struct MySQLParser_column_data_type_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_data_type_header_return;

typedef struct MySQLParser_index_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_name_return;

typedef struct MySQLParser_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_definition_return;

typedef struct MySQLParser_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_option_return;

typedef struct MySQLParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_options_return;

typedef struct MySQLParser_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_option_return;

typedef struct MySQLParser_partition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_options_return;

typedef struct MySQLParser_partition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_definition_return;

typedef struct MySQLParser_subpartition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subpartition_definition_return;

typedef struct MySQLParser_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_length_return;

typedef struct MySQLParser_alter_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_statement_return;

typedef struct MySQLParser_alter_table_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_specification_return;

typedef struct MySQLParser_index_column_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_names_return;

typedef struct MySQLParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_type_return;

typedef struct MySQLParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_option_return;

typedef struct MySQLParser_column_definitions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definitions_return;

typedef struct MySQLParser_rename_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rename_table_statement_return;

typedef struct MySQLParser_drop_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_table_statement_return;

typedef struct MySQLParser_truncate_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_truncate_table_statement_return;

typedef struct MySQLParser_create_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_statement_return;

typedef struct MySQLParser_create_view_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_body_return;

typedef struct MySQLParser_alter_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_view_statement_return;

typedef struct MySQLParser_drop_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_view_statement_return;

typedef struct MySQLParser_start_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_start_transaction_statement_return;

typedef struct MySQLParser_transaction_characteristic_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transaction_characteristic_list_return;

typedef struct MySQLParser_transaction_characteristic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transaction_characteristic_return;

typedef struct MySQLParser_begin_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_begin_statement_return;

typedef struct MySQLParser_commit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_commit_statement_return;

typedef struct MySQLParser_rollback_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rollback_statement_return;

typedef struct MySQLParser_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_savepoint_statement_return;

typedef struct MySQLParser_rollback_to_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rollback_to_savepoint_statement_return;

typedef struct MySQLParser_set_autocommit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_autocommit_statement_return;

typedef struct MySQLParser_release_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_release_savepoint_statement_return;

typedef struct MySQLParser_lock_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_table_statement_return;

typedef struct MySQLParser_lock_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_type_list_return;

typedef struct MySQLParser_lock_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_type_return;

typedef struct MySQLParser_unlock_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_unlock_table_statement_return;

typedef struct MySQLParser_set_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_transaction_statement_return;

typedef struct MySQLParser_set_transaction_characteristic_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_transaction_characteristic_list_return;

typedef struct MySQLParser_set_transaction_characteristic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_transaction_characteristic_return;

typedef struct MySQLParser_analyze_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_analyze_table_statement_return;

typedef struct MySQLParser_check_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_check_table_statement_return;

typedef struct MySQLParser_checksum_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_checksum_table_statement_return;

typedef struct MySQLParser_optimize_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_optimize_table_statement_return;

typedef struct MySQLParser_repair_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_repair_table_statement_return;

typedef struct MySQLParser_set_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_statements_return;

typedef struct MySQLParser_set_uservar_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_uservar_statement_return;

typedef struct MySQLParser_set_sysvar_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_sysvar_statement_return;

typedef struct MySQLParser_set_charset_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_charset_statement_return;

typedef struct MySQLParser_set_names_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_names_statement_return;

typedef struct MySQLParser_charset_name_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_charset_name_str_return;

typedef struct MySQLParser_collation_names_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_names_str_return;



/** Context tracking structure for MySQLParser
 */
struct MySQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     MySQLParser_relational_op_return (*relational_op)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_charset_name_return (*charset_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_cast_data_type_return (*cast_data_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_search_modifier_return (*search_modifier)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transcoding_name_return (*transcoding_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_unit_return (*interval_unit)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_names_return (*collation_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_string_literal_return (*string_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_literal_return (*number_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_hex_literal_return (*hex_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_boolean_literal_return (*boolean_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_literal_return (*bit_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_literal_value_return (*literal_value)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_functionList_return (*functionList)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_functions_return (*number_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_char_functions_return (*char_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_time_functions_return (*time_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_other_functions_return (*other_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_group_functions_return (*group_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schema_name_return (*schema_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_name_return (*table_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_engine_name_return (*engine_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_name_return (*column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_view_name_return (*view_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_parser_name_return (*parser_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_name_return (*index_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_name_return (*partition_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_logical_name_return (*partition_logical_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_constraint_symbol_name_return (*constraint_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_foreign_key_symbol_name_return (*foreign_key_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_name_return (*collation_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_event_name_return (*event_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_user_name_return (*user_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_name_return (*function_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_procedure_name_return (*procedure_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_server_name_return (*server_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_wrapper_name_return (*wrapper_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alias_return (*alias)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_return (*expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor1_return (*exp_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor2_return (*exp_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor3_return (*exp_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor4_return (*exp_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bool_primary_return (*bool_primary)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_predicate_return (*predicate)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_expr_return (*bit_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor1_return (*factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor2_return (*factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor3_return (*factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor4_return (*factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor5_return (*factor5)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor6_return (*factor6)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor7_return (*factor7)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_simple_expr_return (*simple_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_call_return (*function_call)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement_return (*case_when_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement1_return (*case_when_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement2_return (*case_when_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_match_against_statement_return (*match_against_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_spec_return (*column_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_list_return (*expression_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_expr_return (*interval_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_references_return (*table_references)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_reference_return (*table_reference)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor1_return (*table_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor2_return (*table_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor3_return (*table_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor4_return (*table_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_atom_return (*table_atom)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_join_condition_return (*join_condition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_list_return (*index_hint_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_options_return (*index_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_return (*index_hint)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_list_return (*index_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_clause_return (*partition_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_names_return (*partition_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_root_statement_return (*root_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_manipulation_statements_return (*data_manipulation_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_definition_statements_return (*data_definition_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transactional_locking_statements_return (*transactional_locking_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_database_admin_statements_return (*database_admin_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_statement_return (*select_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_expression_return (*select_expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_where_clause_return (*where_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_clause_return (*groupby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_item_return (*groupby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_having_clause_return (*having_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_clause_return (*orderby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_item_return (*orderby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_limit_clause_return (*limit_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_offset_return (*offset)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_row_count_return (*row_count)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_list_return (*select_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_list_return (*column_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subquery_return (*subquery)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_spec_return (*table_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_spec_list_return (*table_spec_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_displayed_column_return (*displayed_column)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_statements_return (*delete_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_single_table_statement_return (*delete_single_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement1_return (*delete_multiple_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement2_return (*delete_multiple_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statements_return (*insert_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_header_return (*insert_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_subfix_return (*insert_subfix)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement1_return (*insert_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_value_list_clause_return (*value_list_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_value_list_return (*column_value_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement2_return (*insert_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_columns_cluase_return (*set_columns_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_column_cluase_return (*set_column_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement3_return (*insert_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_update_statements_return (*update_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_single_table_update_statement_return (*single_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_multiple_table_update_statement_return (*multiple_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_call_statement_return (*call_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_do_statement_return (*do_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statements_return (*handler_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_open_handler_statement_return (*open_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement1_return (*handler_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement2_return (*handler_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement3_return (*handler_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_close_handler_statement_return (*close_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_data_statement_return (*load_data_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_xml_statement_return (*load_xml_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_return (*replace_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_header_return (*replace_statement_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement1_return (*replace_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement2_return (*replace_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement3_return (*replace_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_database_statement_return (*create_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_specification_return (*create_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statements_return (*alter_database_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement1_return (*alter_database_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement2_return (*alter_database_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_specification_return (*alter_database_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_database_statement_return (*drop_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_event_statement_return (*create_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schedule_definition_return (*schedule_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_return (*interval)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_timestamp_return (*timestamp)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_event_statement_return (*alter_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_event_statement_return (*drop_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_index_statement_return (*create_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_algorithm_option_return (*algorithm_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_option_return (*lock_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_index_statement_return (*drop_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_statement_return (*create_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_option_return (*create_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_statement_return (*alter_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_option_return (*alter_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_server_statement_return (*drop_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement_return (*create_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement1_return (*create_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement2_return (*create_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement3_return (*create_table_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_definition_return (*create_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definition_return (*column_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_null_or_notnull_return (*null_or_notnull)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_data_type_header_return (*column_data_type_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_name_return (*index_column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_definition_return (*reference_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_option_return (*reference_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_options_return (*table_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_option_return (*table_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_options_return (*partition_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_definition_return (*partition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subpartition_definition_return (*subpartition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_length_return (*length)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_statement_return (*alter_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_specification_return (*alter_table_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_names_return (*index_column_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_type_return (*index_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_option_return (*index_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definitions_return (*column_definitions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rename_table_statement_return (*rename_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_table_statement_return (*drop_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_truncate_table_statement_return (*truncate_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_statement_return (*create_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_body_return (*create_view_body)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_view_statement_return (*alter_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_view_statement_return (*drop_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_start_transaction_statement_return (*start_transaction_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transaction_characteristic_list_return (*transaction_characteristic_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transaction_characteristic_return (*transaction_characteristic)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_begin_statement_return (*begin_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_commit_statement_return (*commit_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rollback_statement_return (*rollback_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_savepoint_statement_return (*savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rollback_to_savepoint_statement_return (*rollback_to_savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_autocommit_statement_return (*set_autocommit_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_release_savepoint_statement_return (*release_savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_table_statement_return (*lock_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_type_list_return (*lock_type_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_type_return (*lock_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_unlock_table_statement_return (*unlock_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_transaction_statement_return (*set_transaction_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_transaction_characteristic_list_return (*set_transaction_characteristic_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_transaction_characteristic_return (*set_transaction_characteristic)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_analyze_table_statement_return (*analyze_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_check_table_statement_return (*check_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_checksum_table_statement_return (*checksum_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_optimize_table_statement_return (*optimize_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_repair_table_statement_return (*repair_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_statements_return (*set_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_uservar_statement_return (*set_uservar_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_sysvar_statement_return (*set_sysvar_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_charset_statement_return (*set_charset_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_names_statement_return (*set_names_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_charset_name_str_return (*charset_name_str)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_names_str_return (*collation_names_str)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred54_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred55_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred268_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred269_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred270_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred271_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred274_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred275_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred278_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred280_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred283_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred285_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred286_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred288_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred289_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred291_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred292_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred293_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred295_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred297_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred301_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred303_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred307_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred324_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred325_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred335_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred340_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred343_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred345_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred349_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred354_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred375_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred442_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred443_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred449_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred456_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred487_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred488_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred492_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred495_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred507_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred876_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred981_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1060_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct MySQLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLParser MySQLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pMySQLParser MySQLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define MASTER_LOG_FILE_SYM      382
#define GEOMETRYCOLLECTION      267
#define D_      7
#define DEGREES      184
#define NAME_CONST      431
#define CASCADED      89
#define PRECISION      488
#define KOI8U      331
#define BACKUP_SYM      63
#define MASTER_SYM      395
#define CONCAT_WS      122
#define E_      8
#define REORGANIZE_SYM      526
#define FETCH_SYM      242
#define RPAREN      754
#define AGGREGATE_SYM      41
#define SQLSTATE_SYM      599
#define REGEXP      518
#define MEDIUMINT      409
#define GET      744
#define MASTER_PASSWORD_SYM      384
#define SHOW      571
#define DIVIDE      736
#define RBRACK      756
#define F_      9
#define ASC      50
#define NEW_SYM      437
#define TRANSACTION      660
#define DAY_MINUTE      171
#define CURDATE      154
#define LEADING      342
#define OCT      449
#define G_      10
#define SL_COMMENT      782
#define PLUGIN_SYM      481
#define USER      694
#define INVOKER_SYM      315
#define SHUTDOWN      572
#define KOI8R      330
#define LOWER      372
#define MAXVALUE_SYM      405
#define GET_FORMAT      269
#define AVG_ROW_LENGTH      62
#define MAX_ROWS      401
#define CONSTRAINT      128
#define OPTIONS_SYM      461
#define SQL_SMALL_RESULT      595
#define TIME_SYM      645
#define LBRACK      757
#define INTERVAL_SYM      313
#define UUID      703
#define CURRENT_USER      156
#define BTREE_SYM      83
#define SYS_VAR_SUBFIX      785
#define SLEEP      579
#define GROUP_SYM      276
#define RANGE_SYM      506
#define BIT_NUM      772
#define LINES      352
#define MULTIPOINT      428
#define SERIALIZABLE_SYM      564
#define SECOND_MICROSECOND      558
#define SQLEXCEPTION_SYM      598
#define ADDDATE      35
#define SINGLE_QUOTE      766
#define CONNECTION_ID      125
#define LEVEL_SYM      348
#define NULL_SYM      446
#define INTEGER_NUM      769
#define FAST_SYM      239
#define COMPRESS      119
#define AVG      61
#define A_      4
#define TRUNCATE      666
#define GROUP_CONCAT      275
#define MINUTE_SECOND      420
#define MASTER_SSL_CIPHER_SYM      391
#define LONGTEXT      369
#define B_      5
#define INSTR      310
#define HEX_DIGIT      771
#define RIGHT      542
#define ATAN2      56
#define GB2312      264
#define MINUS      759
#define SUSPEND_SYM      627
#define QUICK      502
#define SNAPSHOT_SYM      581
#define COLON      750
#define OPTIMIZE      458
#define COLUMN_SYM      112
#define MASTER_SSL_CA_SYM      388
#define DATABASE      159
#define ENCRYPT      213
#define C_      6
#define USE_SYM      693
#define VIEW_SYM      714
#define SQL_BIG_RESULT      590
#define TEXT_STRING      774
#define ARROW      740
#define NATURAL      435
#define DETERMINISTIC_SYM      192
#define FORCE_SYM      252
#define PARTITION_SYM      473
#define LESS_SYM      347
#define EXTENT_SIZE_SYM      236
#define RESET_SYM      533
#define AUTOCOMMIT      59
#define LN      355
#define SQL_CALC_FOUND_ROWS      593
#define INT_SYM      311
#define CONVERT_SYM      134
#define FIND_IN_SET      245
#define BIT_LENGTH      74
#define COUNT      139
#define SUBSTRING_INDEX      623
#define L_      15
#define BENCHMARK      66
#define DATEDIFF      166
#define MASTER_HOST_SYM      381
#define MASTER_SERVER_ID_SYM      387
#define BIT_OR      75
#define XML_SYM      730
#define SWITCHES_SYM      630
#define MEDIUMBLOB      408
#define LATIN1_BIN      336
#define RTREE_SYM      551
#define LPAD      373
#define M_      16
#define MASTER_LOG_POS_SYM      383
#define READS_SYM      510
#define SYS_VAR      784
#define COALESCE      106
#define TINYTEXT      653
#define ON      453
#define SHARED_SYM      569
#define MATCH      397
#define STRAIGHT_JOIN      616
#define FLOOR      249
#define COLLATE_SYM      109
#define COMMITTED_SYM      116
#define NCHAR_SYM      436
#define AGAINST      40
#define ISSUER_SYM      322
#define N_      17
#define PAGE_SYM      470
#define FIELDS_SYM      241
#define SHIFT_RIGHT      747
#define DISCARD      195
#define TO_BASE64      655
#define DOUBLE_SYM      200
#define STDDEV      610
#define CONCURRENT      123
#define PI      480
#define THEN_SYM      643
#define O_      18
#define TIMESTAMP      648
#define UPPER      690
#define DIRECTORY_SYM      193
#define LOAD_FILE      357
#define BIT_AND      73
#define YEAR      732
#define ROW_FORMAT_SYM      547
#define LOOP_SYM      370
#define ADD_SYM      34
#define MOD_SYM      737
#define NAME_SYM      432
#define H_      11
#define UNDO_SYM      676
#define ID      775
#define CROSS      152
#define LENGTH      346
#define IF      292
#define QUERY_SYM      501
#define DEALLOCATE_SYM      177
#define MD5      406
#define EXPORT_SET      234
#define REFERENCES      517
#define OJ_SYM      451
#define COMMIT_SYM      115
#define ELSE_SYM      207
#define PARTITIONS_SYM      475
#define MASTER_SSL_VERIFY_SERVER_CERT      394
#define I_      12
#define SQL_THREAD      597
#define IO_SYM      316
#define WITH      724
#define STATUS_SYM      608
#define IS_SYM      319
#define REDOFILE_SYM      515
#define UTF32      701
#define GBK      265
#define UNHEX      678
#define BEGIN_SYM      65
#define DEFAULT      182
#define J_      13
#define PURGE      499
#define REDO_BUFFER_SIZE_SYM      514
#define DO_SYM      199
#define LAST_INSERT_ID      334
#define STRCMP      617
#define END_SYM      214
#define PROCEDURE      494
#define SUBPARTITION_SYM      620
#define LATIN1_GENERAL_CS      337
#define COMPACT_SYM      117
#define MODIFY_SYM      424
#define ERRORS      219
#define K_      14
#define VARIANCE      711
#define CHANGED      96
#define EACH_SYM      206
#define MINUTE      418
#define COMPRESSED_SYM      120
#define LEAVES      344
#define GREEK      274
#define ASENSITIVE_SYM      52
#define REPEATABLE_SYM      529
#define INSERT_METHOD      308
#define MOD      421
#define BOOL_SYM      80
#define U_      24
#define TRANSACTIONAL_SYM      661
#define PROFILE_SYM      497
#define SONAME_SYM      583
#define AS_SYM      49
#define STDDEV_POP      611
#define EXIT_SYM      231
#define ZEROFILL      735
#define PREV_SYM      491
#define T_      23
#define UTF16      700
#define CONNECTION_SYM      126
#define BY_SYM      84
#define ARMSCII8      48
#define MASTER_SSL_CAPATH_SYM      389
#define MONTHNAME      426
#define STDDEV_SAMP      612
#define ROLLUP_SYM      544
#define CHARACTER_SYM      99
#define TIS620      654
#define YEARWEEK      734
#define IS_USED_LOCK      320
#define LOAD      356
#define MEDIUM_SYM      407
#define TRAILING      659
#define TIMESTAMPADD      649
#define W_      26
#define DEFINER      183
#define ROLLBACK      543
#define RESTORE_SYM      535
#define UNCOMPRESS      672
#define TABLESPACE      636
#define ABS      30
#define INET_ATON      299
#define REAL      511
#define PROFILES_SYM      498
#define DECLARE_SYM      180
#define UNION_SYM      681
#define RADIANS      504
#define V_      25
#define MIN_ROWS      417
#define NONE_SYM      443
#define SEPARATOR_SYM      562
#define REVERSE      540
#define INTEGER_SYM      312
#define TO_DAYS      656
#define TEMPTABLE_SYM      639
#define HEBREW      280
#define REBUILD_SYM      512
#define SQL_BUFFER_RESULT      591
#define PERIOD_ADD      477
#define MICROSECOND      413
#define SUPER_SYM      626
#define ALL_FIELDS      748
#define CONTAINS_SYM      129
#define Q_      20
#define SWAPS_SYM      628
#define LOCKS_SYM      361
#define UNCOMPRESSED_LENGTH      673
#define PARSER_SYM      471
#define BLOCK_SYM      79
#define SUBJECT_SYM      619
#define X509_SYM      728
#define HANDLER_SYM      277
#define EUCKR      223
#define REPLACE      530
#define P_      19
#define NO_WAIT_SYM      440
#define INDEX_SYM      297
#define CP932      147
#define NUMERIC_SYM      447
#define PACK_KEYS_SYM      468
#define MACROMAN      376
#define DES_ENCRYPT      189
#define NVARCHAR_SYM      448
#define FALSE_SYM      238
#define MID      414
#define MEMORY_SYM      411
#define HOUR      286
#define THAN_SYM      642
#define CHANGE      95
#define FLUSH_SYM      250
#define S_      22
#define COLUMNS_SYM      113
#define NEGATION      760
#define BIGINT      69
#define EXPANSION_SYM      233
#define BIT_XOR      77
#define HOUR_MINUTE      288
#define VALUE_SYM      704
#define ORDER_SYM      463
#define UNINSTALL_SYM      680
#define IS_FREE_LOCK      318
#define BIN      70
#define BETWEEN      67
#define R_      21
#define MAX_QUERIES_PER_HOUR      400
#define POINT_SYM      483
#define AUTHORS_SYM      57
#define DOUBLE_QUOTE      767
#define VARYING      712
#define SSL_SYM      602
#define MAKETIME      379
#define DAYNAME      173
#define CASCADE      88
#define FAULTS_SYM      240
#define TYPE_SYM      667
#define FULL      261
#define NAMES_SYM      433
#define SOUNDEX      584
#define INSERT      307
#define PREPARE_SYM      489
#define LOG2      364
#define MASTER_POS_WAIT      386
#define FLOAT_SYM      248
#define EVERY_SYM      226
#define UNDOFILE_SYM      677
#define KEYBCS2      327
#define CONCAT      121
#define OLD_PASSWORD      452
#define UNKNOWN_SYM      684
#define CODE_SYM      107
#define POWER_OP      763
#define VERSION_SYM      713
#define HOUR_SECOND      289
#define PASSWORD      476
#define CASE_SYM      90
#define STR_TO_DATE      615
#define GEOSTD8      268
#define ENCODE      212
#define BACKSLASH      768
#define UJIS      670
#define Y_      28
#define MAKE_SET      377
#define CEILING      93
#define GLOBAL_SYM      271
#define FROM_DAYS      259
#define DECIMAL_SYM      179
#define COPY_SYM      136
#define HP8      290
#define WEEKOFYEAR      719
#define AFTER_SYM      39
#define PROCESSLIST_SYM      496
#define READ_SYM      508
#define ORD      462
#define LOCK      360
#define RELAY_LOG_POS_SYM      520
#define ROWS_SYM      549
#define ML_COMMENT      783
#define X_      27
#define PRESERVE_SYM      490
#define SJIS      577
#define LINESTRING      353
#define SYSDATE      631
#define HIGH_PRIORITY      283
#define ALL      43
#define COERCIBILITY      108
#define OUTFILE      466
#define ASCII_SYM      51
#define DOT      751
#define CURRENT_TIMESTAMP      155
#define RELOAD      523
#define PARTITIONING_SYM      474
#define PARTIAL      472
#define PLUGINS_SYM      482
#define USER_VAR_SUBFIX4      779
#define ISOLATION      321
#define USER_VAR_SUBFIX3      778
#define SIMPLE_SYM      575
#define USER_VAR_SUBFIX2      777
#define USER_VAR_SUBFIX1      776
#define WHILE_SYM      723
#define XOR      731
#define CRC32      149
#define BYTE_SYM      85
#define MUTEX_SYM      430
#define HOST_SYM      284
#define VALUES      705
#define INDEXES      298
#define DYNAMIC_SYM      205
#define ROW_SYM      548
#define ENCLOSED      211
#define DUPLICATE_SYM      204
#define EXECUTE_SYM      228
#define LINEAR_SYM      351
#define HELP_SYM      281
#define ANY      47
#define BEFORE_SYM      64
#define Z_      29
#define ESCAPE_SYM      220
#define CONTRIBUTORS_SYM      132
#define CONTEXT_SYM      130
#define CONV      133
#define VARIABLES      710
#define SIGNED_SYM      574
#define FIXED_SYM      247
#define KEYS      328
#define HASH_SYM      278
#define BINARY      71
#define CAST_SYM      91
#define MAX_SYM      398
#define ENGINE_SYM      216
#define MASTER_CONNECT_RETRY      380
#define MAX_USER_CONNECTIONS_SYM      404
#define RPAD      550
#define SMALLINT      580
#define INSENSITIVE_SYM      306
#define DATAFILE_SYM      160
#define LIKE_SYM      349
#define LAST_DAY      333
#define INNER_SYM      303
#define MULTILINESTRING      427
#define RELAY_LOG_FILE_SYM      519
#define CACHE_SYM      86
#define CREATE      150
#define SUBPARTITIONS_SYM      621
#define RETURN_SYM      538
#define INITIAL_SIZE_SYM      302
#define TIME_TO_SEC      646
#define SPATIAL_SYM      588
#define SQL_CACHE_SYM      592
#define SQLWARNING_SYM      600
#define ACOS      32
#define CPU_SYM      148
#define LATIN2      339
#define LATIN1      338
#define LATIN7      341
#define HEX_DIGIT_FRAGMENT      770
#define DAYOFYEAR      176
#define POWER      487
#define LATIN5      340
#define GEOMETRY_SYM      266
#define DUMPFILE      203
#define RESTRICT      536
#define DES_KEY_FILE      190
#define INSTALL_SYM      309
#define LOW_PRIORITY      371
#define ASIN      53
#define DATE_SUB      164
#define SYSTEM_USER      632
#define UTF8      702
#define LEAVE_SYM      343
#define ALTER      44
#define SENSITIVE_SYM      561
#define NODEGROUP_SYM      442
#define TIME_FORMAT      644
#define LONGBLOB      368
#define TABLE      633
#define VARCHAR      709
#define SESSION_USER      567
#define SUM      625
#define ITERATE_SYM      323
#define MULTIPOLYGON      429
#define WHITE_SPACE      781
#define CHAR_LENGTH      98
#define BITAND      762
#define UNIX_TIMESTAMP      683
#define ANALYZE_SYM      45
#define EVENTS_SYM      225
#define STRING_SYM      618
#define LEFT      345
#define BIT_SYM      76
#define EQ_SYM      741
#define STD      609
#define PLUS      758
#define OUTER      465
#define CP866      146
#define MASTER_USER_SYM      396
#define MINUTE_MICROSECOND      419
#define REMOVE_SYM      524
#define COMPLETION_SYM      118
#define HAVING      279
#define CHECK_SYM      101
#define SEMI      749
#define NOT_EQ      742
#define VERTBAR      761
#define CP852      145
#define DATE_SYM      165
#define EXTENDED_SYM      235
#define STOP_SYM      613
#define CP850      144
#define FROM_BASE64      258
#define FORMAT      254
#define MASTER_PORT_SYM      385
#define CLOSE_SYM      105
#define WEEK      717
#define TYPES_SYM      668
#define UNSIGNED_SYM      686
#define POLYGON      484
#define CHAR      97
#define TERMINATED      640
#define CURTIME      158
#define HOSTS_SYM      285
#define QUOTE      503
#define ENDS_SYM      215
#define REQUIRE_SYM      532
#define QUARTER      500
#define TABLE_CHECKSUM_SYM      634
#define SWE7      629
#define TAN      637
#define PERIOD_DIFF      478
#define HOUR_MICROSECOND      287
#define AND_SYM      739
#define BIG5      68
#define SELECT      560
#define INTO      314
#define UNCOMMITTED_SYM      671
#define DELAYED_SYM      186
#define MAX_CONNECTIONS_PER_HOUR      399
#define LTRIM      374
#define INOUT_SYM      304
#define DAY_MICROSECOND      170
#define SECOND      557
#define FILE_SYM      244
#define LOG10      363
#define UNICODE_SYM      679
#define SQL_NO_CACHE_SYM      594
#define NO_WRITE_TO_BINLOG      441
#define SPECIFIC_SYM      589
#define CIPHER_SYM      103
#define FOR_SYM      251
#define MAX_UPDATES_PER_HOUR      403
#define TABLES      635
#define SHIFT_LEFT      746
#define DUAL_SYM      202
#define TRIGGERS_SYM      663
#define DELETE_SYM      187
#define FOUND_ROWS      255
#define ADDTIME      36
#define MODE_SYM      422
#define PORT_SYM      485
#define ROUND      545
#define ONE_SYM      455
#define KEY_BLOCK_SIZE      325
#define GET_LOCK      270
#define IN_SYM      296
#define DISTINCTROW      198
#define STARTS_SYM      607
#define WHERE      722
#define VAR_SAMP      707
#define ROUTINE_SYM      546
#define UTC_TIMESTAMP      698
#define LIMIT      350
#define AND_KEY_SYM      46
#define SPACE      587
#define ENABLE_SYM      210
#define DATA_SYM      161
#define USAGE      691
#define YEAR_MONTH      733
#define MACCE      375
#define HEX      282
#define MASTER_SSL_KEY_SYM      392
#define COMMA      752
#define OFFSET_SYM      450
#define READ_WRITE_SYM      509
#define WAIT_SYM      715
#define AT_SYM      54
#define CHECKSUM_SYM      102
#define USE_FRM      692
#define FULLTEXT_SYM      262
#define EUCJPMS      222
#define GRANT      272
#define VARBINARY      708
#define OPEN_SYM      457
#define DATETIME      167
#define UNLOCK_SYM      685
#define LONG_SYM      367
#define ONLY_SYM      456
#define SOUNDS_SYM      585
#define DEC8      178
#define MODIFIES_SYM      423
#define SQRT      601
#define ACCESSIBLE_SYM      31
#define SUBSTRING      622
#define DAY_SECOND      172
#define BLOB_SYM      78
#define LOCATE      359
#define CROSECOND      151
#define MIGRATE_SYM      415
#define RESOURCES      534
#define INFILE      301
#define LET      743
#define IGNORE_SYM      294
#define DES_DECRYPT      188
#define UTF16LE      699
#define USING_SYM      695
#define LOCAL_SYM      358
#define UNIQUE_SYM      682
#define NOW      445
#define FOREIGN      253
#define EOF      -1
#define PRIVILEGES      493
#define ELSIF_SYM      208
#define ACTION      33
#define MONTH      425
#define UNDEFINED_SYM      674
#define UTC_DATE      696
#define IDENTIFIED_SYM      291
#define USER_VAR      780
#define IMPORT      295
#define WEIGHT_STRING      720
#define SIN      576
#define NO_SYM      439
#define STORAGE_SYM      614
#define AUTO_INCREMENT      58
#define TRUE_SYM      665
#define TEXT_SYM      641
#define SERIAL_SYM      563
#define TINYBLOB      651
#define DAYOFWEEK      175
#define WRAPPER_SYM      726
#define LOGFILE_SYM      365
#define DELAY_KEY_WRITE_SYM      185
#define SLAVE      578
#define SHARE_SYM      570
#define ELT      209
#define PRIMARY_SYM      492
#define AES_DECRYPT      37
#define MEDIUMTEXT      410
#define MERGE_SYM      412
#define UPGRADE_SYM      689
#define KILL_SYM      329
#define LANGUAGE      332
#define CALL_SYM      87
#define MAKEDATE      378
#define REAL_NUMBER      773
#define GRANTS      273
#define TRIM      664
#define REPEAT      528
#define UTC_TIME      697
#define MASTER_SSL_SYM      393
#define DISABLE_SYM      194
#define STATS_AUTO_RECALC      605
#define CONVERT_TZ      135
#define RENAME      525
#define REPLICATION      531
#define OPTION      459
#define JOIN_SYM      324
#define START_SYM      603
#define EXCLUSIVE_SYM      229
#define OPTIONALLY      460
#define OUT_SYM      464
#define RESUME_SYM      537
#define NEXT_SYM      438
#define ENGINES_SYM      217
#define CHARSET      100
#define SOCKET_SYM      582
#define DAYOFMONTH      174
#define BINLOG_SYM      72
#define ASTERISK      753
#define LPAREN      755
#define RECOVER_SYM      513
#define DAY_HOUR      169
#define COLLATION      110
#define RAND      505
#define TIMEDIFF      647
#define FROM_UNIXTIME      260
#define EXISTS      230
#define INET_NTOA      300
#define RETURNS_SYM      539
#define UCS2      669
#define WRITE_SYM      727
#define LOGS_SYM      366
#define SESSION_SYM      566
#define TO_SYM      658
#define CONSISTENT_SYM      127
#define REDUNDANT_SYM      516
#define CLIENT_SYM      104
#define SCHEMA      555
#define ENUM      218
#define DROP      201
#define MASTER_SSL_CERT_SYM      390
#define DISK_SYM      196
#define REVOKE      541
#define PROCESS      495
#define XA_SYM      729
#define SIGN      573
#define UNTIL_SYM      687
#define LOG      362
#define OWNER_SYM      467
#define OR_SYM      738
#define MIN_SYM      416
#define TO_SECONDS      657
#define REPAIR      527
#define WEEKDAY      718
#define COT      138
#define POW      486
#define SECURITY_SYM      559
#define EXP      232
#define DATE_FORMAT      163
#define COS      137
#define EVENT_SYM      224
#define BOOLEAN_SYM      81
#define SAVEPOINT      553
#define FIRST_SYM      246
#define BOTH      82
#define AES_ENCRYPT      38
#define TINYINT      652
#define ATAN      55
#define NOT_SYM      444
#define COMMENT_SYM      114
#define CP1256      142
#define RELEASE_SYM      522
#define CP1251      141
#define WARNINGS      716
#define CP1250      140
#define FUNCTION_SYM      263
#define CURSOR_SYM      157
#define LIST_SYM      354
#define DATE_ADD      162
#define UNDO_BUFFER_SIZE_SYM      675
#define CP1257      143
#define COLUMN_FORMAT      111
#define CONDITION_SYM      124
#define SERVER_SYM      565
#define VAR_POP      706
#define TIMESTAMPDIFF      650
#define TRIGGER_SYM      662
#define FIELD      243
#define SUBTIME      624
#define ESCAPED      221
#define FROM      257
#define DISTINCT      197
#define TEMPORARY      638
#define RTRIM      552
#define PAGE_CHECKSUM_SYM      469
#define SEC_TO_TIME      556
#define FOUND_SYM      256
#define GTH      764
#define ONE_SHOT_SYM      454
#define UPDATE      688
#define AUTOEXTEND_SIZE_SYM      60
#define SCHEDULE_SYM      554
#define RELEASE_LOCK      521
#define INPLACE_SYM      305
#define ALGORITHM_SYM      42
#define DAY_SYM      168
#define EXTRACT      237
#define CUBE_SYM      153
#define EXCHANGE_SYM      227
#define STATS_PERSISTENT      606
#define WORK_SYM      725
#define SET_VAR      745
#define IFNULL      293
#define MAX_SIZE_SYM      402
#define LAST_SYM      335
#define NATIONAL_SYM      434
#define KEY_SYM      326
#define PHASE_SYM      479
#define LTH      765
#define IPC_SYM      317
#define SET_SYM      568
#define DECODE      181
#define STARTING      604
#define CEIL      92
#define CHAIN_SYM      94
#define READ_ONLY_SYM      507
#define DESC      191
#define WHEN_SYM      721
#define SQL_SYM      596
#define CONTINUE_SYM      131
#define SOURCE_SYM      586
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
