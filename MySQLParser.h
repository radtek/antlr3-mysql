/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2015-01-19 20:42:37
 *     -                for the parser : MySQLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser MySQLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLParser, which is returned from a call to MySQLParserNew().
 *
 * The methods in pMySQLParser are  as follows:
 *
 *  - MySQLParser_root_statement_return      pMySQLParser->root_statement(pMySQLParser)
 *  - MySQLParser_data_manipulation_statements_return      pMySQLParser->data_manipulation_statements(pMySQLParser)
 *  - MySQLParser_data_definition_statements_return      pMySQLParser->data_definition_statements(pMySQLParser)
 *  - MySQLParser_transactional_locking_statements_return      pMySQLParser->transactional_locking_statements(pMySQLParser)
 *  - MySQLParser_database_admin_statements_return      pMySQLParser->database_admin_statements(pMySQLParser)
 *  - MySQLParser_utility_statements_return      pMySQLParser->utility_statements(pMySQLParser)
 *  - MySQLParser_expression_list_return      pMySQLParser->expression_list(pMySQLParser)
 *  - MySQLParser_expression_return      pMySQLParser->expression(pMySQLParser)
 *  - MySQLParser_exp_factor1_return      pMySQLParser->exp_factor1(pMySQLParser)
 *  - MySQLParser_exp_factor2_return      pMySQLParser->exp_factor2(pMySQLParser)
 *  - MySQLParser_exp_factor3_return      pMySQLParser->exp_factor3(pMySQLParser)
 *  - MySQLParser_exp_factor4_return      pMySQLParser->exp_factor4(pMySQLParser)
 *  - MySQLParser_bool_primary_return      pMySQLParser->bool_primary(pMySQLParser)
 *  - MySQLParser_predicate_return      pMySQLParser->predicate(pMySQLParser)
 *  - MySQLParser_relational_op_return      pMySQLParser->relational_op(pMySQLParser)
 *  - MySQLParser_bit_expr_return      pMySQLParser->bit_expr(pMySQLParser)
 *  - MySQLParser_factor1_return      pMySQLParser->factor1(pMySQLParser)
 *  - MySQLParser_factor2_return      pMySQLParser->factor2(pMySQLParser)
 *  - MySQLParser_factor3_return      pMySQLParser->factor3(pMySQLParser)
 *  - MySQLParser_factor4_return      pMySQLParser->factor4(pMySQLParser)
 *  - MySQLParser_factor5_return      pMySQLParser->factor5(pMySQLParser)
 *  - MySQLParser_factor6_return      pMySQLParser->factor6(pMySQLParser)
 *  - MySQLParser_factor7_return      pMySQLParser->factor7(pMySQLParser)
 *  - MySQLParser_simple_expr_return      pMySQLParser->simple_expr(pMySQLParser)
 *  - MySQLParser_search_modifier_return      pMySQLParser->search_modifier(pMySQLParser)
 *  - MySQLParser_case_when_statement_return      pMySQLParser->case_when_statement(pMySQLParser)
 *  - MySQLParser_case_when_statement1_return      pMySQLParser->case_when_statement1(pMySQLParser)
 *  - MySQLParser_case_when_statement2_return      pMySQLParser->case_when_statement2(pMySQLParser)
 *  - MySQLParser_match_against_statement_return      pMySQLParser->match_against_statement(pMySQLParser)
 *  - MySQLParser_interval_expr_return      pMySQLParser->interval_expr(pMySQLParser)
 *  - MySQLParser_interval_unit_return      pMySQLParser->interval_unit(pMySQLParser)
 *  - MySQLParser_functionList_return      pMySQLParser->functionList(pMySQLParser)
 *  - MySQLParser_function_call_return      pMySQLParser->function_call(pMySQLParser)
 *  - MySQLParser_number_functions_return      pMySQLParser->number_functions(pMySQLParser)
 *  - MySQLParser_char_functions_return      pMySQLParser->char_functions(pMySQLParser)
 *  - MySQLParser_time_functions_return      pMySQLParser->time_functions(pMySQLParser)
 *  - MySQLParser_other_functions_return      pMySQLParser->other_functions(pMySQLParser)
 *  - MySQLParser_group_functions_return      pMySQLParser->group_functions(pMySQLParser)
 *  - MySQLParser_cast_data_type_return      pMySQLParser->cast_data_type(pMySQLParser)
 *  - MySQLParser_column_spec_return      pMySQLParser->column_spec(pMySQLParser)
 *  - MySQLParser_schema_name_return      pMySQLParser->schema_name(pMySQLParser)
 *  - MySQLParser_table_name_return      pMySQLParser->table_name(pMySQLParser)
 *  - MySQLParser_engine_name_return      pMySQLParser->engine_name(pMySQLParser)
 *  - MySQLParser_column_name_return      pMySQLParser->column_name(pMySQLParser)
 *  - MySQLParser_view_name_return      pMySQLParser->view_name(pMySQLParser)
 *  - MySQLParser_parser_name_return      pMySQLParser->parser_name(pMySQLParser)
 *  - MySQLParser_index_name_return      pMySQLParser->index_name(pMySQLParser)
 *  - MySQLParser_partition_name_return      pMySQLParser->partition_name(pMySQLParser)
 *  - MySQLParser_partition_logical_name_return      pMySQLParser->partition_logical_name(pMySQLParser)
 *  - MySQLParser_constraint_symbol_name_return      pMySQLParser->constraint_symbol_name(pMySQLParser)
 *  - MySQLParser_foreign_key_symbol_name_return      pMySQLParser->foreign_key_symbol_name(pMySQLParser)
 *  - MySQLParser_collation_name_return      pMySQLParser->collation_name(pMySQLParser)
 *  - MySQLParser_event_name_return      pMySQLParser->event_name(pMySQLParser)
 *  - MySQLParser_user_name_return      pMySQLParser->user_name(pMySQLParser)
 *  - MySQLParser_function_name_return      pMySQLParser->function_name(pMySQLParser)
 *  - MySQLParser_procedure_name_return      pMySQLParser->procedure_name(pMySQLParser)
 *  - MySQLParser_server_name_return      pMySQLParser->server_name(pMySQLParser)
 *  - MySQLParser_wrapper_name_return      pMySQLParser->wrapper_name(pMySQLParser)
 *  - MySQLParser_alias_return      pMySQLParser->alias(pMySQLParser)
 *  - MySQLParser_trigger_name_return      pMySQLParser->trigger_name(pMySQLParser)
 *  - MySQLParser_string_literal_return      pMySQLParser->string_literal(pMySQLParser)
 *  - MySQLParser_number_literal_return      pMySQLParser->number_literal(pMySQLParser)
 *  - MySQLParser_hex_literal_return      pMySQLParser->hex_literal(pMySQLParser)
 *  - MySQLParser_boolean_literal_return      pMySQLParser->boolean_literal(pMySQLParser)
 *  - MySQLParser_bit_literal_return      pMySQLParser->bit_literal(pMySQLParser)
 *  - MySQLParser_null_literal_return      pMySQLParser->null_literal(pMySQLParser)
 *  - MySQLParser_literal_value_return      pMySQLParser->literal_value(pMySQLParser)
 *  - MySQLParser_table_references_return      pMySQLParser->table_references(pMySQLParser)
 *  - MySQLParser_table_reference_return      pMySQLParser->table_reference(pMySQLParser)
 *  - MySQLParser_table_factor1_return      pMySQLParser->table_factor1(pMySQLParser)
 *  - MySQLParser_table_factor2_return      pMySQLParser->table_factor2(pMySQLParser)
 *  - MySQLParser_table_factor3_return      pMySQLParser->table_factor3(pMySQLParser)
 *  - MySQLParser_table_factor4_return      pMySQLParser->table_factor4(pMySQLParser)
 *  - MySQLParser_table_atom_return      pMySQLParser->table_atom(pMySQLParser)
 *  - MySQLParser_join_condition_return      pMySQLParser->join_condition(pMySQLParser)
 *  - MySQLParser_index_hint_list_return      pMySQLParser->index_hint_list(pMySQLParser)
 *  - MySQLParser_index_options_return      pMySQLParser->index_options(pMySQLParser)
 *  - MySQLParser_index_hint_return      pMySQLParser->index_hint(pMySQLParser)
 *  - MySQLParser_index_list_return      pMySQLParser->index_list(pMySQLParser)
 *  - MySQLParser_partition_clause_return      pMySQLParser->partition_clause(pMySQLParser)
 *  - MySQLParser_partition_names_return      pMySQLParser->partition_names(pMySQLParser)
 *  - MySQLParser_select_statement_return      pMySQLParser->select_statement(pMySQLParser)
 *  - MySQLParser_select_expression_return      pMySQLParser->select_expression(pMySQLParser)
 *  - MySQLParser_where_clause_return      pMySQLParser->where_clause(pMySQLParser)
 *  - MySQLParser_groupby_clause_return      pMySQLParser->groupby_clause(pMySQLParser)
 *  - MySQLParser_groupby_item_return      pMySQLParser->groupby_item(pMySQLParser)
 *  - MySQLParser_having_clause_return      pMySQLParser->having_clause(pMySQLParser)
 *  - MySQLParser_orderby_clause_return      pMySQLParser->orderby_clause(pMySQLParser)
 *  - MySQLParser_orderby_item_return      pMySQLParser->orderby_item(pMySQLParser)
 *  - MySQLParser_limit_clause_return      pMySQLParser->limit_clause(pMySQLParser)
 *  - MySQLParser_offset_return      pMySQLParser->offset(pMySQLParser)
 *  - MySQLParser_row_count_return      pMySQLParser->row_count(pMySQLParser)
 *  - MySQLParser_select_list_return      pMySQLParser->select_list(pMySQLParser)
 *  - MySQLParser_column_list_return      pMySQLParser->column_list(pMySQLParser)
 *  - MySQLParser_subquery_return      pMySQLParser->subquery(pMySQLParser)
 *  - MySQLParser_table_spec_return      pMySQLParser->table_spec(pMySQLParser)
 *  - MySQLParser_table_spec_list_return      pMySQLParser->table_spec_list(pMySQLParser)
 *  - MySQLParser_displayed_column_return      pMySQLParser->displayed_column(pMySQLParser)
 *  - MySQLParser_delete_statements_return      pMySQLParser->delete_statements(pMySQLParser)
 *  - MySQLParser_delete_single_table_statement_return      pMySQLParser->delete_single_table_statement(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement1_return      pMySQLParser->delete_multiple_table_statement1(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement2_return      pMySQLParser->delete_multiple_table_statement2(pMySQLParser)
 *  - MySQLParser_insert_statements_return      pMySQLParser->insert_statements(pMySQLParser)
 *  - MySQLParser_insert_header_return      pMySQLParser->insert_header(pMySQLParser)
 *  - MySQLParser_insert_subfix_return      pMySQLParser->insert_subfix(pMySQLParser)
 *  - MySQLParser_insert_statement1_return      pMySQLParser->insert_statement1(pMySQLParser)
 *  - MySQLParser_value_list_clause_return      pMySQLParser->value_list_clause(pMySQLParser)
 *  - MySQLParser_column_value_list_return      pMySQLParser->column_value_list(pMySQLParser)
 *  - MySQLParser_insert_statement2_return      pMySQLParser->insert_statement2(pMySQLParser)
 *  - MySQLParser_set_columns_cluase_return      pMySQLParser->set_columns_cluase(pMySQLParser)
 *  - MySQLParser_set_column_cluase_return      pMySQLParser->set_column_cluase(pMySQLParser)
 *  - MySQLParser_insert_statement3_return      pMySQLParser->insert_statement3(pMySQLParser)
 *  - MySQLParser_update_statements_return      pMySQLParser->update_statements(pMySQLParser)
 *  - MySQLParser_single_table_update_statement_return      pMySQLParser->single_table_update_statement(pMySQLParser)
 *  - MySQLParser_multiple_table_update_statement_return      pMySQLParser->multiple_table_update_statement(pMySQLParser)
 *  - MySQLParser_call_statement_return      pMySQLParser->call_statement(pMySQLParser)
 *  - MySQLParser_do_statement_return      pMySQLParser->do_statement(pMySQLParser)
 *  - MySQLParser_handler_statements_return      pMySQLParser->handler_statements(pMySQLParser)
 *  - MySQLParser_open_handler_statement_return      pMySQLParser->open_handler_statement(pMySQLParser)
 *  - MySQLParser_handler_statement1_return      pMySQLParser->handler_statement1(pMySQLParser)
 *  - MySQLParser_handler_statement2_return      pMySQLParser->handler_statement2(pMySQLParser)
 *  - MySQLParser_handler_statement3_return      pMySQLParser->handler_statement3(pMySQLParser)
 *  - MySQLParser_close_handler_statement_return      pMySQLParser->close_handler_statement(pMySQLParser)
 *  - MySQLParser_load_data_statement_return      pMySQLParser->load_data_statement(pMySQLParser)
 *  - MySQLParser_load_xml_statement_return      pMySQLParser->load_xml_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_return      pMySQLParser->replace_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_header_return      pMySQLParser->replace_statement_header(pMySQLParser)
 *  - MySQLParser_replace_statement1_return      pMySQLParser->replace_statement1(pMySQLParser)
 *  - MySQLParser_replace_statement2_return      pMySQLParser->replace_statement2(pMySQLParser)
 *  - MySQLParser_replace_statement3_return      pMySQLParser->replace_statement3(pMySQLParser)
 *  - MySQLParser_create_database_statement_return      pMySQLParser->create_database_statement(pMySQLParser)
 *  - MySQLParser_create_specification_return      pMySQLParser->create_specification(pMySQLParser)
 *  - MySQLParser_alter_database_statements_return      pMySQLParser->alter_database_statements(pMySQLParser)
 *  - MySQLParser_alter_database_statement1_return      pMySQLParser->alter_database_statement1(pMySQLParser)
 *  - MySQLParser_alter_database_statement2_return      pMySQLParser->alter_database_statement2(pMySQLParser)
 *  - MySQLParser_alter_database_specification_return      pMySQLParser->alter_database_specification(pMySQLParser)
 *  - MySQLParser_drop_database_statement_return      pMySQLParser->drop_database_statement(pMySQLParser)
 *  - MySQLParser_create_event_statement_return      pMySQLParser->create_event_statement(pMySQLParser)
 *  - MySQLParser_schedule_definition_return      pMySQLParser->schedule_definition(pMySQLParser)
 *  - MySQLParser_interval_return      pMySQLParser->interval(pMySQLParser)
 *  - MySQLParser_timestamp_return      pMySQLParser->timestamp(pMySQLParser)
 *  - MySQLParser_alter_event_statement_return      pMySQLParser->alter_event_statement(pMySQLParser)
 *  - MySQLParser_drop_event_statement_return      pMySQLParser->drop_event_statement(pMySQLParser)
 *  - MySQLParser_create_index_statement_return      pMySQLParser->create_index_statement(pMySQLParser)
 *  - MySQLParser_algorithm_option_return      pMySQLParser->algorithm_option(pMySQLParser)
 *  - MySQLParser_lock_option_return      pMySQLParser->lock_option(pMySQLParser)
 *  - MySQLParser_drop_index_statement_return      pMySQLParser->drop_index_statement(pMySQLParser)
 *  - MySQLParser_create_server_statement_return      pMySQLParser->create_server_statement(pMySQLParser)
 *  - MySQLParser_create_server_option_return      pMySQLParser->create_server_option(pMySQLParser)
 *  - MySQLParser_alter_server_statement_return      pMySQLParser->alter_server_statement(pMySQLParser)
 *  - MySQLParser_alter_server_option_return      pMySQLParser->alter_server_option(pMySQLParser)
 *  - MySQLParser_drop_server_statement_return      pMySQLParser->drop_server_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement_return      pMySQLParser->create_table_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement1_return      pMySQLParser->create_table_statement1(pMySQLParser)
 *  - MySQLParser_create_table_statement2_return      pMySQLParser->create_table_statement2(pMySQLParser)
 *  - MySQLParser_create_table_statement3_return      pMySQLParser->create_table_statement3(pMySQLParser)
 *  - MySQLParser_create_definition_return      pMySQLParser->create_definition(pMySQLParser)
 *  - MySQLParser_column_definition_return      pMySQLParser->column_definition(pMySQLParser)
 *  - MySQLParser_null_or_notnull_return      pMySQLParser->null_or_notnull(pMySQLParser)
 *  - MySQLParser_column_data_type_header_return      pMySQLParser->column_data_type_header(pMySQLParser)
 *  - MySQLParser_index_column_name_return      pMySQLParser->index_column_name(pMySQLParser)
 *  - MySQLParser_reference_definition_return      pMySQLParser->reference_definition(pMySQLParser)
 *  - MySQLParser_reference_option_return      pMySQLParser->reference_option(pMySQLParser)
 *  - MySQLParser_table_options_return      pMySQLParser->table_options(pMySQLParser)
 *  - MySQLParser_table_option_return      pMySQLParser->table_option(pMySQLParser)
 *  - MySQLParser_partition_options_return      pMySQLParser->partition_options(pMySQLParser)
 *  - MySQLParser_partition_definition_return      pMySQLParser->partition_definition(pMySQLParser)
 *  - MySQLParser_subpartition_definition_return      pMySQLParser->subpartition_definition(pMySQLParser)
 *  - MySQLParser_length_return      pMySQLParser->length(pMySQLParser)
 *  - MySQLParser_alter_table_statement_return      pMySQLParser->alter_table_statement(pMySQLParser)
 *  - MySQLParser_alter_table_specification_return      pMySQLParser->alter_table_specification(pMySQLParser)
 *  - MySQLParser_index_column_names_return      pMySQLParser->index_column_names(pMySQLParser)
 *  - MySQLParser_index_type_return      pMySQLParser->index_type(pMySQLParser)
 *  - MySQLParser_index_option_return      pMySQLParser->index_option(pMySQLParser)
 *  - MySQLParser_column_definitions_return      pMySQLParser->column_definitions(pMySQLParser)
 *  - MySQLParser_rename_table_statement_return      pMySQLParser->rename_table_statement(pMySQLParser)
 *  - MySQLParser_drop_table_statement_return      pMySQLParser->drop_table_statement(pMySQLParser)
 *  - MySQLParser_truncate_table_statement_return      pMySQLParser->truncate_table_statement(pMySQLParser)
 *  - MySQLParser_create_view_statement_return      pMySQLParser->create_view_statement(pMySQLParser)
 *  - MySQLParser_create_view_body_return      pMySQLParser->create_view_body(pMySQLParser)
 *  - MySQLParser_alter_view_statement_return      pMySQLParser->alter_view_statement(pMySQLParser)
 *  - MySQLParser_drop_view_statement_return      pMySQLParser->drop_view_statement(pMySQLParser)
 *  - MySQLParser_show_binary_logs_statement_return      pMySQLParser->show_binary_logs_statement(pMySQLParser)
 *  - MySQLParser_show_binlog_events_statement_return      pMySQLParser->show_binlog_events_statement(pMySQLParser)
 *  - MySQLParser_show_character_set_statement_return      pMySQLParser->show_character_set_statement(pMySQLParser)
 *  - MySQLParser_show_collation_statement_return      pMySQLParser->show_collation_statement(pMySQLParser)
 *  - MySQLParser_show_columns_statement_return      pMySQLParser->show_columns_statement(pMySQLParser)
 *  - MySQLParser_show_create_database_statement_return      pMySQLParser->show_create_database_statement(pMySQLParser)
 *  - MySQLParser_show_create_statements_return      pMySQLParser->show_create_statements(pMySQLParser)
 *  - MySQLParser_show_databases_statement_return      pMySQLParser->show_databases_statement(pMySQLParser)
 *  - MySQLParser_show_engine_statement_return      pMySQLParser->show_engine_statement(pMySQLParser)
 *  - MySQLParser_show_engines_statement_return      pMySQLParser->show_engines_statement(pMySQLParser)
 *  - MySQLParser_show_wes_statement_return      pMySQLParser->show_wes_statement(pMySQLParser)
 *  - MySQLParser_show_events_statement_return      pMySQLParser->show_events_statement(pMySQLParser)
 *  - MySQLParser_show_function_code_statement_return      pMySQLParser->show_function_code_statement(pMySQLParser)
 *  - MySQLParser_show_function_status_statement_return      pMySQLParser->show_function_status_statement(pMySQLParser)
 *  - MySQLParser_show_index_statement_return      pMySQLParser->show_index_statement(pMySQLParser)
 *  - MySQLParser_show_master_status_statement_return      pMySQLParser->show_master_status_statement(pMySQLParser)
 *  - MySQLParser_show_open_tables_statement_return      pMySQLParser->show_open_tables_statement(pMySQLParser)
 *  - MySQLParser_show_plugins_statement_return      pMySQLParser->show_plugins_statement(pMySQLParser)
 *  - MySQLParser_show_privileges_statement_return      pMySQLParser->show_privileges_statement(pMySQLParser)
 *  - MySQLParser_show_procedure_code_statement_return      pMySQLParser->show_procedure_code_statement(pMySQLParser)
 *  - MySQLParser_show_procedure_status_statement_return      pMySQLParser->show_procedure_status_statement(pMySQLParser)
 *  - MySQLParser_show_processlist_statement_return      pMySQLParser->show_processlist_statement(pMySQLParser)
 *  - MySQLParser_show_relaylog_events_statement_return      pMySQLParser->show_relaylog_events_statement(pMySQLParser)
 *  - MySQLParser_show_slave_hosts_statement_return      pMySQLParser->show_slave_hosts_statement(pMySQLParser)
 *  - MySQLParser_show_slave_status_statement_return      pMySQLParser->show_slave_status_statement(pMySQLParser)
 *  - MySQLParser_show_status_statement_return      pMySQLParser->show_status_statement(pMySQLParser)
 *  - MySQLParser_show_table_status_statement_return      pMySQLParser->show_table_status_statement(pMySQLParser)
 *  - MySQLParser_show_tables_statement_return      pMySQLParser->show_tables_statement(pMySQLParser)
 *  - MySQLParser_show_triggers_statement_return      pMySQLParser->show_triggers_statement(pMySQLParser)
 *  - MySQLParser_show_variables_statement_return      pMySQLParser->show_variables_statement(pMySQLParser)
 *  - MySQLParser_like_or_where_return      pMySQLParser->like_or_where(pMySQLParser)
 *  - MySQLParser_binlog_statement_return      pMySQLParser->binlog_statement(pMySQLParser)
 *  - MySQLParser_start_transaction_statement_return      pMySQLParser->start_transaction_statement(pMySQLParser)
 *  - MySQLParser_set_transaction_statement_return      pMySQLParser->set_transaction_statement(pMySQLParser)
 *  - MySQLParser_transaction_characteristic_list_return      pMySQLParser->transaction_characteristic_list(pMySQLParser)
 *  - MySQLParser_transaction_characteristic_return      pMySQLParser->transaction_characteristic(pMySQLParser)
 *  - MySQLParser_begin_statement_return      pMySQLParser->begin_statement(pMySQLParser)
 *  - MySQLParser_commit_statement_return      pMySQLParser->commit_statement(pMySQLParser)
 *  - MySQLParser_rollback_statement_return      pMySQLParser->rollback_statement(pMySQLParser)
 *  - MySQLParser_savepoint_statement_return      pMySQLParser->savepoint_statement(pMySQLParser)
 *  - MySQLParser_rollback_to_savepoint_statement_return      pMySQLParser->rollback_to_savepoint_statement(pMySQLParser)
 *  - MySQLParser_set_autocommit_statement_return      pMySQLParser->set_autocommit_statement(pMySQLParser)
 *  - MySQLParser_release_savepoint_statement_return      pMySQLParser->release_savepoint_statement(pMySQLParser)
 *  - MySQLParser_lock_table_statement_return      pMySQLParser->lock_table_statement(pMySQLParser)
 *  - MySQLParser_lock_type_list_return      pMySQLParser->lock_type_list(pMySQLParser)
 *  - MySQLParser_lock_type_return      pMySQLParser->lock_type(pMySQLParser)
 *  - MySQLParser_unlock_table_statement_return      pMySQLParser->unlock_table_statement(pMySQLParser)
 *  - MySQLParser_explain_statement_return      pMySQLParser->explain_statement(pMySQLParser)
 *  - MySQLParser_explain_type_return      pMySQLParser->explain_type(pMySQLParser)
 *  - MySQLParser_format_name_return      pMySQLParser->format_name(pMySQLParser)
 *  - MySQLParser_explainable_stmt_return      pMySQLParser->explainable_stmt(pMySQLParser)
 *  - MySQLParser_help_statement_return      pMySQLParser->help_statement(pMySQLParser)
 *  - MySQLParser_use_statement_return      pMySQLParser->use_statement(pMySQLParser)
 *  - MySQLParser_analyze_table_statement_return      pMySQLParser->analyze_table_statement(pMySQLParser)
 *  - MySQLParser_check_table_statement_return      pMySQLParser->check_table_statement(pMySQLParser)
 *  - MySQLParser_checksum_table_statement_return      pMySQLParser->checksum_table_statement(pMySQLParser)
 *  - MySQLParser_optimize_table_statement_return      pMySQLParser->optimize_table_statement(pMySQLParser)
 *  - MySQLParser_repair_table_statement_return      pMySQLParser->repair_table_statement(pMySQLParser)
 *  - MySQLParser_set_usrvar_statement_return      pMySQLParser->set_usrvar_statement(pMySQLParser)
 *  - MySQLParser_set_charset_statement_return      pMySQLParser->set_charset_statement(pMySQLParser)
 *  - MySQLParser_set_sysvar_statement_return      pMySQLParser->set_sysvar_statement(pMySQLParser)
 *  - MySQLParser_sys_var_id_return      pMySQLParser->sys_var_id(pMySQLParser)
 *  - MySQLParser_set_names_statement_return      pMySQLParser->set_names_statement(pMySQLParser)
 *  - MySQLParser_charset_name_str_return      pMySQLParser->charset_name_str(pMySQLParser)
 *  - MySQLParser_collation_names_str_return      pMySQLParser->collation_names_str(pMySQLParser)
 *  - MySQLParser_charset_name_return      pMySQLParser->charset_name(pMySQLParser)
 *  - MySQLParser_transcoding_name_return      pMySQLParser->transcoding_name(pMySQLParser)
 *  - MySQLParser_collation_names_return      pMySQLParser->collation_names(pMySQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLParser_H
#define _MySQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLParser_Ctx_struct MySQLParser, * pMySQLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct MySQLParser_root_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_root_statement_return;

typedef struct MySQLParser_data_manipulation_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_manipulation_statements_return;

typedef struct MySQLParser_data_definition_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_definition_statements_return;

typedef struct MySQLParser_transactional_locking_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transactional_locking_statements_return;

typedef struct MySQLParser_database_admin_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_database_admin_statements_return;

typedef struct MySQLParser_utility_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_utility_statements_return;

typedef struct MySQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_list_return;

typedef struct MySQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_return;

typedef struct MySQLParser_exp_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor1_return;

typedef struct MySQLParser_exp_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor2_return;

typedef struct MySQLParser_exp_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor3_return;

typedef struct MySQLParser_exp_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor4_return;

typedef struct MySQLParser_bool_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bool_primary_return;

typedef struct MySQLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_predicate_return;

typedef struct MySQLParser_relational_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_relational_op_return;

typedef struct MySQLParser_bit_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_expr_return;

typedef struct MySQLParser_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor1_return;

typedef struct MySQLParser_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor2_return;

typedef struct MySQLParser_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor3_return;

typedef struct MySQLParser_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor4_return;

typedef struct MySQLParser_factor5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor5_return;

typedef struct MySQLParser_factor6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor6_return;

typedef struct MySQLParser_factor7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor7_return;

typedef struct MySQLParser_simple_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_simple_expr_return;

typedef struct MySQLParser_search_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_search_modifier_return;

typedef struct MySQLParser_case_when_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement_return;

typedef struct MySQLParser_case_when_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement1_return;

typedef struct MySQLParser_case_when_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement2_return;

typedef struct MySQLParser_match_against_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_match_against_statement_return;

typedef struct MySQLParser_interval_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_expr_return;

typedef struct MySQLParser_interval_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_unit_return;

typedef struct MySQLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_functionList_return;

typedef struct MySQLParser_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_call_return;

typedef struct MySQLParser_number_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_functions_return;

typedef struct MySQLParser_char_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_char_functions_return;

typedef struct MySQLParser_time_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_time_functions_return;

typedef struct MySQLParser_other_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_other_functions_return;

typedef struct MySQLParser_group_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_group_functions_return;

typedef struct MySQLParser_cast_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_cast_data_type_return;

typedef struct MySQLParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_spec_return;

typedef struct MySQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schema_name_return;

typedef struct MySQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_name_return;

typedef struct MySQLParser_engine_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_engine_name_return;

typedef struct MySQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_name_return;

typedef struct MySQLParser_view_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_view_name_return;

typedef struct MySQLParser_parser_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_parser_name_return;

typedef struct MySQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_name_return;

typedef struct MySQLParser_partition_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_name_return;

typedef struct MySQLParser_partition_logical_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_logical_name_return;

typedef struct MySQLParser_constraint_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_constraint_symbol_name_return;

typedef struct MySQLParser_foreign_key_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_foreign_key_symbol_name_return;

typedef struct MySQLParser_collation_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_name_return;

typedef struct MySQLParser_event_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_event_name_return;

typedef struct MySQLParser_user_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_user_name_return;

typedef struct MySQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_name_return;

typedef struct MySQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_procedure_name_return;

typedef struct MySQLParser_server_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_server_name_return;

typedef struct MySQLParser_wrapper_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_wrapper_name_return;

typedef struct MySQLParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alias_return;

typedef struct MySQLParser_trigger_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_trigger_name_return;

typedef struct MySQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_string_literal_return;

typedef struct MySQLParser_number_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_literal_return;

typedef struct MySQLParser_hex_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_hex_literal_return;

typedef struct MySQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_boolean_literal_return;

typedef struct MySQLParser_bit_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_literal_return;

typedef struct MySQLParser_null_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_null_literal_return;

typedef struct MySQLParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_literal_value_return;

typedef struct MySQLParser_table_references_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_references_return;

typedef struct MySQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_reference_return;

typedef struct MySQLParser_table_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor1_return;

typedef struct MySQLParser_table_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor2_return;

typedef struct MySQLParser_table_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor3_return;

typedef struct MySQLParser_table_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor4_return;

typedef struct MySQLParser_table_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_atom_return;

typedef struct MySQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_join_condition_return;

typedef struct MySQLParser_index_hint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_list_return;

typedef struct MySQLParser_index_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_options_return;

typedef struct MySQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_return;

typedef struct MySQLParser_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_list_return;

typedef struct MySQLParser_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_clause_return;

typedef struct MySQLParser_partition_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_names_return;

typedef struct MySQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_statement_return;

typedef struct MySQLParser_select_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_expression_return;

typedef struct MySQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_where_clause_return;

typedef struct MySQLParser_groupby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_clause_return;

typedef struct MySQLParser_groupby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_item_return;

typedef struct MySQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_having_clause_return;

typedef struct MySQLParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_clause_return;

typedef struct MySQLParser_orderby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_item_return;

typedef struct MySQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_limit_clause_return;

typedef struct MySQLParser_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_offset_return;

typedef struct MySQLParser_row_count_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_row_count_return;

typedef struct MySQLParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_list_return;

typedef struct MySQLParser_column_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_list_return;

typedef struct MySQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subquery_return;

typedef struct MySQLParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_spec_return;

typedef struct MySQLParser_table_spec_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_spec_list_return;

typedef struct MySQLParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_displayed_column_return;

typedef struct MySQLParser_delete_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_statements_return;

typedef struct MySQLParser_delete_single_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_single_table_statement_return;

typedef struct MySQLParser_delete_multiple_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement1_return;

typedef struct MySQLParser_delete_multiple_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement2_return;

typedef struct MySQLParser_insert_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statements_return;

typedef struct MySQLParser_insert_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_header_return;

typedef struct MySQLParser_insert_subfix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_subfix_return;

typedef struct MySQLParser_insert_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement1_return;

typedef struct MySQLParser_value_list_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_value_list_clause_return;

typedef struct MySQLParser_column_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_value_list_return;

typedef struct MySQLParser_insert_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement2_return;

typedef struct MySQLParser_set_columns_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_columns_cluase_return;

typedef struct MySQLParser_set_column_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_column_cluase_return;

typedef struct MySQLParser_insert_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement3_return;

typedef struct MySQLParser_update_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_update_statements_return;

typedef struct MySQLParser_single_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_single_table_update_statement_return;

typedef struct MySQLParser_multiple_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_multiple_table_update_statement_return;

typedef struct MySQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_call_statement_return;

typedef struct MySQLParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_do_statement_return;

typedef struct MySQLParser_handler_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statements_return;

typedef struct MySQLParser_open_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_open_handler_statement_return;

typedef struct MySQLParser_handler_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement1_return;

typedef struct MySQLParser_handler_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement2_return;

typedef struct MySQLParser_handler_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement3_return;

typedef struct MySQLParser_close_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_close_handler_statement_return;

typedef struct MySQLParser_load_data_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_data_statement_return;

typedef struct MySQLParser_load_xml_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_xml_statement_return;

typedef struct MySQLParser_replace_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_return;

typedef struct MySQLParser_replace_statement_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_header_return;

typedef struct MySQLParser_replace_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement1_return;

typedef struct MySQLParser_replace_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement2_return;

typedef struct MySQLParser_replace_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement3_return;

typedef struct MySQLParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_database_statement_return;

typedef struct MySQLParser_create_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_specification_return;

typedef struct MySQLParser_alter_database_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statements_return;

typedef struct MySQLParser_alter_database_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement1_return;

typedef struct MySQLParser_alter_database_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement2_return;

typedef struct MySQLParser_alter_database_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_specification_return;

typedef struct MySQLParser_drop_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_database_statement_return;

typedef struct MySQLParser_create_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_event_statement_return;

typedef struct MySQLParser_schedule_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schedule_definition_return;

typedef struct MySQLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_return;

typedef struct MySQLParser_timestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_timestamp_return;

typedef struct MySQLParser_alter_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_event_statement_return;

typedef struct MySQLParser_drop_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_event_statement_return;

typedef struct MySQLParser_create_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_index_statement_return;

typedef struct MySQLParser_algorithm_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_algorithm_option_return;

typedef struct MySQLParser_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_option_return;

typedef struct MySQLParser_drop_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_index_statement_return;

typedef struct MySQLParser_create_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_statement_return;

typedef struct MySQLParser_create_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_option_return;

typedef struct MySQLParser_alter_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_statement_return;

typedef struct MySQLParser_alter_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_option_return;

typedef struct MySQLParser_drop_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_server_statement_return;

typedef struct MySQLParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement_return;

typedef struct MySQLParser_create_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement1_return;

typedef struct MySQLParser_create_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement2_return;

typedef struct MySQLParser_create_table_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement3_return;

typedef struct MySQLParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_definition_return;

typedef struct MySQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definition_return;

typedef struct MySQLParser_null_or_notnull_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_null_or_notnull_return;

typedef struct MySQLParser_column_data_type_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_data_type_header_return;

typedef struct MySQLParser_index_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_name_return;

typedef struct MySQLParser_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_definition_return;

typedef struct MySQLParser_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_option_return;

typedef struct MySQLParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_options_return;

typedef struct MySQLParser_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_option_return;

typedef struct MySQLParser_partition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_options_return;

typedef struct MySQLParser_partition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_definition_return;

typedef struct MySQLParser_subpartition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subpartition_definition_return;

typedef struct MySQLParser_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_length_return;

typedef struct MySQLParser_alter_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_statement_return;

typedef struct MySQLParser_alter_table_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_specification_return;

typedef struct MySQLParser_index_column_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_names_return;

typedef struct MySQLParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_type_return;

typedef struct MySQLParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_option_return;

typedef struct MySQLParser_column_definitions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definitions_return;

typedef struct MySQLParser_rename_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rename_table_statement_return;

typedef struct MySQLParser_drop_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_table_statement_return;

typedef struct MySQLParser_truncate_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_truncate_table_statement_return;

typedef struct MySQLParser_create_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_statement_return;

typedef struct MySQLParser_create_view_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_body_return;

typedef struct MySQLParser_alter_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_view_statement_return;

typedef struct MySQLParser_drop_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_view_statement_return;

typedef struct MySQLParser_show_binary_logs_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_binary_logs_statement_return;

typedef struct MySQLParser_show_binlog_events_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_binlog_events_statement_return;

typedef struct MySQLParser_show_character_set_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_character_set_statement_return;

typedef struct MySQLParser_show_collation_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_collation_statement_return;

typedef struct MySQLParser_show_columns_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_columns_statement_return;

typedef struct MySQLParser_show_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_create_database_statement_return;

typedef struct MySQLParser_show_create_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_create_statements_return;

typedef struct MySQLParser_show_databases_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_databases_statement_return;

typedef struct MySQLParser_show_engine_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_engine_statement_return;

typedef struct MySQLParser_show_engines_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_engines_statement_return;

typedef struct MySQLParser_show_wes_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_wes_statement_return;

typedef struct MySQLParser_show_events_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_events_statement_return;

typedef struct MySQLParser_show_function_code_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_function_code_statement_return;

typedef struct MySQLParser_show_function_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_function_status_statement_return;

typedef struct MySQLParser_show_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_index_statement_return;

typedef struct MySQLParser_show_master_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_master_status_statement_return;

typedef struct MySQLParser_show_open_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_open_tables_statement_return;

typedef struct MySQLParser_show_plugins_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_plugins_statement_return;

typedef struct MySQLParser_show_privileges_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_privileges_statement_return;

typedef struct MySQLParser_show_procedure_code_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_procedure_code_statement_return;

typedef struct MySQLParser_show_procedure_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_procedure_status_statement_return;

typedef struct MySQLParser_show_processlist_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_processlist_statement_return;

typedef struct MySQLParser_show_relaylog_events_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_relaylog_events_statement_return;

typedef struct MySQLParser_show_slave_hosts_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_slave_hosts_statement_return;

typedef struct MySQLParser_show_slave_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_slave_status_statement_return;

typedef struct MySQLParser_show_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_status_statement_return;

typedef struct MySQLParser_show_table_status_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_table_status_statement_return;

typedef struct MySQLParser_show_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_tables_statement_return;

typedef struct MySQLParser_show_triggers_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_triggers_statement_return;

typedef struct MySQLParser_show_variables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_show_variables_statement_return;

typedef struct MySQLParser_like_or_where_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_like_or_where_return;

typedef struct MySQLParser_binlog_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_binlog_statement_return;

typedef struct MySQLParser_start_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_start_transaction_statement_return;

typedef struct MySQLParser_set_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_transaction_statement_return;

typedef struct MySQLParser_transaction_characteristic_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transaction_characteristic_list_return;

typedef struct MySQLParser_transaction_characteristic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transaction_characteristic_return;

typedef struct MySQLParser_begin_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_begin_statement_return;

typedef struct MySQLParser_commit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_commit_statement_return;

typedef struct MySQLParser_rollback_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rollback_statement_return;

typedef struct MySQLParser_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_savepoint_statement_return;

typedef struct MySQLParser_rollback_to_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rollback_to_savepoint_statement_return;

typedef struct MySQLParser_set_autocommit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_autocommit_statement_return;

typedef struct MySQLParser_release_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_release_savepoint_statement_return;

typedef struct MySQLParser_lock_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_table_statement_return;

typedef struct MySQLParser_lock_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_type_list_return;

typedef struct MySQLParser_lock_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_type_return;

typedef struct MySQLParser_unlock_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_unlock_table_statement_return;

typedef struct MySQLParser_explain_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_explain_statement_return;

typedef struct MySQLParser_explain_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_explain_type_return;

typedef struct MySQLParser_format_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_format_name_return;

typedef struct MySQLParser_explainable_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_explainable_stmt_return;

typedef struct MySQLParser_help_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_help_statement_return;

typedef struct MySQLParser_use_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_use_statement_return;

typedef struct MySQLParser_analyze_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_analyze_table_statement_return;

typedef struct MySQLParser_check_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_check_table_statement_return;

typedef struct MySQLParser_checksum_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_checksum_table_statement_return;

typedef struct MySQLParser_optimize_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_optimize_table_statement_return;

typedef struct MySQLParser_repair_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_repair_table_statement_return;

typedef struct MySQLParser_set_usrvar_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_usrvar_statement_return;

typedef struct MySQLParser_set_charset_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_charset_statement_return;

typedef struct MySQLParser_set_sysvar_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_sysvar_statement_return;

typedef struct MySQLParser_sys_var_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_sys_var_id_return;

typedef struct MySQLParser_set_names_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_names_statement_return;

typedef struct MySQLParser_charset_name_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_charset_name_str_return;

typedef struct MySQLParser_collation_names_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_names_str_return;

typedef struct MySQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_charset_name_return;

typedef struct MySQLParser_transcoding_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transcoding_name_return;

typedef struct MySQLParser_collation_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_names_return;



/** Context tracking structure for MySQLParser
 */
struct MySQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     MySQLParser_root_statement_return (*root_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_manipulation_statements_return (*data_manipulation_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_definition_statements_return (*data_definition_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transactional_locking_statements_return (*transactional_locking_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_database_admin_statements_return (*database_admin_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_utility_statements_return (*utility_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_list_return (*expression_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_return (*expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor1_return (*exp_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor2_return (*exp_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor3_return (*exp_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor4_return (*exp_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bool_primary_return (*bool_primary)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_predicate_return (*predicate)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_relational_op_return (*relational_op)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_expr_return (*bit_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor1_return (*factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor2_return (*factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor3_return (*factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor4_return (*factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor5_return (*factor5)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor6_return (*factor6)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor7_return (*factor7)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_simple_expr_return (*simple_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_search_modifier_return (*search_modifier)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement_return (*case_when_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement1_return (*case_when_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement2_return (*case_when_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_match_against_statement_return (*match_against_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_expr_return (*interval_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_unit_return (*interval_unit)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_functionList_return (*functionList)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_call_return (*function_call)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_functions_return (*number_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_char_functions_return (*char_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_time_functions_return (*time_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_other_functions_return (*other_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_group_functions_return (*group_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_cast_data_type_return (*cast_data_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_spec_return (*column_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schema_name_return (*schema_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_name_return (*table_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_engine_name_return (*engine_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_name_return (*column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_view_name_return (*view_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_parser_name_return (*parser_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_name_return (*index_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_name_return (*partition_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_logical_name_return (*partition_logical_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_constraint_symbol_name_return (*constraint_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_foreign_key_symbol_name_return (*foreign_key_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_name_return (*collation_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_event_name_return (*event_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_user_name_return (*user_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_name_return (*function_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_procedure_name_return (*procedure_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_server_name_return (*server_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_wrapper_name_return (*wrapper_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alias_return (*alias)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_trigger_name_return (*trigger_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_string_literal_return (*string_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_literal_return (*number_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_hex_literal_return (*hex_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_boolean_literal_return (*boolean_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_literal_return (*bit_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_null_literal_return (*null_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_literal_value_return (*literal_value)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_references_return (*table_references)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_reference_return (*table_reference)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor1_return (*table_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor2_return (*table_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor3_return (*table_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor4_return (*table_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_atom_return (*table_atom)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_join_condition_return (*join_condition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_list_return (*index_hint_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_options_return (*index_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_return (*index_hint)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_list_return (*index_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_clause_return (*partition_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_names_return (*partition_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_statement_return (*select_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_expression_return (*select_expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_where_clause_return (*where_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_clause_return (*groupby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_item_return (*groupby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_having_clause_return (*having_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_clause_return (*orderby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_item_return (*orderby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_limit_clause_return (*limit_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_offset_return (*offset)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_row_count_return (*row_count)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_list_return (*select_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_list_return (*column_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subquery_return (*subquery)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_spec_return (*table_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_spec_list_return (*table_spec_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_displayed_column_return (*displayed_column)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_statements_return (*delete_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_single_table_statement_return (*delete_single_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement1_return (*delete_multiple_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement2_return (*delete_multiple_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statements_return (*insert_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_header_return (*insert_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_subfix_return (*insert_subfix)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement1_return (*insert_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_value_list_clause_return (*value_list_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_value_list_return (*column_value_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement2_return (*insert_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_columns_cluase_return (*set_columns_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_column_cluase_return (*set_column_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement3_return (*insert_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_update_statements_return (*update_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_single_table_update_statement_return (*single_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_multiple_table_update_statement_return (*multiple_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_call_statement_return (*call_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_do_statement_return (*do_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statements_return (*handler_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_open_handler_statement_return (*open_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement1_return (*handler_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement2_return (*handler_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement3_return (*handler_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_close_handler_statement_return (*close_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_data_statement_return (*load_data_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_xml_statement_return (*load_xml_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_return (*replace_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_header_return (*replace_statement_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement1_return (*replace_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement2_return (*replace_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement3_return (*replace_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_database_statement_return (*create_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_specification_return (*create_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statements_return (*alter_database_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement1_return (*alter_database_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement2_return (*alter_database_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_specification_return (*alter_database_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_database_statement_return (*drop_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_event_statement_return (*create_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schedule_definition_return (*schedule_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_return (*interval)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_timestamp_return (*timestamp)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_event_statement_return (*alter_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_event_statement_return (*drop_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_index_statement_return (*create_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_algorithm_option_return (*algorithm_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_option_return (*lock_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_index_statement_return (*drop_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_statement_return (*create_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_option_return (*create_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_statement_return (*alter_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_option_return (*alter_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_server_statement_return (*drop_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement_return (*create_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement1_return (*create_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement2_return (*create_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement3_return (*create_table_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_definition_return (*create_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definition_return (*column_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_null_or_notnull_return (*null_or_notnull)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_data_type_header_return (*column_data_type_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_name_return (*index_column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_definition_return (*reference_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_option_return (*reference_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_options_return (*table_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_option_return (*table_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_options_return (*partition_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_definition_return (*partition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subpartition_definition_return (*subpartition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_length_return (*length)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_statement_return (*alter_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_specification_return (*alter_table_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_names_return (*index_column_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_type_return (*index_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_option_return (*index_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definitions_return (*column_definitions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rename_table_statement_return (*rename_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_table_statement_return (*drop_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_truncate_table_statement_return (*truncate_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_statement_return (*create_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_body_return (*create_view_body)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_view_statement_return (*alter_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_view_statement_return (*drop_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_binary_logs_statement_return (*show_binary_logs_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_binlog_events_statement_return (*show_binlog_events_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_character_set_statement_return (*show_character_set_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_collation_statement_return (*show_collation_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_columns_statement_return (*show_columns_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_create_database_statement_return (*show_create_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_create_statements_return (*show_create_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_databases_statement_return (*show_databases_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_engine_statement_return (*show_engine_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_engines_statement_return (*show_engines_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_wes_statement_return (*show_wes_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_events_statement_return (*show_events_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_function_code_statement_return (*show_function_code_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_function_status_statement_return (*show_function_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_index_statement_return (*show_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_master_status_statement_return (*show_master_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_open_tables_statement_return (*show_open_tables_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_plugins_statement_return (*show_plugins_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_privileges_statement_return (*show_privileges_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_procedure_code_statement_return (*show_procedure_code_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_procedure_status_statement_return (*show_procedure_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_processlist_statement_return (*show_processlist_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_relaylog_events_statement_return (*show_relaylog_events_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_slave_hosts_statement_return (*show_slave_hosts_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_slave_status_statement_return (*show_slave_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_status_statement_return (*show_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_table_status_statement_return (*show_table_status_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_tables_statement_return (*show_tables_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_triggers_statement_return (*show_triggers_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_show_variables_statement_return (*show_variables_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_like_or_where_return (*like_or_where)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_binlog_statement_return (*binlog_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_start_transaction_statement_return (*start_transaction_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_transaction_statement_return (*set_transaction_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transaction_characteristic_list_return (*transaction_characteristic_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transaction_characteristic_return (*transaction_characteristic)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_begin_statement_return (*begin_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_commit_statement_return (*commit_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rollback_statement_return (*rollback_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_savepoint_statement_return (*savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rollback_to_savepoint_statement_return (*rollback_to_savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_autocommit_statement_return (*set_autocommit_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_release_savepoint_statement_return (*release_savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_table_statement_return (*lock_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_type_list_return (*lock_type_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_type_return (*lock_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_unlock_table_statement_return (*unlock_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_explain_statement_return (*explain_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_explain_type_return (*explain_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_format_name_return (*format_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_explainable_stmt_return (*explainable_stmt)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_help_statement_return (*help_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_use_statement_return (*use_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_analyze_table_statement_return (*analyze_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_check_table_statement_return (*check_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_checksum_table_statement_return (*checksum_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_optimize_table_statement_return (*optimize_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_repair_table_statement_return (*repair_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_usrvar_statement_return (*set_usrvar_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_charset_statement_return (*set_charset_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_sysvar_statement_return (*set_sysvar_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_sys_var_id_return (*sys_var_id)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_names_statement_return (*set_names_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_charset_name_str_return (*charset_name_str)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_names_str_return (*collation_names_str)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_charset_name_return (*charset_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transcoding_name_return (*transcoding_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_names_return (*collation_names)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred6_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred85_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred86_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred88_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred91_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred92_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred95_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred97_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred100_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred102_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred103_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred105_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred106_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred108_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred114_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred115_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred117_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred119_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred123_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred125_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred129_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred141_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred142_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred150_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred170_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred177_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred178_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred386_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred389_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred391_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred395_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred400_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred441_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred442_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred448_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred455_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred486_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred487_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred491_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred494_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred506_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred875_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred980_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1059_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct MySQLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLParser MySQLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pMySQLParser MySQLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FUNCTION      266
#define GEOMETRYCOLLECTION      270
#define D_      7
#define DEGREES      185
#define MASTER_HOST      384
#define NAME_CONST      434
#define CASCADED      89
#define PRECISION      492
#define KOI8U      334
#define DO      201
#define ENABLE      212
#define CONCAT_WS      122
#define UNDO      682
#define E_      8
#define SWAPS      634
#define RPAREN      760
#define LINEAR      354
#define LOOP      373
#define RETURN      543
#define REGEXP      522
#define ANALYZE      45
#define MEDIUMINT      412
#define GET      750
#define EQ      747
#define SHOW      577
#define RBRACK      762
#define F_      9
#define ASC      50
#define TRANSACTION      666
#define DAY_MINUTE      172
#define INT      314
#define CURDATE      154
#define FILE      247
#define LEADING      345
#define SERVER      571
#define OCT      452
#define UNDEFINED      680
#define GROUP      279
#define IPC      320
#define G_      10
#define SL_COMMENT      790
#define USER      700
#define AUTHORS      57
#define ONE_SHOT      457
#define SHUTDOWN      578
#define KOI8R      333
#define LOWER      375
#define LOCKS      364
#define GET_FORMAT      272
#define AVG_ROW_LENGTH      62
#define MAX_ROWS      404
#define CONSTRAINT      128
#define SQL_SMALL_RESULT      601
#define LBRACK      763
#define FORCE      255
#define UUID      709
#define CURRENT_USER      156
#define NCHAR      439
#define SLEEP      585
#define SUSPEND      633
#define BIT_NUM      778
#define LINES      355
#define MULTIPOINT      431
#define FLOAT      251
#define COMPACT      117
#define SECOND_MICROSECOND      564
#define AT      54
#define AS      49
#define ADDDATE      35
#define SINGLE_QUOTE      772
#define CONNECTION_ID      125
#define BTREE      83
#define MASTER_USER      399
#define NULL_SYM      449
#define GEOMETRY      269
#define INTEGER_NUM      775
#define COMPRESS      119
#define AVG      61
#define A_      4
#define TRUNCATE      672
#define DATAFILE      161
#define GROUP_CONCAT      278
#define MINUTE_SECOND      423
#define MODE      425
#define RETURNS      544
#define LIKE      352
#define UPGRADE      695
#define BY      84
#define LONGTEXT      372
#define SERIALIZABLE      570
#define B_      5
#define INSTR      313
#define HEX_DIGIT      777
#define PORT      489
#define RIGHT      547
#define ATAN2      56
#define GB2312      267
#define SESSION      572
#define NODEGROUP      445
#define QUICK      506
#define COLON      756
#define COLUMNS      113
#define OPTIMIZE      461
#define DATABASE      159
#define ENCRYPT      215
#define C_      6
#define SQL_BIG_RESULT      596
#define TEXT_STRING      780
#define ROWS      554
#define DIRECTORY      195
#define ARROW      746
#define NATURAL      438
#define LONG      370
#define OPTIONS      464
#define SYS_VAR_ID      788
#define AUTOCOMMIT      59
#define LN      358
#define RESET      538
#define SQL_CALC_FOUND_ROWS      599
#define MODIFIES      426
#define FIND_IN_SET      248
#define BIT_LENGTH      74
#define COUNT      139
#define SUBSTRING_INDEX      629
#define L_      15
#define BENCHMARK      66
#define DATEDIFF      167
#define CODE      107
#define ESCAPE      222
#define BIT_OR      75
#define MEDIUMBLOB      411
#define LATIN1_BIN      339
#define LPAD      376
#define COMMENT      114
#define M_      16
#define DUAL      204
#define HOSTS      288
#define EXIT      233
#define COALESCE      106
#define MASTER_SSL_CERT      393
#define NO      442
#define EVERY      228
#define TINYTEXT      659
#define ON      456
#define MATCH      400
#define SENSITIVE      567
#define OJ      454
#define STRAIGHT_JOIN      622
#define FLOOR      252
#define BACKUP      63
#define AGAINST      40
#define ISSUER      325
#define N_      17
#define DELAYED      187
#define SHIFT_RIGHT      753
#define DISCARD      197
#define CUBE      153
#define ENDS      217
#define NATIONAL      437
#define TO_BASE64      661
#define STARTS      613
#define STDDEV      616
#define PLUGIN      485
#define ASCII      51
#define CONCURRENT      123
#define PI      484
#define CURSOR      157
#define PARSER      475
#define O_      18
#define TIMESTAMP      654
#define UPPER      696
#define LOAD_FILE      360
#define BIT_AND      73
#define YEAR      738
#define SNAPSHOT      587
#define ADD_SYM      34
#define H_      11
#define ID      781
#define CROSS      152
#define LENGTH      349
#define CONTEXT      130
#define IF      295
#define BOOLEAN      81
#define IN      299
#define IO      319
#define QUERY_SYM      505
#define MD5      409
#define EXPORT_SET      237
#define REFERENCES      521
#define IS      322
#define EXTENT_SIZE      239
#define PARTITION      477
#define NEXT      441
#define PLUS_OP      764
#define MASTER_SSL_VERIFY_SERVER_CERT      397
#define I_      12
#define SQL_THREAD      603
#define WITH      730
#define STATUS_SYM      614
#define UTF32      707
#define GBK      268
#define UNHEX      684
#define DEFAULT      183
#define MASTER_SSL      396
#define PROCESSLIST      500
#define J_      13
#define PURGE      503
#define LAST_INSERT_ID      337
#define EVENT      226
#define STRCMP      623
#define PROCEDURE      498
#define WRITE      733
#define LATIN1_GENERAL_CS      340
#define ERRORS      221
#define K_      14
#define VARIANCE      717
#define CHANGED      96
#define BINLOG      72
#define MINUTE      421
#define LEAVES      347
#define MASTER_SSL_CA      391
#define GREEK      277
#define MEDIUM      410
#define INSERT_METHOD      311
#define MOD      424
#define REMOVE      529
#define U_      24
#define TYPE      673
#define STDDEV_POP      617
#define BEGIN      65
#define ZEROFILL      741
#define T_      23
#define UTF16      706
#define HANDLER      280
#define ARMSCII8      48
#define MONTHNAME      429
#define STDDEV_SAMP      618
#define READ_ONLY      511
#define BLOB      78
#define TIS620      660
#define X509      734
#define YEARWEEK      740
#define IS_USED_LOCK      323
#define KEY      329
#define LOAD      359
#define COMMITTED      116
#define TRAILING      665
#define TIMESTAMPADD      655
#define XA      735
#define W_      26
#define DEFINER      184
#define DELAY_KEY_WRITE      186
#define WAIT      721
#define ROLLBACK      548
#define CIPHER      103
#define UNCOMPRESS      678
#define TABLESPACE      642
#define ABS      30
#define INET_ATON      302
#define REAL      515
#define RECOVER      517
#define RADIANS      508
#define OUT      468
#define READ      512
#define V_      25
#define MIN_ROWS      420
#define CALL      87
#define REVERSE      545
#define TO_DAYS      662
#define HEBREW      283
#define DYNAMIC      207
#define UNLOCK      691
#define HELP      284
#define SQL_BUFFER_RESULT      597
#define PERIOD_ADD      481
#define MICROSECOND      416
#define EXECUTE      230
#define OWNER      471
#define HOST      287
#define ALL_FIELDS      754
#define TEMPTABLE      645
#define Q_      20
#define MASTER      398
#define UNCOMPRESSED_LENGTH      679
#define ASENSITIVE      52
#define INOUT      307
#define TIME      651
#define SQLEXCEPTION      604
#define EUCKR      225
#define REPLACE      535
#define COLUMN      112
#define P_      19
#define INDEX_SYM      300
#define INTEGER      315
#define CP932      147
#define DES_ENCRYPT      190
#define MACROMAN      379
#define MAX_SIZE      405
#define TO      664
#define MID      417
#define IGNORE      297
#define TEXT      647
#define HOUR      289
#define COMPLETION      118
#define SYS_VAR_PREFIX      787
#define CHANGE      95
#define S_      22
#define PREV      495
#define COMMIT      115
#define NEGATION      766
#define CLOSE      105
#define DECIMAL      180
#define BIGINT      69
#define WHEN      727
#define BIT_XOR      77
#define HOUR_MINUTE      291
#define DECLARE      181
#define BIT      76
#define MASTER_SSL_CIPHER      394
#define IS_FREE_LOCK      321
#define BIN      70
#define BETWEEN      67
#define AGGREGATE      41
#define R_      21
#define FIRST      249
#define MAX_QUERIES_PER_HOUR      403
#define CAST      91
#define PREPARE      493
#define SIGNED      580
#define WHILE      729
#define DOUBLE_QUOTE      773
#define DETERMINISTIC      194
#define VARYING      718
#define TRIGGER      668
#define CASE      90
#define LOGS      369
#define DEALLOCATE      178
#define MAKETIME      382
#define DAYNAME      174
#define ONE      458
#define CASCADE      88
#define READ_WRITE      513
#define RELAY_LOG_FILE      524
#define FULL      264
#define SOUNDEX      590
#define INSERT      310
#define LOG2      367
#define MASTER_POS_WAIT      389
#define SHARE      576
#define TABLE_CHECKSUM      640
#define UNIQUE      688
#define RESTORE      540
#define VIEW      720
#define KEYBCS2      330
#define CONCAT      121
#define OLD_PASSWORD      455
#define SPATIAL      594
#define ROLLUP      549
#define PRIMARY      496
#define POWER_OP      769
#define VERSION_SYM      719
#define HOUR_SECOND      292
#define TRANSACTIONAL      667
#define PASSWORD      480
#define NAMES      436
#define AND_OP      745
#define UNTIL      693
#define EXPANSION      235
#define MIGRATE      418
#define MEMORY      414
#define STR_TO_DATE      621
#define INSTALL      312
#define GEOSTD8      271
#define NO_WAIT      443
#define ENCODE      214
#define BACKSLASH      774
#define UJIS      676
#define Y_      28
#define MAKE_SET      380
#define CEILING      93
#define COMPRESSED      120
#define ORDER      467
#define FROM_DAYS      262
#define FOR      254
#define SQLSTATE      605
#define HP8      293
#define WEEKOFYEAR      725
#define UNINSTALL      686
#define IDENTIFIED      294
#define ORD      466
#define REBUILD      516
#define LOCK      363
#define ML_COMMENT      791
#define X_      27
#define SJIS      583
#define LINESTRING      356
#define CONTINUE      131
#define SYSDATE      637
#define MAX_USER_CONNECTIONS      407
#define COPY      136
#define PARTITIONS      479
#define HIGH_PRIORITY      286
#define ALL      43
#define COERCIBILITY      108
#define OUTFILE      470
#define PACK_KEYS      472
#define DOT      757
#define CURRENT_TIMESTAMP      155
#define RELOAD      528
#define INITIAL_SIZE      305
#define PARTIAL      476
#define USER_VAR_SUBFIX4      785
#define ISOLATION      324
#define USER_VAR_SUBFIX3      784
#define USER_VAR_SUBFIX2      783
#define BYTE      85
#define USER_VAR_SUBFIX1      782
#define XOR      737
#define CRC32      149
#define VALUES      711
#define HASH      281
#define INDEXES      301
#define ENCLOSED      213
#define ANY      47
#define Z_      29
#define CONV      133
#define VARIABLES      716
#define KEYS      331
#define BINARY      71
#define MAX_SYM      401
#define MOD_OP      743
#define MASTER_CONNECT_RETRY      383
#define RPAD      555
#define SWITCHES      636
#define SMALLINT      586
#define ROW      553
#define FIXED      250
#define MASTER_LOG_FILE      385
#define LAST_DAY      336
#define TYPES      674
#define MULTILINESTRING      430
#define KILL      332
#define CREATE      150
#define MASTER_PORT      388
#define SOCKET      588
#define DUPLICATE      206
#define TIME_TO_SEC      652
#define SHARED      575
#define MASTER_SSL_KEY      395
#define PRESERVE      494
#define ACOS      32
#define LATIN2      342
#define LATIN1      341
#define LATIN7      344
#define HEX_DIGIT_FRAGMENT      776
#define DAYOFYEAR      177
#define POWER      491
#define LATIN5      343
#define DUMPFILE      205
#define STOP      619
#define VALUE      710
#define RESTRICT      541
#define DES_KEY_FILE      191
#define FETCH      245
#define LOW_PRIORITY      374
#define INPLACE      308
#define ACCESSIBLE      31
#define DESCRIBE      193
#define ASIN      53
#define DATE_SUB      165
#define SYSTEM_USER      638
#define ELSIF      210
#define SQL_CACHE      598
#define UTF8      708
#define MASTER_SSL_CAPATH      392
#define SERIAL      569
#define XML      736
#define SUBJECT      625
#define MODIFY      427
#define ALTER      44
#define POINT      487
#define TIME_FORMAT      650
#define LONGBLOB      371
#define TABLE      639
#define SOURCE      592
#define VARCHAR      715
#define SESSION_USER      573
#define UNDOFILE      683
#define SUM      631
#define MULTIPOLYGON      432
#define WHITE_SPACE      789
#define BITAND      768
#define CHAR_LENGTH      98
#define DATABASES      160
#define STORAGE      620
#define UNIX_TIMESTAMP      689
#define MAXVALUE      408
#define LEFT      348
#define UNDO_BUFFER_SIZE      681
#define STD      615
#define COLLATE      109
#define OUTER      469
#define CP866      146
#define MERGE      415
#define MINUTE_MICROSECOND      422
#define UNCOMMITTED      677
#define HAVING      282
#define SEMI      755
#define NOT_EQ      748
#define VERTBAR      767
#define ITERATE      326
#define CP852      145
#define CP850      144
#define BLOCK      79
#define FROM_BASE64      261
#define ROUTINE      551
#define MINUS_OP      765
#define FORMAT      257
#define TRIGGERS      669
#define SOUNDS      591
#define WEEK      723
#define POLYGON      488
#define CHAR      97
#define NEW      440
#define DAY      169
#define TERMINATED      646
#define RELEASE      527
#define CONTRIBUTORS      132
#define EXPLAIN      236
#define CURTIME      158
#define LEAVE      346
#define EXTENDED      238
#define QUOTE      507
#define QUARTER      504
#define THAN      648
#define SWE7      635
#define TAN      643
#define LESS      350
#define PERIOD_DIFF      482
#define HOUR_MICROSECOND      290
#define DOUBLE      202
#define AND_SYM      46
#define EACH      208
#define SUPER      632
#define BIG5      68
#define SELECT      566
#define INTO      317
#define CHECKSUM      102
#define MASTER_SERVER_ID      390
#define MAX_CONNECTIONS_PER_HOUR      402
#define LTRIM      377
#define DAY_MICROSECOND      171
#define SECOND      563
#define LOG10      366
#define NO_WRITE_TO_BINLOG      444
#define NUMERIC      450
#define MAX_UPDATES_PER_HOUR      406
#define TABLES      641
#define SHIFT_LEFT      752
#define DELETE_SYM      188
#define SPECIFIC      595
#define FOUND_ROWS      258
#define ADDTIME      36
#define ENGINE      218
#define ROUND      550
#define KEY_BLOCK_SIZE      328
#define FALSE      241
#define GET_LOCK      273
#define DISTINCTROW      200
#define WHERE      728
#define VAR_SAMP      713
#define UTC_TIMESTAMP      704
#define LIMIT      353
#define SPACE      593
#define USAGE      697
#define YEAR_MONTH      739
#define MACCE      378
#define HEX      285
#define COMMA      758
#define REDUNDANT      520
#define FULLTEXT      265
#define USE_FRM      698
#define EUCJPMS      224
#define GRANT      275
#define VARBINARY      714
#define CONVERT      134
#define AUTOEXTEND_SIZE      60
#define DATETIME      168
#define DEC8      179
#define SQRT      607
#define WRAPPER      732
#define MUTEX      433
#define SUBSTRING      628
#define REPEATABLE      534
#define FAULTS      243
#define DAY_SECOND      173
#define PAGE_CHECKSUM      473
#define LOCATE      362
#define RELAYLOG      523
#define FOUND      259
#define CROSECOND      151
#define GLOBAL      274
#define RESOURCES      539
#define INFILE      304
#define LET      749
#define DES_DECRYPT      189
#define UTF16LE      705
#define CONTAINS      129
#define CONDITION      124
#define NOW      448
#define SEPARATOR      568
#define FLUSH      253
#define NOT      447
#define FOREIGN      256
#define CACHE      86
#define EOF      -1
#define PRIVILEGES      497
#define REQUIRE      537
#define ACTION      33
#define CHARACTER      99
#define MONTH      428
#define UTC_DATE      702
#define USER_VAR      786
#define IMPORT      298
#define WEIGHT_STRING      726
#define DIVIDE_OP      742
#define SIN      582
#define USING      701
#define AUTO_INCREMENT      58
#define TINYBLOB      657
#define DAYOFWEEK      176
#define DISABLE      196
#define SLAVE      584
#define OR_OP      744
#define SUBPARTITION      626
#define ELT      211
#define ELSE      209
#define BOOL      80
#define AES_DECRYPT      37
#define MEDIUMTEXT      413
#define EVENTS      227
#define LANGUAGE      335
#define LEVEL      351
#define MAKEDATE      381
#define INSENSITIVE      309
#define REAL_NUMBER      779
#define NONE      446
#define GRANTS      276
#define TRIM      670
#define REPEAT      533
#define UTC_TIME      703
#define END      216
#define STATS_AUTO_RECALC      611
#define CONVERT_TZ      135
#define CHAIN      94
#define RENAME      530
#define REPLICATION      536
#define OPTION      462
#define ONLY      459
#define SCHEDULE      559
#define OPTIONALLY      463
#define SCHEMAS      561
#define CHARSET      100
#define DAYOFMONTH      175
#define PROFILES      502
#define ASTERISK      759
#define LPAREN      761
#define DAY_HOUR      170
#define THEN      649
#define COLLATION      110
#define PHASE      483
#define OFFSET      453
#define RAND      509
#define TIMEDIFF      653
#define FROM_UNIXTIME      263
#define RELAY_LOG_POS      525
#define EXISTS      232
#define INET_NTOA      303
#define NVARCHAR      451
#define SQL_NO_CACHE      600
#define UCS2      675
#define FAST      242
#define REDOFILE      519
#define SET      574
#define UNICODE      685
#define UNION      687
#define RESUME      542
#define RTREE      556
#define SCHEMA      560
#define ENUM      220
#define UNSIGNED      692
#define DROP      203
#define READS      514
#define START      609
#define REVOKE      546
#define PROCESS      499
#define STRING      624
#define SIGN      579
#define LOG      365
#define OR_SYM      465
#define MIN_SYM      419
#define PARTITIONING      478
#define TO_SECONDS      663
#define CONNECTION      126
#define SQL      602
#define NAME      435
#define INVOKER      318
#define REPAIR      532
#define WEEKDAY      724
#define COT      138
#define POW      490
#define SQLWARNING      606
#define EXP      234
#define DATE_FORMAT      164
#define COS      137
#define SAVEPOINT      558
#define BOTH      82
#define AES_ENCRYPT      38
#define TINYINT      658
#define ATAN      55
#define LAST      338
#define WORK      731
#define SUBPARTITIONS      627
#define CP1256      142
#define CLIENT      104
#define CP1251      141
#define WARNINGS      722
#define CP1250      140
#define LOGFILE      368
#define DATE_ADD      163
#define LOCAL      361
#define ENGINES      219
#define LIST      357
#define CP1257      143
#define COLUMN_FORMAT      111
#define SSL      608
#define MASTER_LOG_POS      386
#define ALGORITHM      42
#define VAR_POP      712
#define TIMESTAMPDIFF      656
#define FIELD      246
#define SUBTIME      630
#define CHECK      101
#define ESCAPED      223
#define USE      699
#define FROM      260
#define DISTINCT      199
#define TEMPORARY      644
#define RTRIM      557
#define SIMPLE      581
#define SEC_TO_TIME      562
#define INNER      306
#define GTH      770
#define MASTER_PASSWORD      387
#define UPDATE      694
#define PROFILE      501
#define EXCLUSIVE      231
#define INTERVAL      316
#define RELEASE_LOCK      526
#define UNKNOWN      690
#define EXCHANGE      229
#define EXTRACT      240
#define STATS_PERSISTENT      612
#define SECURITY      565
#define REORGANIZE      531
#define ROW_FORMAT      552
#define CPU      148
#define PLUGINS      486
#define SET_VAR      751
#define IFNULL      296
#define CONSISTENT      127
#define RANGE      510
#define BEFORE      64
#define FIELDS      244
#define AFTER      39
#define SONAME      589
#define TRUE      671
#define JOIN      327
#define LTH      771
#define OPEN      460
#define PAGE      474
#define DISK      198
#define DECODE      182
#define STARTING      610
#define REDO_BUFFER_SIZE      518
#define CEIL      92
#define DESC      192
#define DATE      166
#define DATA      162
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
