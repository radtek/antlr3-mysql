/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2015-01-05 19:17:12
 *     -                for the parser : MySQLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser MySQLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLParser, which is returned from a call to MySQLParserNew().
 *
 * The methods in pMySQLParser are  as follows:
 *
 *  - MySQLParser_relational_op_return      pMySQLParser->relational_op(pMySQLParser)
 *  - MySQLParser_charset_name_return      pMySQLParser->charset_name(pMySQLParser)
 *  - MySQLParser_cast_data_type_return      pMySQLParser->cast_data_type(pMySQLParser)
 *  - MySQLParser_search_modifier_return      pMySQLParser->search_modifier(pMySQLParser)
 *  - MySQLParser_transcoding_name_return      pMySQLParser->transcoding_name(pMySQLParser)
 *  - MySQLParser_interval_unit_return      pMySQLParser->interval_unit(pMySQLParser)
 *  - MySQLParser_collation_names_return      pMySQLParser->collation_names(pMySQLParser)
 *  - MySQLParser_string_literal_return      pMySQLParser->string_literal(pMySQLParser)
 *  - MySQLParser_number_literal_return      pMySQLParser->number_literal(pMySQLParser)
 *  - MySQLParser_hex_literal_return      pMySQLParser->hex_literal(pMySQLParser)
 *  - MySQLParser_boolean_literal_return      pMySQLParser->boolean_literal(pMySQLParser)
 *  - MySQLParser_bit_literal_return      pMySQLParser->bit_literal(pMySQLParser)
 *  - MySQLParser_literal_value_return      pMySQLParser->literal_value(pMySQLParser)
 *  - MySQLParser_functionList_return      pMySQLParser->functionList(pMySQLParser)
 *  - MySQLParser_number_functions_return      pMySQLParser->number_functions(pMySQLParser)
 *  - MySQLParser_char_functions_return      pMySQLParser->char_functions(pMySQLParser)
 *  - MySQLParser_time_functions_return      pMySQLParser->time_functions(pMySQLParser)
 *  - MySQLParser_other_functions_return      pMySQLParser->other_functions(pMySQLParser)
 *  - MySQLParser_group_functions_return      pMySQLParser->group_functions(pMySQLParser)
 *  - MySQLParser_schema_name_return      pMySQLParser->schema_name(pMySQLParser)
 *  - MySQLParser_table_name_return      pMySQLParser->table_name(pMySQLParser)
 *  - MySQLParser_engine_name_return      pMySQLParser->engine_name(pMySQLParser)
 *  - MySQLParser_column_name_return      pMySQLParser->column_name(pMySQLParser)
 *  - MySQLParser_view_name_return      pMySQLParser->view_name(pMySQLParser)
 *  - MySQLParser_parser_name_return      pMySQLParser->parser_name(pMySQLParser)
 *  - MySQLParser_index_name_return      pMySQLParser->index_name(pMySQLParser)
 *  - MySQLParser_partition_name_return      pMySQLParser->partition_name(pMySQLParser)
 *  - MySQLParser_partition_logical_name_return      pMySQLParser->partition_logical_name(pMySQLParser)
 *  - MySQLParser_constraint_symbol_name_return      pMySQLParser->constraint_symbol_name(pMySQLParser)
 *  - MySQLParser_foreign_key_symbol_name_return      pMySQLParser->foreign_key_symbol_name(pMySQLParser)
 *  - MySQLParser_collation_name_return      pMySQLParser->collation_name(pMySQLParser)
 *  - MySQLParser_event_name_return      pMySQLParser->event_name(pMySQLParser)
 *  - MySQLParser_user_name_return      pMySQLParser->user_name(pMySQLParser)
 *  - MySQLParser_function_name_return      pMySQLParser->function_name(pMySQLParser)
 *  - MySQLParser_procedure_name_return      pMySQLParser->procedure_name(pMySQLParser)
 *  - MySQLParser_server_name_return      pMySQLParser->server_name(pMySQLParser)
 *  - MySQLParser_wrapper_name_return      pMySQLParser->wrapper_name(pMySQLParser)
 *  - MySQLParser_alias_return      pMySQLParser->alias(pMySQLParser)
 *  - MySQLParser_expression_return      pMySQLParser->expression(pMySQLParser)
 *  - MySQLParser_exp_factor1_return      pMySQLParser->exp_factor1(pMySQLParser)
 *  - MySQLParser_exp_factor2_return      pMySQLParser->exp_factor2(pMySQLParser)
 *  - MySQLParser_exp_factor3_return      pMySQLParser->exp_factor3(pMySQLParser)
 *  - MySQLParser_exp_factor4_return      pMySQLParser->exp_factor4(pMySQLParser)
 *  - MySQLParser_bool_primary_return      pMySQLParser->bool_primary(pMySQLParser)
 *  - MySQLParser_predicate_return      pMySQLParser->predicate(pMySQLParser)
 *  - MySQLParser_bit_expr_return      pMySQLParser->bit_expr(pMySQLParser)
 *  - MySQLParser_factor1_return      pMySQLParser->factor1(pMySQLParser)
 *  - MySQLParser_factor2_return      pMySQLParser->factor2(pMySQLParser)
 *  - MySQLParser_factor3_return      pMySQLParser->factor3(pMySQLParser)
 *  - MySQLParser_factor4_return      pMySQLParser->factor4(pMySQLParser)
 *  - MySQLParser_factor5_return      pMySQLParser->factor5(pMySQLParser)
 *  - MySQLParser_factor6_return      pMySQLParser->factor6(pMySQLParser)
 *  - MySQLParser_factor7_return      pMySQLParser->factor7(pMySQLParser)
 *  - MySQLParser_simple_expr_return      pMySQLParser->simple_expr(pMySQLParser)
 *  - MySQLParser_function_call_return      pMySQLParser->function_call(pMySQLParser)
 *  - MySQLParser_case_when_statement_return      pMySQLParser->case_when_statement(pMySQLParser)
 *  - MySQLParser_case_when_statement1_return      pMySQLParser->case_when_statement1(pMySQLParser)
 *  - MySQLParser_case_when_statement2_return      pMySQLParser->case_when_statement2(pMySQLParser)
 *  - MySQLParser_match_against_statement_return      pMySQLParser->match_against_statement(pMySQLParser)
 *  - MySQLParser_column_spec_return      pMySQLParser->column_spec(pMySQLParser)
 *  - MySQLParser_expression_list_return      pMySQLParser->expression_list(pMySQLParser)
 *  - MySQLParser_interval_expr_return      pMySQLParser->interval_expr(pMySQLParser)
 *  - MySQLParser_table_references_return      pMySQLParser->table_references(pMySQLParser)
 *  - MySQLParser_table_reference_return      pMySQLParser->table_reference(pMySQLParser)
 *  - MySQLParser_table_factor1_return      pMySQLParser->table_factor1(pMySQLParser)
 *  - MySQLParser_table_factor2_return      pMySQLParser->table_factor2(pMySQLParser)
 *  - MySQLParser_table_factor3_return      pMySQLParser->table_factor3(pMySQLParser)
 *  - MySQLParser_table_factor4_return      pMySQLParser->table_factor4(pMySQLParser)
 *  - MySQLParser_table_atom_return      pMySQLParser->table_atom(pMySQLParser)
 *  - MySQLParser_join_condition_return      pMySQLParser->join_condition(pMySQLParser)
 *  - MySQLParser_index_hint_list_return      pMySQLParser->index_hint_list(pMySQLParser)
 *  - MySQLParser_index_options_return      pMySQLParser->index_options(pMySQLParser)
 *  - MySQLParser_index_hint_return      pMySQLParser->index_hint(pMySQLParser)
 *  - MySQLParser_index_list_return      pMySQLParser->index_list(pMySQLParser)
 *  - MySQLParser_partition_clause_return      pMySQLParser->partition_clause(pMySQLParser)
 *  - MySQLParser_partition_names_return      pMySQLParser->partition_names(pMySQLParser)
 *  - MySQLParser_root_statement_return      pMySQLParser->root_statement(pMySQLParser)
 *  - MySQLParser_data_manipulation_statements_return      pMySQLParser->data_manipulation_statements(pMySQLParser)
 *  - MySQLParser_data_definition_statements_return      pMySQLParser->data_definition_statements(pMySQLParser)
 *  - MySQLParser_select_statement_return      pMySQLParser->select_statement(pMySQLParser)
 *  - MySQLParser_select_expression_return      pMySQLParser->select_expression(pMySQLParser)
 *  - MySQLParser_where_clause_return      pMySQLParser->where_clause(pMySQLParser)
 *  - MySQLParser_groupby_clause_return      pMySQLParser->groupby_clause(pMySQLParser)
 *  - MySQLParser_groupby_item_return      pMySQLParser->groupby_item(pMySQLParser)
 *  - MySQLParser_having_clause_return      pMySQLParser->having_clause(pMySQLParser)
 *  - MySQLParser_orderby_clause_return      pMySQLParser->orderby_clause(pMySQLParser)
 *  - MySQLParser_orderby_item_return      pMySQLParser->orderby_item(pMySQLParser)
 *  - MySQLParser_limit_clause_return      pMySQLParser->limit_clause(pMySQLParser)
 *  - MySQLParser_offset_return      pMySQLParser->offset(pMySQLParser)
 *  - MySQLParser_row_count_return      pMySQLParser->row_count(pMySQLParser)
 *  - MySQLParser_select_list_return      pMySQLParser->select_list(pMySQLParser)
 *  - MySQLParser_column_list_return      pMySQLParser->column_list(pMySQLParser)
 *  - MySQLParser_subquery_return      pMySQLParser->subquery(pMySQLParser)
 *  - MySQLParser_table_spec_return      pMySQLParser->table_spec(pMySQLParser)
 *  - MySQLParser_displayed_column_return      pMySQLParser->displayed_column(pMySQLParser)
 *  - MySQLParser_delete_statements_return      pMySQLParser->delete_statements(pMySQLParser)
 *  - MySQLParser_delete_single_table_statement_return      pMySQLParser->delete_single_table_statement(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement1_return      pMySQLParser->delete_multiple_table_statement1(pMySQLParser)
 *  - MySQLParser_delete_multiple_table_statement2_return      pMySQLParser->delete_multiple_table_statement2(pMySQLParser)
 *  - MySQLParser_insert_statements_return      pMySQLParser->insert_statements(pMySQLParser)
 *  - MySQLParser_insert_header_return      pMySQLParser->insert_header(pMySQLParser)
 *  - MySQLParser_insert_subfix_return      pMySQLParser->insert_subfix(pMySQLParser)
 *  - MySQLParser_insert_statement1_return      pMySQLParser->insert_statement1(pMySQLParser)
 *  - MySQLParser_value_list_clause_return      pMySQLParser->value_list_clause(pMySQLParser)
 *  - MySQLParser_column_value_list_return      pMySQLParser->column_value_list(pMySQLParser)
 *  - MySQLParser_insert_statement2_return      pMySQLParser->insert_statement2(pMySQLParser)
 *  - MySQLParser_set_columns_cluase_return      pMySQLParser->set_columns_cluase(pMySQLParser)
 *  - MySQLParser_set_column_cluase_return      pMySQLParser->set_column_cluase(pMySQLParser)
 *  - MySQLParser_insert_statement3_return      pMySQLParser->insert_statement3(pMySQLParser)
 *  - MySQLParser_update_statements_return      pMySQLParser->update_statements(pMySQLParser)
 *  - MySQLParser_single_table_update_statement_return      pMySQLParser->single_table_update_statement(pMySQLParser)
 *  - MySQLParser_multiple_table_update_statement_return      pMySQLParser->multiple_table_update_statement(pMySQLParser)
 *  - MySQLParser_call_statement_return      pMySQLParser->call_statement(pMySQLParser)
 *  - MySQLParser_do_statement_return      pMySQLParser->do_statement(pMySQLParser)
 *  - MySQLParser_handler_statements_return      pMySQLParser->handler_statements(pMySQLParser)
 *  - MySQLParser_open_handler_statement_return      pMySQLParser->open_handler_statement(pMySQLParser)
 *  - MySQLParser_handler_statement1_return      pMySQLParser->handler_statement1(pMySQLParser)
 *  - MySQLParser_handler_statement2_return      pMySQLParser->handler_statement2(pMySQLParser)
 *  - MySQLParser_handler_statement3_return      pMySQLParser->handler_statement3(pMySQLParser)
 *  - MySQLParser_close_handler_statement_return      pMySQLParser->close_handler_statement(pMySQLParser)
 *  - MySQLParser_load_data_statement_return      pMySQLParser->load_data_statement(pMySQLParser)
 *  - MySQLParser_load_xml_statement_return      pMySQLParser->load_xml_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_return      pMySQLParser->replace_statement(pMySQLParser)
 *  - MySQLParser_replace_statement_header_return      pMySQLParser->replace_statement_header(pMySQLParser)
 *  - MySQLParser_replace_statement1_return      pMySQLParser->replace_statement1(pMySQLParser)
 *  - MySQLParser_replace_statement2_return      pMySQLParser->replace_statement2(pMySQLParser)
 *  - MySQLParser_replace_statement3_return      pMySQLParser->replace_statement3(pMySQLParser)
 *  - MySQLParser_create_database_statement_return      pMySQLParser->create_database_statement(pMySQLParser)
 *  - MySQLParser_create_specification_return      pMySQLParser->create_specification(pMySQLParser)
 *  - MySQLParser_alter_database_statements_return      pMySQLParser->alter_database_statements(pMySQLParser)
 *  - MySQLParser_alter_database_statement1_return      pMySQLParser->alter_database_statement1(pMySQLParser)
 *  - MySQLParser_alter_database_statement2_return      pMySQLParser->alter_database_statement2(pMySQLParser)
 *  - MySQLParser_alter_database_specification_return      pMySQLParser->alter_database_specification(pMySQLParser)
 *  - MySQLParser_drop_database_statement_return      pMySQLParser->drop_database_statement(pMySQLParser)
 *  - MySQLParser_create_event_statement_return      pMySQLParser->create_event_statement(pMySQLParser)
 *  - MySQLParser_schedule_definition_return      pMySQLParser->schedule_definition(pMySQLParser)
 *  - MySQLParser_interval_return      pMySQLParser->interval(pMySQLParser)
 *  - MySQLParser_timestamp_return      pMySQLParser->timestamp(pMySQLParser)
 *  - MySQLParser_alter_event_statement_return      pMySQLParser->alter_event_statement(pMySQLParser)
 *  - MySQLParser_drop_event_statement_return      pMySQLParser->drop_event_statement(pMySQLParser)
 *  - MySQLParser_create_index_statement_return      pMySQLParser->create_index_statement(pMySQLParser)
 *  - MySQLParser_algorithm_option_return      pMySQLParser->algorithm_option(pMySQLParser)
 *  - MySQLParser_lock_option_return      pMySQLParser->lock_option(pMySQLParser)
 *  - MySQLParser_drop_index_statement_return      pMySQLParser->drop_index_statement(pMySQLParser)
 *  - MySQLParser_create_server_statement_return      pMySQLParser->create_server_statement(pMySQLParser)
 *  - MySQLParser_create_server_option_return      pMySQLParser->create_server_option(pMySQLParser)
 *  - MySQLParser_alter_server_statement_return      pMySQLParser->alter_server_statement(pMySQLParser)
 *  - MySQLParser_alter_server_option_return      pMySQLParser->alter_server_option(pMySQLParser)
 *  - MySQLParser_drop_server_statement_return      pMySQLParser->drop_server_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement_return      pMySQLParser->create_table_statement(pMySQLParser)
 *  - MySQLParser_create_table_statement1_return      pMySQLParser->create_table_statement1(pMySQLParser)
 *  - MySQLParser_create_table_statement2_return      pMySQLParser->create_table_statement2(pMySQLParser)
 *  - MySQLParser_create_table_statement3_return      pMySQLParser->create_table_statement3(pMySQLParser)
 *  - MySQLParser_create_definition_return      pMySQLParser->create_definition(pMySQLParser)
 *  - MySQLParser_column_definition_return      pMySQLParser->column_definition(pMySQLParser)
 *  - MySQLParser_null_or_notnull_return      pMySQLParser->null_or_notnull(pMySQLParser)
 *  - MySQLParser_column_data_type_header_return      pMySQLParser->column_data_type_header(pMySQLParser)
 *  - MySQLParser_index_column_name_return      pMySQLParser->index_column_name(pMySQLParser)
 *  - MySQLParser_reference_definition_return      pMySQLParser->reference_definition(pMySQLParser)
 *  - MySQLParser_reference_option_return      pMySQLParser->reference_option(pMySQLParser)
 *  - MySQLParser_table_options_return      pMySQLParser->table_options(pMySQLParser)
 *  - MySQLParser_table_option_return      pMySQLParser->table_option(pMySQLParser)
 *  - MySQLParser_partition_options_return      pMySQLParser->partition_options(pMySQLParser)
 *  - MySQLParser_partition_definition_return      pMySQLParser->partition_definition(pMySQLParser)
 *  - MySQLParser_subpartition_definition_return      pMySQLParser->subpartition_definition(pMySQLParser)
 *  - MySQLParser_length_return      pMySQLParser->length(pMySQLParser)
 *  - MySQLParser_alter_table_statement_return      pMySQLParser->alter_table_statement(pMySQLParser)
 *  - MySQLParser_alter_table_specification_return      pMySQLParser->alter_table_specification(pMySQLParser)
 *  - MySQLParser_index_column_names_return      pMySQLParser->index_column_names(pMySQLParser)
 *  - MySQLParser_index_type_return      pMySQLParser->index_type(pMySQLParser)
 *  - MySQLParser_index_option_return      pMySQLParser->index_option(pMySQLParser)
 *  - MySQLParser_column_definitions_return      pMySQLParser->column_definitions(pMySQLParser)
 *  - MySQLParser_rename_table_statement_return      pMySQLParser->rename_table_statement(pMySQLParser)
 *  - MySQLParser_drop_table_statement_return      pMySQLParser->drop_table_statement(pMySQLParser)
 *  - MySQLParser_truncate_table_statement_return      pMySQLParser->truncate_table_statement(pMySQLParser)
 *  - MySQLParser_create_view_statement_return      pMySQLParser->create_view_statement(pMySQLParser)
 *  - MySQLParser_create_view_body_return      pMySQLParser->create_view_body(pMySQLParser)
 *  - MySQLParser_alter_view_statement_return      pMySQLParser->alter_view_statement(pMySQLParser)
 *  - MySQLParser_drop_view_statement_return      pMySQLParser->drop_view_statement(pMySQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLParser_H
#define _MySQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLParser_Ctx_struct MySQLParser, * pMySQLParser;





#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct MySQLParser_relational_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_relational_op_return;

typedef struct MySQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_charset_name_return;

typedef struct MySQLParser_cast_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_cast_data_type_return;

typedef struct MySQLParser_search_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_search_modifier_return;

typedef struct MySQLParser_transcoding_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_transcoding_name_return;

typedef struct MySQLParser_interval_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_unit_return;

typedef struct MySQLParser_collation_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_names_return;

typedef struct MySQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_string_literal_return;

typedef struct MySQLParser_number_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_literal_return;

typedef struct MySQLParser_hex_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_hex_literal_return;

typedef struct MySQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_boolean_literal_return;

typedef struct MySQLParser_bit_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_literal_return;

typedef struct MySQLParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_literal_value_return;

typedef struct MySQLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_functionList_return;

typedef struct MySQLParser_number_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_number_functions_return;

typedef struct MySQLParser_char_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_char_functions_return;

typedef struct MySQLParser_time_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_time_functions_return;

typedef struct MySQLParser_other_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_other_functions_return;

typedef struct MySQLParser_group_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_group_functions_return;

typedef struct MySQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schema_name_return;

typedef struct MySQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_name_return;

typedef struct MySQLParser_engine_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_engine_name_return;

typedef struct MySQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_name_return;

typedef struct MySQLParser_view_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_view_name_return;

typedef struct MySQLParser_parser_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_parser_name_return;

typedef struct MySQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_name_return;

typedef struct MySQLParser_partition_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_name_return;

typedef struct MySQLParser_partition_logical_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_logical_name_return;

typedef struct MySQLParser_constraint_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_constraint_symbol_name_return;

typedef struct MySQLParser_foreign_key_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_foreign_key_symbol_name_return;

typedef struct MySQLParser_collation_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_collation_name_return;

typedef struct MySQLParser_event_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_event_name_return;

typedef struct MySQLParser_user_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_user_name_return;

typedef struct MySQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_name_return;

typedef struct MySQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_procedure_name_return;

typedef struct MySQLParser_server_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_server_name_return;

typedef struct MySQLParser_wrapper_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_wrapper_name_return;

typedef struct MySQLParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alias_return;

typedef struct MySQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_return;

typedef struct MySQLParser_exp_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor1_return;

typedef struct MySQLParser_exp_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor2_return;

typedef struct MySQLParser_exp_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor3_return;

typedef struct MySQLParser_exp_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_exp_factor4_return;

typedef struct MySQLParser_bool_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bool_primary_return;

typedef struct MySQLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_predicate_return;

typedef struct MySQLParser_bit_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_bit_expr_return;

typedef struct MySQLParser_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor1_return;

typedef struct MySQLParser_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor2_return;

typedef struct MySQLParser_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor3_return;

typedef struct MySQLParser_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor4_return;

typedef struct MySQLParser_factor5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor5_return;

typedef struct MySQLParser_factor6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor6_return;

typedef struct MySQLParser_factor7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_factor7_return;

typedef struct MySQLParser_simple_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_simple_expr_return;

typedef struct MySQLParser_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_function_call_return;

typedef struct MySQLParser_case_when_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement_return;

typedef struct MySQLParser_case_when_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement1_return;

typedef struct MySQLParser_case_when_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_case_when_statement2_return;

typedef struct MySQLParser_match_against_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_match_against_statement_return;

typedef struct MySQLParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_spec_return;

typedef struct MySQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_expression_list_return;

typedef struct MySQLParser_interval_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_expr_return;

typedef struct MySQLParser_table_references_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_references_return;

typedef struct MySQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_reference_return;

typedef struct MySQLParser_table_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor1_return;

typedef struct MySQLParser_table_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor2_return;

typedef struct MySQLParser_table_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor3_return;

typedef struct MySQLParser_table_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_factor4_return;

typedef struct MySQLParser_table_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_atom_return;

typedef struct MySQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_join_condition_return;

typedef struct MySQLParser_index_hint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_list_return;

typedef struct MySQLParser_index_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_options_return;

typedef struct MySQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_hint_return;

typedef struct MySQLParser_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_list_return;

typedef struct MySQLParser_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_clause_return;

typedef struct MySQLParser_partition_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_names_return;

typedef struct MySQLParser_root_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_root_statement_return;

typedef struct MySQLParser_data_manipulation_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_manipulation_statements_return;

typedef struct MySQLParser_data_definition_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_data_definition_statements_return;

typedef struct MySQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_statement_return;

typedef struct MySQLParser_select_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_expression_return;

typedef struct MySQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_where_clause_return;

typedef struct MySQLParser_groupby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_clause_return;

typedef struct MySQLParser_groupby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_groupby_item_return;

typedef struct MySQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_having_clause_return;

typedef struct MySQLParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_clause_return;

typedef struct MySQLParser_orderby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_orderby_item_return;

typedef struct MySQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_limit_clause_return;

typedef struct MySQLParser_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_offset_return;

typedef struct MySQLParser_row_count_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_row_count_return;

typedef struct MySQLParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_select_list_return;

typedef struct MySQLParser_column_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_list_return;

typedef struct MySQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subquery_return;

typedef struct MySQLParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_spec_return;

typedef struct MySQLParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_displayed_column_return;

typedef struct MySQLParser_delete_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_statements_return;

typedef struct MySQLParser_delete_single_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_single_table_statement_return;

typedef struct MySQLParser_delete_multiple_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement1_return;

typedef struct MySQLParser_delete_multiple_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_delete_multiple_table_statement2_return;

typedef struct MySQLParser_insert_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statements_return;

typedef struct MySQLParser_insert_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_header_return;

typedef struct MySQLParser_insert_subfix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_subfix_return;

typedef struct MySQLParser_insert_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement1_return;

typedef struct MySQLParser_value_list_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_value_list_clause_return;

typedef struct MySQLParser_column_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_value_list_return;

typedef struct MySQLParser_insert_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement2_return;

typedef struct MySQLParser_set_columns_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_columns_cluase_return;

typedef struct MySQLParser_set_column_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_set_column_cluase_return;

typedef struct MySQLParser_insert_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_insert_statement3_return;

typedef struct MySQLParser_update_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_update_statements_return;

typedef struct MySQLParser_single_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_single_table_update_statement_return;

typedef struct MySQLParser_multiple_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_multiple_table_update_statement_return;

typedef struct MySQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_call_statement_return;

typedef struct MySQLParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_do_statement_return;

typedef struct MySQLParser_handler_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statements_return;

typedef struct MySQLParser_open_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_open_handler_statement_return;

typedef struct MySQLParser_handler_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement1_return;

typedef struct MySQLParser_handler_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement2_return;

typedef struct MySQLParser_handler_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_handler_statement3_return;

typedef struct MySQLParser_close_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_close_handler_statement_return;

typedef struct MySQLParser_load_data_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_data_statement_return;

typedef struct MySQLParser_load_xml_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_load_xml_statement_return;

typedef struct MySQLParser_replace_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_return;

typedef struct MySQLParser_replace_statement_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement_header_return;

typedef struct MySQLParser_replace_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement1_return;

typedef struct MySQLParser_replace_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement2_return;

typedef struct MySQLParser_replace_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_replace_statement3_return;

typedef struct MySQLParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_database_statement_return;

typedef struct MySQLParser_create_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_specification_return;

typedef struct MySQLParser_alter_database_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statements_return;

typedef struct MySQLParser_alter_database_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement1_return;

typedef struct MySQLParser_alter_database_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_statement2_return;

typedef struct MySQLParser_alter_database_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_database_specification_return;

typedef struct MySQLParser_drop_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_database_statement_return;

typedef struct MySQLParser_create_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_event_statement_return;

typedef struct MySQLParser_schedule_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_schedule_definition_return;

typedef struct MySQLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_interval_return;

typedef struct MySQLParser_timestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_timestamp_return;

typedef struct MySQLParser_alter_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_event_statement_return;

typedef struct MySQLParser_drop_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_event_statement_return;

typedef struct MySQLParser_create_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_index_statement_return;

typedef struct MySQLParser_algorithm_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_algorithm_option_return;

typedef struct MySQLParser_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_lock_option_return;

typedef struct MySQLParser_drop_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_index_statement_return;

typedef struct MySQLParser_create_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_statement_return;

typedef struct MySQLParser_create_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_server_option_return;

typedef struct MySQLParser_alter_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_statement_return;

typedef struct MySQLParser_alter_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_server_option_return;

typedef struct MySQLParser_drop_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_server_statement_return;

typedef struct MySQLParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement_return;

typedef struct MySQLParser_create_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement1_return;

typedef struct MySQLParser_create_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement2_return;

typedef struct MySQLParser_create_table_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_table_statement3_return;

typedef struct MySQLParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_definition_return;

typedef struct MySQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definition_return;

typedef struct MySQLParser_null_or_notnull_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_null_or_notnull_return;

typedef struct MySQLParser_column_data_type_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_data_type_header_return;

typedef struct MySQLParser_index_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_name_return;

typedef struct MySQLParser_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_definition_return;

typedef struct MySQLParser_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_reference_option_return;

typedef struct MySQLParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_options_return;

typedef struct MySQLParser_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_table_option_return;

typedef struct MySQLParser_partition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_options_return;

typedef struct MySQLParser_partition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_partition_definition_return;

typedef struct MySQLParser_subpartition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_subpartition_definition_return;

typedef struct MySQLParser_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_length_return;

typedef struct MySQLParser_alter_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_statement_return;

typedef struct MySQLParser_alter_table_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_table_specification_return;

typedef struct MySQLParser_index_column_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_column_names_return;

typedef struct MySQLParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_type_return;

typedef struct MySQLParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_index_option_return;

typedef struct MySQLParser_column_definitions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_column_definitions_return;

typedef struct MySQLParser_rename_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_rename_table_statement_return;

typedef struct MySQLParser_drop_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_table_statement_return;

typedef struct MySQLParser_truncate_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_truncate_table_statement_return;

typedef struct MySQLParser_create_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_statement_return;

typedef struct MySQLParser_create_view_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_create_view_body_return;

typedef struct MySQLParser_alter_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_alter_view_statement_return;

typedef struct MySQLParser_drop_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MySQLParser_drop_view_statement_return;



/** Context tracking structure for MySQLParser
 */
struct MySQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     MySQLParser_relational_op_return (*relational_op)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_charset_name_return (*charset_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_cast_data_type_return (*cast_data_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_search_modifier_return (*search_modifier)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_transcoding_name_return (*transcoding_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_unit_return (*interval_unit)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_names_return (*collation_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_string_literal_return (*string_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_literal_return (*number_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_hex_literal_return (*hex_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_boolean_literal_return (*boolean_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_literal_return (*bit_literal)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_literal_value_return (*literal_value)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_functionList_return (*functionList)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_number_functions_return (*number_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_char_functions_return (*char_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_time_functions_return (*time_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_other_functions_return (*other_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_group_functions_return (*group_functions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schema_name_return (*schema_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_name_return (*table_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_engine_name_return (*engine_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_name_return (*column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_view_name_return (*view_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_parser_name_return (*parser_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_name_return (*index_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_name_return (*partition_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_logical_name_return (*partition_logical_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_constraint_symbol_name_return (*constraint_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_foreign_key_symbol_name_return (*foreign_key_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_collation_name_return (*collation_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_event_name_return (*event_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_user_name_return (*user_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_name_return (*function_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_procedure_name_return (*procedure_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_server_name_return (*server_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_wrapper_name_return (*wrapper_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alias_return (*alias)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_return (*expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor1_return (*exp_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor2_return (*exp_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor3_return (*exp_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_exp_factor4_return (*exp_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bool_primary_return (*bool_primary)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_predicate_return (*predicate)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_bit_expr_return (*bit_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor1_return (*factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor2_return (*factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor3_return (*factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor4_return (*factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor5_return (*factor5)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor6_return (*factor6)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_factor7_return (*factor7)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_simple_expr_return (*simple_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_function_call_return (*function_call)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement_return (*case_when_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement1_return (*case_when_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_case_when_statement2_return (*case_when_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_match_against_statement_return (*match_against_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_spec_return (*column_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_expression_list_return (*expression_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_expr_return (*interval_expr)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_references_return (*table_references)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_reference_return (*table_reference)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor1_return (*table_factor1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor2_return (*table_factor2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor3_return (*table_factor3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_factor4_return (*table_factor4)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_atom_return (*table_atom)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_join_condition_return (*join_condition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_list_return (*index_hint_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_options_return (*index_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_hint_return (*index_hint)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_list_return (*index_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_clause_return (*partition_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_names_return (*partition_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_root_statement_return (*root_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_manipulation_statements_return (*data_manipulation_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_data_definition_statements_return (*data_definition_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_statement_return (*select_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_expression_return (*select_expression)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_where_clause_return (*where_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_clause_return (*groupby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_groupby_item_return (*groupby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_having_clause_return (*having_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_clause_return (*orderby_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_orderby_item_return (*orderby_item)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_limit_clause_return (*limit_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_offset_return (*offset)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_row_count_return (*row_count)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_select_list_return (*select_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_list_return (*column_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subquery_return (*subquery)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_spec_return (*table_spec)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_displayed_column_return (*displayed_column)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_statements_return (*delete_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_single_table_statement_return (*delete_single_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement1_return (*delete_multiple_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_delete_multiple_table_statement2_return (*delete_multiple_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statements_return (*insert_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_header_return (*insert_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_subfix_return (*insert_subfix)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement1_return (*insert_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_value_list_clause_return (*value_list_clause)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_value_list_return (*column_value_list)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement2_return (*insert_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_columns_cluase_return (*set_columns_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_set_column_cluase_return (*set_column_cluase)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_insert_statement3_return (*insert_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_update_statements_return (*update_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_single_table_update_statement_return (*single_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_multiple_table_update_statement_return (*multiple_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_call_statement_return (*call_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_do_statement_return (*do_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statements_return (*handler_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_open_handler_statement_return (*open_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement1_return (*handler_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement2_return (*handler_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_handler_statement3_return (*handler_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_close_handler_statement_return (*close_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_data_statement_return (*load_data_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_load_xml_statement_return (*load_xml_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_return (*replace_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement_header_return (*replace_statement_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement1_return (*replace_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement2_return (*replace_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_replace_statement3_return (*replace_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_database_statement_return (*create_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_specification_return (*create_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statements_return (*alter_database_statements)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement1_return (*alter_database_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_statement2_return (*alter_database_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_database_specification_return (*alter_database_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_database_statement_return (*drop_database_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_event_statement_return (*create_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_schedule_definition_return (*schedule_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_interval_return (*interval)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_timestamp_return (*timestamp)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_event_statement_return (*alter_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_event_statement_return (*drop_event_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_index_statement_return (*create_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_algorithm_option_return (*algorithm_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_lock_option_return (*lock_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_index_statement_return (*drop_index_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_statement_return (*create_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_server_option_return (*create_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_statement_return (*alter_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_server_option_return (*alter_server_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_server_statement_return (*drop_server_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement_return (*create_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement1_return (*create_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement2_return (*create_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_table_statement3_return (*create_table_statement3)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_definition_return (*create_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definition_return (*column_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_null_or_notnull_return (*null_or_notnull)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_data_type_header_return (*column_data_type_header)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_name_return (*index_column_name)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_definition_return (*reference_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_reference_option_return (*reference_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_options_return (*table_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_table_option_return (*table_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_options_return (*partition_options)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_partition_definition_return (*partition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_subpartition_definition_return (*subpartition_definition)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_length_return (*length)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_statement_return (*alter_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_table_specification_return (*alter_table_specification)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_column_names_return (*index_column_names)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_type_return (*index_type)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_index_option_return (*index_option)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_column_definitions_return (*column_definitions)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_rename_table_statement_return (*rename_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_table_statement_return (*drop_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_truncate_table_statement_return (*truncate_table_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_statement_return (*create_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_create_view_body_return (*create_view_body)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_alter_view_statement_return (*alter_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     MySQLParser_drop_view_statement_return (*drop_view_statement)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred54_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred55_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred268_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred269_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred270_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred271_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred274_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred275_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred278_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred280_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred283_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred285_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred286_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred288_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred289_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred291_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred292_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred293_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred295_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred297_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred301_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred303_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred307_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred324_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred325_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred335_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred340_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred343_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred345_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred349_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred354_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred373_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred425_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred426_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred432_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred438_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred469_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred470_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred474_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred477_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred489_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred858_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred963_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1042_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct MySQLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLParser MySQLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pMySQLParser MySQLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define MASTER_LOG_FILE_SYM      380
#define GEOMETRYCOLLECTION      265
#define D_      7
#define DEGREES      182
#define NAME_CONST      429
#define CASCADED      87
#define PRECISION      485
#define KOI8U      329
#define BACKUP_SYM      61
#define MASTER_SYM      393
#define CONCAT_WS      120
#define E_      8
#define REORGANIZE_SYM      523
#define FETCH_SYM      240
#define RPAREN      751
#define AGGREGATE_SYM      41
#define SQLSTATE_SYM      596
#define REGEXP      515
#define MEDIUMINT      407
#define GET      741
#define MASTER_PASSWORD_SYM      382
#define SHOW      568
#define DIVIDE      733
#define RBRACK      753
#define F_      9
#define ASC      49
#define NEW_SYM      435
#define TRANSACTION      657
#define DAY_MINUTE      169
#define CURDATE      152
#define LEADING      340
#define OCT      447
#define G_      10
#define SL_COMMENT      776
#define PLUGIN_SYM      478
#define USER      691
#define INVOKER_SYM      313
#define SHUTDOWN      569
#define KOI8R      328
#define LOWER      370
#define MAXVALUE_SYM      403
#define GET_FORMAT      267
#define AVG_ROW_LENGTH      60
#define MAX_ROWS      399
#define CONSTRAINT      126
#define OPTIONS_SYM      458
#define SQL_SMALL_RESULT      592
#define TIME_SYM      642
#define LBRACK      754
#define INTERVAL_SYM      311
#define UUID      700
#define CURRENT_USER      154
#define BTREE_SYM      81
#define SLEEP      576
#define GROUP_SYM      274
#define RANGE_SYM      503
#define BIT_NUM      766
#define LINES      350
#define MULTIPOINT      426
#define SERIALIZABLE_SYM      561
#define SECOND_MICROSECOND      555
#define SQLEXCEPTION_SYM      595
#define ADDDATE      35
#define CONNECTION_ID      123
#define LEVEL_SYM      346
#define NULL_SYM      444
#define INTEGER_NUM      763
#define FAST_SYM      237
#define COMPRESS      117
#define AVG      59
#define A_      4
#define TRUNCATE      663
#define GROUP_CONCAT      273
#define MINUTE_SECOND      418
#define MASTER_SSL_CIPHER_SYM      389
#define LONGTEXT      367
#define B_      5
#define INSTR      308
#define HEX_DIGIT      765
#define RIGHT      539
#define ATAN2      55
#define GB2312      262
#define MINUS      756
#define SUSPEND_SYM      624
#define QUICK      499
#define SNAPSHOT_SYM      578
#define COLON      747
#define OPTIMIZE      455
#define COLUMN_SYM      110
#define MASTER_SSL_CA_SYM      386
#define DATABASE      157
#define ENCRYPT      211
#define C_      6
#define USE_SYM      690
#define VIEW_SYM      711
#define SQL_BIG_RESULT      587
#define TEXT_STRING      768
#define ARROW      737
#define NATURAL      433
#define DETERMINISTIC_SYM      190
#define FORCE_SYM      250
#define PARTITION_SYM      470
#define LESS_SYM      345
#define EXTENT_SIZE_SYM      234
#define RESET_SYM      530
#define LN      353
#define SQL_CALC_FOUND_ROWS      590
#define INT_SYM      309
#define CONVERT_SYM      132
#define FIND_IN_SET      243
#define BIT_LENGTH      72
#define COUNT      137
#define SUBSTRING_INDEX      620
#define L_      15
#define BENCHMARK      64
#define DATEDIFF      164
#define MASTER_HOST_SYM      379
#define MASTER_SERVER_ID_SYM      385
#define BIT_OR      73
#define XML_SYM      727
#define SWITCHES_SYM      627
#define MEDIUMBLOB      406
#define LATIN1_BIN      334
#define RTREE_SYM      548
#define LPAD      371
#define M_      16
#define MASTER_LOG_POS_SYM      381
#define READS_SYM      507
#define COALESCE      104
#define TINYTEXT      650
#define ON      451
#define SHARED_SYM      566
#define MATCH      395
#define STRAIGHT_JOIN      613
#define FLOOR      247
#define COLLATE_SYM      107
#define COMMITTED_SYM      114
#define NCHAR_SYM      434
#define AGAINST      40
#define ISSUER_SYM      320
#define N_      17
#define PAGE_SYM      467
#define FIELDS_SYM      239
#define SHIFT_RIGHT      744
#define DISCARD      193
#define TO_BASE64      652
#define DOUBLE_SYM      198
#define STDDEV      607
#define CONCURRENT      121
#define PI      477
#define THEN_SYM      640
#define O_      18
#define TIMESTAMP      645
#define UPPER      687
#define DIRECTORY_SYM      191
#define LOAD_FILE      355
#define BIT_AND      71
#define YEAR      729
#define ROW_FORMAT_SYM      544
#define LOOP_SYM      368
#define ADD_SYM      34
#define MOD_SYM      734
#define NAME_SYM      430
#define H_      11
#define UNDO_SYM      673
#define ID      769
#define CROSS      150
#define LENGTH      344
#define IF      290
#define QUERY_SYM      498
#define DEALLOCATE_SYM      175
#define MD5      404
#define EXPORT_SET      232
#define REFERENCES      514
#define OJ_SYM      449
#define COMMIT_SYM      113
#define ELSE_SYM      205
#define PARTITIONS_SYM      472
#define MASTER_SSL_VERIFY_SERVER_CERT      392
#define I_      12
#define SQL_THREAD      594
#define IO_SYM      314
#define WITH      721
#define STATUS_SYM      605
#define IS_SYM      317
#define REDOFILE_SYM      512
#define UTF32      698
#define GBK      263
#define UNHEX      675
#define BEGIN_SYM      63
#define DEFAULT      180
#define J_      13
#define PURGE      496
#define REDO_BUFFER_SIZE_SYM      511
#define DO_SYM      197
#define LAST_INSERT_ID      332
#define STRCMP      614
#define END_SYM      212
#define PROCEDURE      491
#define SUBPARTITION_SYM      617
#define LATIN1_GENERAL_CS      335
#define COMPACT_SYM      115
#define MODIFY_SYM      422
#define ERRORS      217
#define K_      14
#define VARIANCE      708
#define CHANGED      94
#define EACH_SYM      204
#define MINUTE      416
#define COMPRESSED_SYM      118
#define LEAVES      342
#define GREEK      272
#define ASENSITIVE_SYM      51
#define REPEATABLE_SYM      526
#define INSERT_METHOD      306
#define MOD      419
#define BOOL_SYM      78
#define U_      24
#define TRANSACTIONAL_SYM      658
#define PROFILE_SYM      494
#define SONAME_SYM      580
#define AS_SYM      48
#define STDDEV_POP      608
#define EXIT_SYM      229
#define ZEROFILL      732
#define PREV_SYM      488
#define T_      23
#define UTF16      697
#define CONNECTION_SYM      124
#define BY_SYM      82
#define ARMSCII8      47
#define MASTER_SSL_CAPATH_SYM      387
#define MONTHNAME      424
#define STDDEV_SAMP      609
#define ROLLUP_SYM      541
#define CHARACTER_SYM      97
#define TIS620      651
#define YEARWEEK      731
#define IS_USED_LOCK      318
#define LOAD      354
#define MEDIUM_SYM      405
#define TRAILING      656
#define TIMESTAMPADD      646
#define W_      26
#define DEFINER      181
#define ROLLBACK      540
#define RESTORE_SYM      532
#define UNCOMPRESS      669
#define TABLESPACE      633
#define ABS      30
#define INET_ATON      297
#define REAL      508
#define PROFILES_SYM      495
#define DECLARE_SYM      178
#define UNION_SYM      678
#define RADIANS      501
#define V_      25
#define MIN_ROWS      415
#define NONE_SYM      441
#define SEPARATOR_SYM      559
#define REVERSE      537
#define INTEGER_SYM      310
#define TO_DAYS      653
#define TEMPTABLE_SYM      636
#define HEBREW      278
#define REBUILD_SYM      509
#define SQL_BUFFER_RESULT      588
#define PERIOD_ADD      474
#define MICROSECOND      411
#define SUPER_SYM      623
#define ALL_FIELDS      745
#define CONTAINS_SYM      127
#define Q_      20
#define SWAPS_SYM      625
#define LOCKS_SYM      359
#define UNCOMPRESSED_LENGTH      670
#define PARSER_SYM      468
#define BLOCK_SYM      77
#define SUBJECT_SYM      616
#define X509_SYM      725
#define HANDLER_SYM      275
#define EUCKR      221
#define REPLACE      527
#define P_      19
#define NO_WAIT_SYM      438
#define INDEX_SYM      295
#define CP932      145
#define NUMERIC_SYM      445
#define PACK_KEYS_SYM      465
#define MACROMAN      374
#define DES_ENCRYPT      187
#define NVARCHAR_SYM      446
#define FALSE_SYM      236
#define MID      412
#define MEMORY_SYM      409
#define HOUR      284
#define THAN_SYM      639
#define CHANGE      93
#define FLUSH_SYM      248
#define S_      22
#define COLUMNS_SYM      111
#define NEGATION      757
#define BIGINT      67
#define EXPANSION_SYM      231
#define BIT_XOR      75
#define HOUR_MINUTE      286
#define VALUE_SYM      701
#define ORDER_SYM      460
#define UNINSTALL_SYM      677
#define IS_FREE_LOCK      316
#define BIN      68
#define BETWEEN      65
#define R_      21
#define MAX_QUERIES_PER_HOUR      398
#define POINT_SYM      480
#define AUTHORS_SYM      56
#define VARYING      709
#define SSL_SYM      599
#define MAKETIME      377
#define DAYNAME      171
#define CASCADE      86
#define FAULTS_SYM      238
#define TYPE_SYM      664
#define FULL      259
#define NAMES_SYM      431
#define SOUNDEX      581
#define INSERT      305
#define PREPARE_SYM      486
#define LOG2      362
#define MASTER_POS_WAIT      384
#define FLOAT_SYM      246
#define EVERY_SYM      224
#define UNDOFILE_SYM      674
#define KEYBCS2      325
#define CONCAT      119
#define OLD_PASSWORD      450
#define UNKNOWN_SYM      681
#define CODE_SYM      105
#define VERSION_SYM      710
#define POWER_OP      760
#define HOUR_SECOND      287
#define PASSWORD      473
#define CASE_SYM      88
#define STR_TO_DATE      612
#define GEOSTD8      266
#define ENCODE      210
#define UJIS      667
#define Y_      28
#define MAKE_SET      375
#define CEILING      91
#define GLOBAL_SYM      269
#define FROM_DAYS      257
#define DECIMAL_SYM      177
#define COPY_SYM      134
#define HP8      288
#define WEEKOFYEAR      716
#define AFTER_SYM      39
#define PROCESSLIST_SYM      493
#define READ_SYM      505
#define ORD      459
#define LOCK      358
#define RELAY_LOG_POS_SYM      517
#define ROWS_SYM      546
#define ML_COMMENT      777
#define X_      27
#define PRESERVE_SYM      487
#define SJIS      574
#define LINESTRING      351
#define SYSDATE      628
#define HIGH_PRIORITY      281
#define ALL      43
#define COERCIBILITY      106
#define OUTFILE      463
#define ASCII_SYM      50
#define DOT      748
#define CURRENT_TIMESTAMP      153
#define RELOAD      520
#define PARTITIONING_SYM      471
#define PARTIAL      469
#define PLUGINS_SYM      479
#define USER_VAR_SUBFIX4      773
#define ISOLATION      319
#define USER_VAR_SUBFIX3      772
#define SIMPLE_SYM      572
#define USER_VAR_SUBFIX2      771
#define USER_VAR_SUBFIX1      770
#define WHILE_SYM      720
#define XOR      728
#define CRC32      147
#define BYTE_SYM      83
#define MUTEX_SYM      428
#define HOST_SYM      282
#define VALUES      702
#define INDEXES      296
#define DYNAMIC_SYM      203
#define ROW_SYM      545
#define ENCLOSED      209
#define DUPLICATE_SYM      202
#define EXECUTE_SYM      226
#define LINEAR_SYM      349
#define HELP_SYM      279
#define ANY      46
#define BEFORE_SYM      62
#define Z_      29
#define ESCAPE_SYM      218
#define CONTRIBUTORS_SYM      130
#define CONTEXT_SYM      128
#define CONV      131
#define VARIABLES      707
#define SIGNED_SYM      571
#define FIXED_SYM      245
#define KEYS      326
#define HASH_SYM      276
#define CAST_SYM      89
#define BINARY      69
#define MAX_SYM      396
#define ENGINE_SYM      214
#define MASTER_CONNECT_RETRY      378
#define MAX_USER_CONNECTIONS_SYM      402
#define RPAD      547
#define SMALLINT      577
#define INSENSITIVE_SYM      304
#define DATAFILE_SYM      158
#define LIKE_SYM      347
#define LAST_DAY      331
#define INNER_SYM      301
#define MULTILINESTRING      425
#define RELAY_LOG_FILE_SYM      516
#define CACHE_SYM      84
#define CREATE      148
#define SUBPARTITIONS_SYM      618
#define RETURN_SYM      535
#define INITIAL_SIZE_SYM      300
#define TIME_TO_SEC      643
#define SPATIAL_SYM      585
#define SQL_CACHE_SYM      589
#define SQLWARNING_SYM      597
#define ACOS      32
#define CPU_SYM      146
#define LATIN2      337
#define LATIN1      336
#define LATIN7      339
#define HEX_DIGIT_FRAGMENT      764
#define DAYOFYEAR      174
#define POWER      484
#define LATIN5      338
#define GEOMETRY_SYM      264
#define DUMPFILE      201
#define RESTRICT      533
#define DES_KEY_FILE      188
#define INSTALL_SYM      307
#define LOW_PRIORITY      369
#define ASIN      52
#define DATE_SUB      162
#define SYSTEM_USER      629
#define UTF8      699
#define LEAVE_SYM      341
#define ALTER      44
#define SENSITIVE_SYM      558
#define NODEGROUP_SYM      440
#define TIME_FORMAT      641
#define LONGBLOB      366
#define TABLE      630
#define VARCHAR      706
#define SESSION_USER      564
#define SUM      622
#define ITERATE_SYM      321
#define MULTIPOLYGON      427
#define WHITE_SPACE      775
#define CHAR_LENGTH      96
#define BITAND      759
#define UNIX_TIMESTAMP      680
#define ANALYZE_SYM      45
#define EVENTS_SYM      223
#define STRING_SYM      615
#define LEFT      343
#define BIT_SYM      74
#define EQ_SYM      738
#define STD      606
#define PLUS      755
#define OUTER      462
#define CP866      144
#define MASTER_USER_SYM      394
#define MINUTE_MICROSECOND      417
#define REMOVE_SYM      521
#define COMPLETION_SYM      116
#define HAVING      277
#define CHECK_SYM      99
#define SEMI      746
#define NOT_EQ      739
#define VERTBAR      758
#define CP852      143
#define DATE_SYM      163
#define EXTENDED_SYM      233
#define STOP_SYM      610
#define CP850      142
#define FROM_BASE64      256
#define FORMAT      252
#define MASTER_PORT_SYM      383
#define CLOSE_SYM      103
#define WEEK      714
#define TYPES_SYM      665
#define UNSIGNED_SYM      683
#define POLYGON      481
#define CHAR      95
#define TERMINATED      637
#define CURTIME      156
#define HOSTS_SYM      283
#define QUOTE      500
#define ENDS_SYM      213
#define REQUIRE_SYM      529
#define QUARTER      497
#define TABLE_CHECKSUM_SYM      631
#define SWE7      626
#define TAN      634
#define PERIOD_DIFF      475
#define HOUR_MICROSECOND      285
#define AND_SYM      736
#define BIG5      66
#define SELECT      557
#define INTO      312
#define UNCOMMITTED_SYM      668
#define DELAYED_SYM      184
#define MAX_CONNECTIONS_PER_HOUR      397
#define LTRIM      372
#define INOUT_SYM      302
#define DAY_MICROSECOND      168
#define SECOND      554
#define FILE_SYM      242
#define LOG10      361
#define UNICODE_SYM      676
#define SQL_NO_CACHE_SYM      591
#define NO_WRITE_TO_BINLOG      439
#define SPECIFIC_SYM      586
#define CIPHER_SYM      101
#define FOR_SYM      249
#define MAX_UPDATES_PER_HOUR      401
#define TABLES      632
#define SHIFT_LEFT      743
#define DUAL_SYM      200
#define TRIGGERS_SYM      660
#define DELETE_SYM      185
#define FOUND_ROWS      253
#define ADDTIME      36
#define MODE_SYM      420
#define PORT_SYM      482
#define ROUND      542
#define ONE_SYM      453
#define KEY_BLOCK_SIZE      323
#define GET_LOCK      268
#define IN_SYM      294
#define DISTINCTROW      196
#define STARTS_SYM      604
#define WHERE      719
#define VAR_SAMP      704
#define ROUTINE_SYM      543
#define UTC_TIMESTAMP      695
#define LIMIT      348
#define SPACE      584
#define ENABLE_SYM      208
#define DATA_SYM      159
#define USAGE      688
#define YEAR_MONTH      730
#define MACCE      373
#define HEX      280
#define MASTER_SSL_KEY_SYM      390
#define COMMA      749
#define OFFSET_SYM      448
#define READ_WRITE_SYM      506
#define WAIT_SYM      712
#define AT_SYM      53
#define CHECKSUM_SYM      100
#define USE_FRM      689
#define FULLTEXT_SYM      260
#define EUCJPMS      220
#define GRANT      270
#define VARBINARY      705
#define OPEN_SYM      454
#define DATETIME      165
#define UNLOCK_SYM      682
#define LONG_SYM      365
#define SOUNDS_SYM      582
#define DEC8      176
#define MODIFIES_SYM      421
#define SQRT      598
#define ACCESSIBLE_SYM      31
#define SUBSTRING      619
#define DAY_SECOND      170
#define BLOB_SYM      76
#define LOCATE      357
#define CROSECOND      149
#define MIGRATE_SYM      413
#define RESOURCES      531
#define INFILE      299
#define LET      740
#define IGNORE_SYM      292
#define DES_DECRYPT      186
#define UTF16LE      696
#define USING_SYM      692
#define LOCAL_SYM      356
#define UNIQUE_SYM      679
#define NOW      443
#define FOREIGN      251
#define EOF      -1
#define PRIVILEGES      490
#define ELSIF_SYM      206
#define ACTION      33
#define MONTH      423
#define UNDEFINED_SYM      671
#define UTC_DATE      693
#define IDENTIFIED_SYM      289
#define USER_VAR      774
#define IMPORT      293
#define WEIGHT_STRING      717
#define SIN      573
#define NO_SYM      437
#define STORAGE_SYM      611
#define AUTO_INCREMENT      57
#define TRUE_SYM      662
#define TEXT_SYM      638
#define SERIAL_SYM      560
#define TINYBLOB      648
#define DAYOFWEEK      173
#define WRAPPER_SYM      723
#define LOGFILE_SYM      363
#define DELAY_KEY_WRITE_SYM      183
#define SLAVE      575
#define SHARE_SYM      567
#define ELT      207
#define PRIMARY_SYM      489
#define AES_DECRYPT      37
#define MEDIUMTEXT      408
#define MERGE_SYM      410
#define UPGRADE_SYM      686
#define KILL_SYM      327
#define LANGUAGE      330
#define CALL_SYM      85
#define MAKEDATE      376
#define REAL_NUMBER      767
#define GRANTS      271
#define TRIM      661
#define REPEAT      525
#define UTC_TIME      694
#define MASTER_SSL_SYM      391
#define DISABLE_SYM      192
#define STATS_AUTO_RECALC      602
#define CONVERT_TZ      133
#define RENAME      522
#define REPLICATION      528
#define OPTION      456
#define JOIN_SYM      322
#define START_SYM      600
#define EXCLUSIVE_SYM      227
#define OPTIONALLY      457
#define OUT_SYM      461
#define RESUME_SYM      534
#define NEXT_SYM      436
#define ENGINES_SYM      215
#define CHARSET      98
#define SOCKET_SYM      579
#define DAYOFMONTH      172
#define BINLOG_SYM      70
#define ASTERISK      750
#define LPAREN      752
#define RECOVER_SYM      510
#define DAY_HOUR      167
#define COLLATION      108
#define RAND      502
#define TIMEDIFF      644
#define FROM_UNIXTIME      258
#define EXISTS      228
#define INET_NTOA      298
#define RETURNS_SYM      536
#define UCS2      666
#define WRITE_SYM      724
#define LOGS_SYM      364
#define SESSION_SYM      563
#define TO_SYM      655
#define CONSISTENT_SYM      125
#define REDUNDANT_SYM      513
#define CLIENT_SYM      102
#define SCHEMA      552
#define ENUM      216
#define DROP      199
#define MASTER_SSL_CERT_SYM      388
#define DISK_SYM      194
#define REVOKE      538
#define PROCESS      492
#define XA_SYM      726
#define SIGN      570
#define UNTIL_SYM      684
#define LOG      360
#define OWNER_SYM      464
#define OR_SYM      735
#define MIN_SYM      414
#define TO_SECONDS      654
#define REPAIR      524
#define WEEKDAY      715
#define COT      136
#define POW      483
#define SECURITY_SYM      556
#define EXP      230
#define DATE_FORMAT      161
#define COS      135
#define EVENT_SYM      222
#define BOOLEAN_SYM      79
#define SAVEPOINT      550
#define FIRST_SYM      244
#define BOTH      80
#define AES_ENCRYPT      38
#define TINYINT      649
#define ATAN      54
#define NOT_SYM      442
#define COMMENT_SYM      112
#define CP1256      140
#define RELEASE_SYM      519
#define CP1251      139
#define WARNINGS      713
#define CP1250      138
#define FUNCTION_SYM      261
#define CURSOR_SYM      155
#define LIST_SYM      352
#define DATE_ADD      160
#define UNDO_BUFFER_SIZE_SYM      672
#define CP1257      141
#define COLUMN_FORMAT      109
#define CONDITION_SYM      122
#define SERVER_SYM      562
#define VAR_POP      703
#define TIMESTAMPDIFF      647
#define TRIGGER_SYM      659
#define FIELD      241
#define SUBTIME      621
#define ESCAPED      219
#define FROM      255
#define DISTINCT      195
#define TEMPORARY      635
#define RTRIM      549
#define PAGE_CHECKSUM_SYM      466
#define SEC_TO_TIME      553
#define FOUND_SYM      254
#define GTH      761
#define ONE_SHOT_SYM      452
#define UPDATE      685
#define AUTOEXTEND_SIZE_SYM      58
#define SCHEDULE_SYM      551
#define RELEASE_LOCK      518
#define INPLACE_SYM      303
#define ALGORITHM_SYM      42
#define DAY_SYM      166
#define EXTRACT      235
#define CUBE_SYM      151
#define EXCHANGE_SYM      225
#define STATS_PERSISTENT      603
#define WORK_SYM      722
#define SET_VAR      742
#define IFNULL      291
#define MAX_SIZE_SYM      400
#define LAST_SYM      333
#define NATIONAL_SYM      432
#define KEY_SYM      324
#define PHASE_SYM      476
#define LTH      762
#define IPC_SYM      315
#define SET_SYM      565
#define DECODE      179
#define STARTING      601
#define CEIL      90
#define CHAIN_SYM      92
#define READ_ONLY_SYM      504
#define DESC      189
#define WHEN_SYM      718
#define SQL_SYM      593
#define CONTINUE_SYM      129
#define SOURCE_SYM      583
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
